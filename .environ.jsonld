{
  "@context": "https://stencila.github.io/schema/context.jsonld",
  "type": "SoftwareEnvironment",
  "name": "elife-49305-era",
  "softwareRequirements": [
    {
      "type": "SoftwarePackage",
      "name": "elife-49305-era",
      "runtimePlatform": "Python",
      "softwareRequirements": [
        {
          "type": "SoftwarePackage",
          "description": "\n.. image:: https://secure.travis-ci.org/ActiveState/appdirs.png\n    :target: http://travis-ci.org/ActiveState/appdirs\n\nthe problem\n===========\n\nWhat directory should your app use for storing user data? If running on Mac OS X, you\nshould use::\n\n    ~/Library/Application Support/<AppName>\n\nIf on Windows (at least English Win XP) that should be::\n\n    C:\\Documents and Settings\\<User>\\Application Data\\Local Settings\\<AppAuthor>\\<AppName>\n\nor possibly::\n\n    C:\\Documents and Settings\\<User>\\Application Data\\<AppAuthor>\\<AppName>\n\nfor `roaming profiles <http://bit.ly/9yl3b6>`_ but that is another story.\n\nOn Linux (and other Unices) the dir, according to the `XDG\nspec <http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html>`_, is::\n\n    ~/.local/share/<AppName>\n\n\n``appdirs`` to the rescue\n=========================\n\nThis kind of thing is what the ``appdirs`` module is for. ``appdirs`` will\nhelp you choose an appropriate:\n\n- user data dir (``user_data_dir``)\n- user config dir (``user_config_dir``)\n- user cache dir (``user_cache_dir``)\n- site data dir (``site_data_dir``)\n- site config dir (``site_config_dir``)\n- user log dir (``user_log_dir``)\n\nand also:\n\n- is a single module so other Python packages can include their own private copy\n- is slightly opinionated on the directory names used. Look for \"OPINION\" in\n  documentation and code for when an opinion is being applied.\n\n\nsome example output\n===================\n\nOn Mac OS X::\n\n    >>> from appdirs import *\n    >>> appname = \"SuperApp\"\n    >>> appauthor = \"Acme\"\n    >>> user_data_dir(appname, appauthor)\n    '/Users/trentm/Library/Application Support/SuperApp'\n    >>> site_data_dir(appname, appauthor)\n    '/Library/Application Support/SuperApp'\n    >>> user_cache_dir(appname, appauthor)\n    '/Users/trentm/Library/Caches/SuperApp'\n    >>> user_log_dir(appname, appauthor)\n    '/Users/trentm/Library/Logs/SuperApp'\n\nOn Windows 7::\n\n    >>> from appdirs import *\n    >>> appname = \"SuperApp\"\n    >>> appauthor = \"Acme\"\n    >>> user_data_dir(appname, appauthor)\n    'C:\\\\Users\\\\trentm\\\\AppData\\\\Local\\\\Acme\\\\SuperApp'\n    >>> user_data_dir(appname, appauthor, roaming=True)\n    'C:\\\\Users\\\\trentm\\\\AppData\\\\Roaming\\\\Acme\\\\SuperApp'\n    >>> user_cache_dir(appname, appauthor)\n    'C:\\\\Users\\\\trentm\\\\AppData\\\\Local\\\\Acme\\\\SuperApp\\\\Cache'\n    >>> user_log_dir(appname, appauthor)\n    'C:\\\\Users\\\\trentm\\\\AppData\\\\Local\\\\Acme\\\\SuperApp\\\\Logs'\n\nOn Linux::\n\n    >>> from appdirs import *\n    >>> appname = \"SuperApp\"\n    >>> appauthor = \"Acme\"\n    >>> user_data_dir(appname, appauthor)\n    '/home/trentm/.local/share/SuperApp\n    >>> site_data_dir(appname, appauthor)\n    '/usr/local/share/SuperApp'\n    >>> site_data_dir(appname, appauthor, multipath=True)\n    '/usr/local/share/SuperApp:/usr/share/SuperApp'\n    >>> user_cache_dir(appname, appauthor)\n    '/home/trentm/.cache/SuperApp'\n    >>> user_log_dir(appname, appauthor)\n    '/home/trentm/.cache/SuperApp/log'\n    >>> user_config_dir(appname)\n    '/home/trentm/.config/SuperApp'\n    >>> site_config_dir(appname)\n    '/etc/xdg/SuperApp'\n    >>> os.environ['XDG_CONFIG_DIRS'] = '/etc:/usr/local/etc'\n    >>> site_config_dir(appname, multipath=True)\n    '/etc/SuperApp:/usr/local/etc/SuperApp'\n\n\n``AppDirs`` for convenience\n===========================\n\n::\n\n    >>> from appdirs import AppDirs\n    >>> dirs = AppDirs(\"SuperApp\", \"Acme\")\n    >>> dirs.user_data_dir\n    '/Users/trentm/Library/Application Support/SuperApp'\n    >>> dirs.site_data_dir\n    '/Library/Application Support/SuperApp'\n    >>> dirs.user_cache_dir\n    '/Users/trentm/Library/Caches/SuperApp'\n    >>> dirs.user_log_dir\n    '/Users/trentm/Library/Logs/SuperApp'\n\n\n\nPer-version isolation\n=====================\n\nIf you have multiple versions of your app in use that you want to be\nable to run side-by-side, then you may want version-isolation for these\ndirs::\n\n    >>> from appdirs import AppDirs\n    >>> dirs = AppDirs(\"SuperApp\", \"Acme\", version=\"1.0\")\n    >>> dirs.user_data_dir\n    '/Users/trentm/Library/Application Support/SuperApp/1.0'\n    >>> dirs.site_data_dir\n    '/Library/Application Support/SuperApp/1.0'\n    >>> dirs.user_cache_dir\n    '/Users/trentm/Library/Caches/SuperApp/1.0'\n    >>> dirs.user_log_dir\n    '/Users/trentm/Library/Logs/SuperApp/1.0'\n\n\n\nappdirs Changelog\n=================\n\nappdirs 1.4.4\n-------------\n- [PR #92] Don't import appdirs from setup.py\n\nProject officially classified as Stable which is important\nfor inclusion in other distros such as ActivePython.\n\nFirst of several incremental releases to catch up on maintenance.\n\nappdirs 1.4.3\n-------------\n- [PR #76] Python 3.6 invalid escape sequence deprecation fixes\n- Fix for Python 3.6 support\n\nappdirs 1.4.2\n-------------\n- [PR #84] Allow installing without setuptools\n- [PR #86] Fix string delimiters in setup.py description\n- Add Python 3.6 support\n\nappdirs 1.4.1\n-------------\n- [issue #38] Fix _winreg import on Windows Py3\n- [issue #55] Make appname optional\n\nappdirs 1.4.0\n-------------\n- [PR #42] AppAuthor is now optional on Windows\n- [issue 41] Support Jython on Windows, Mac, and Unix-like platforms. Windows\n  support requires `JNA <https://github.com/twall/jna>`_.\n- [PR #44] Fix incorrect behaviour of the site_config_dir method\n\nappdirs 1.3.0\n-------------\n- [Unix, issue 16] Conform to XDG standard, instead of breaking it for\n  everybody\n- [Unix] Removes gratuitous case mangling of the case, since \\*nix-es are\n  usually case sensitive, so mangling is not wise\n- [Unix] Fixes the utterly wrong behaviour in ``site_data_dir``, return result\n  based on XDG_DATA_DIRS and make room for respecting the standard which\n  specifies XDG_DATA_DIRS is a multiple-value variable\n- [Issue 6] Add ``*_config_dir`` which are distinct on nix-es, according to\n  XDG specs; on Windows and Mac return the corresponding ``*_data_dir``\n\nappdirs 1.2.0\n-------------\n\n- [Unix] Put ``user_log_dir`` under the *cache* dir on Unix. Seems to be more\n  typical.\n- [issue 9] Make ``unicode`` work on py3k.\n\nappdirs 1.1.0\n-------------\n\n- [issue 4] Add ``AppDirs.user_log_dir``.\n- [Unix, issue 2, issue 7] appdirs now conforms to `XDG base directory spec\n  <http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html>`_.\n- [Mac, issue 5] Fix ``site_data_dir()`` on Mac.\n- [Mac] Drop use of 'Carbon' module in favour of hardcoded paths; supports\n  Python3 now.\n- [Windows] Append \"Cache\" to ``user_cache_dir`` on Windows by default. Use\n  ``opinion=False`` option to disable this.\n- Add ``appdirs.AppDirs`` convenience class. Usage:\n\n        >>> dirs = AppDirs(\"SuperApp\", \"Acme\", version=\"1.0\")\n        >>> dirs.user_data_dir\n        '/Users/trentm/Library/Application Support/SuperApp/1.0'\n\n- [Windows] Cherry-pick Komodo's change to downgrade paths to the Windows short\n  paths if there are high bit chars.\n- [Linux] Change default ``user_cache_dir()`` on Linux to be singular, e.g.\n  \"~/.superapp/cache\".\n- [Windows] Add ``roaming`` option to ``user_data_dir()`` (for use on Windows only)\n  and change the default ``user_data_dir`` behaviour to use a *non*-roaming\n  profile dir (``CSIDL_LOCAL_APPDATA`` instead of ``CSIDL_APPDATA``). Why? Because\n  a large roaming profile can cause login speed issues. The \"only syncs on\n  logout\" behaviour can cause surprises in appdata info.\n\n\nappdirs 1.0.1 (never released)\n------------------------------\n\nStarted this changelog 27 July 2010. Before that this module originated in the\n`Komodo <http://www.activestate.com/komodo>`_ product as ``applib.py`` and then\nas `applib/location.py\n<http://github.com/ActiveState/applib/blob/master/applib/location.py>`_ (used by\n`PyPM <http://code.activestate.com/pypm/>`_ in `ActivePython\n<http://www.activestate.com/activepython>`_). This is basically a fork of\napplib.py 1.0.1 and applib/location.py 1.0.1.\n\n\n\n",
          "name": "appdirs",
          "author": [
            {
              "type": "Person",
              "name": "Trent Mick",
              "email": [
                "trentm@gmail.com"
              ],
              "familyName": [
                "Mick"
              ],
              "givenName": [
                "Trent"
              ]
            }
          ],
          "keywords": "application directory log cache user",
          "license": "MIT",
          "version": "==1.4.4",
          "codeRepository": "https://pypi.org/project/appdirs/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python",
          "applicationCategory": [
            "Software Development"
          ],
          "applicationSubCategory": [
            "Libraries"
          ]
        },
        {
          "type": "SoftwarePackage",
          "description": "# `appnope`\n\nSimple package for disabling App Nap on macOS >= 10.9,\nwhich can be problematic.\n\nTo disable App Nap:\n\n```python\nimport appnope\nappnope.nope()\n```\n\nTo reenable, for some reason:\n\n```python\nappnope.nap()\n```\n\nor to only disable App Nap for a particular block:\n\n```\nwith appnope.nope_scope():\n    do_important_stuff()\n```\n\nIt uses ctypes to wrap a `[NSProcessInfo beginActivityWithOptions]` call to disable App Nap.\n\nTo install:\n\n    pip install appnope\n\n\n",
          "name": "appnope",
          "author": [
            {
              "type": "Person",
              "name": "Min Ragan-Kelley",
              "email": [
                "benjaminrk@gmail.com"
              ],
              "familyName": [
                "Ragan-Kelley"
              ],
              "givenName": [
                "Min"
              ]
            }
          ],
          "license": "BSD",
          "codeRepository": "https://pypi.org/project/appnope/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python",
          "operatingSystem": [
            {
              "type": "OperatingSystem",
              "name": "macOS"
            }
          ]
        },
        {
          "type": "SoftwarePackage",
          "description": "=====================================\nCFFI-based Argon2 Bindings for Python\n=====================================\n\n.. image:: https://readthedocs.org/projects/argon2-cffi/badge/?version=stable\n   :target: http://argon2-cffi.readthedocs.io/en/stable/?badge=stable\n   :alt: Documentation Status\n\n.. image:: https://github.com/hynek/argon2-cffi/workflows/CI/badge.svg?branch=master\n   :target: https://github.com/hynek/argon2-cffi/actions?workflow=CI\n   :alt: CI Status\n\n.. image:: https://codecov.io/github/hynek/argon2-cffi/branch/master/graph/badge.svg\n   :target: https://codecov.io/github/hynek/argon2-cffi\n   :alt: Test Coverage\n\n.. image:: https://www.irccloud.com/invite-svg?channel=%23cryptography-dev&amp;hostname=irc.freenode.net&amp;port=6697&amp;ssl=1\n   :target: https://www.irccloud.com/invite?channel=%23cryptography-dev&amp;hostname=irc.freenode.net&amp;port=6697&amp;ssl=1\n   :alt: IRC\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n   :target: https://github.com/ambv/black\n   :alt: Code style: black\n\n.. teaser-begin\n\n`Argon2 <https://github.com/p-h-c/phc-winner-argon2>`_ won the `Password Hashing Competition <https://password-hashing.net/>`_ and ``argon2-cffi`` is the simplest way to use it in Python and PyPy:\n\n.. code-block:: pycon\n\n  >>> from argon2 import PasswordHasher\n  >>> ph = PasswordHasher()\n  >>> hash = ph.hash(\"s3kr3tp4ssw0rd\")\n  >>> hash  # doctest: +SKIP\n  '$argon2id$v=19$m=102400,t=2,p=8$tSm+JOWigOgPZx/g44K5fQ$WDyus6py50bVFIPkjA28lQ'\n  >>> ph.verify(hash, \"s3kr3tp4ssw0rd\")\n  True\n  >>> ph.check_needs_rehash(hash)\n  False\n  >>> ph.verify(hash, \"t0t411ywr0ng\")\n  Traceback (most recent call last):\n    ...\n  argon2.exceptions.VerifyMismatchError: The password does not match the supplied hash\n\n\n``argon2-cffi``\\ ’s documentation lives at `Read the Docs <https://argon2-cffi.readthedocs.io/>`_, the code on `GitHub <https://github.com/hynek/argon2-cffi>`_.\nIt’s rigorously tested on Python 2.7, 3.5+, and PyPy.\n\n\nRelease Information\n===================\n\n20.1.0 (2020-05-11)\n-------------------\n\nVendoring Argon2 @ `62358ba <https://github.com/P-H-C/phc-winner-argon2/tree/62358ba2123abd17fccf2a108a301d4b52c01a7c>`_ (20190702)\n\n\nBackward-incompatible changes:\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n*none*\n\n\nDeprecations:\n^^^^^^^^^^^^^\n\n*none*\n\n\nChanges:\n^^^^^^^^\n\n- It is now possible to manually override the detection of SSE2 using the ``ARGON2_CFFI_USE_SSE2`` environment variable.\n\n`Full changelog <https://argon2-cffi.readthedocs.io/en/stable/changelog.html>`_.\n\nCredits & License\n=================\n\n``argon2-cffi`` is maintained by Hynek Schlawack and released under the `MIT license <https://github.com/hynek/argon2-cffi/blob/master/LICENSE>`_.\n\nThe development is kindly supported by `Variomedia AG <https://www.variomedia.de/>`_.\n\nA full list of contributors can be found in GitHub's `overview <https://github.com/hynek/argon2-cffi/graphs/contributors>`_.\n\n\nVendored Code\n-------------\n\nArgon2\n^^^^^^\n\nThe original Argon2 repo can be found at https://github.com/P-H-C/phc-winner-argon2/.\n\nExcept for the components listed below, the Argon2 code in this repository is copyright (c) 2015 Daniel Dinu, Dmitry Khovratovich (main authors), Jean-Philippe Aumasson and Samuel Neves, and under CC0_ license.\n\nThe string encoding routines in src/encoding.c are copyright (c) 2015 Thomas Pornin, and under CC0_ license.\n\nThe `BLAKE2 <https://blake2.net>`_ code in ``src/blake2/`` is copyright (c) Samuel Neves, 2013-2015, and under CC0_ license.\n\nThe authors of Argon2 also were very helpful to get the library to compile on ancient versions of Visual Studio for ancient versions of Python.\n\nThe documentation also quotes frequently from the Argon2 paper_ to avoid mistakes by rephrasing.\n\n.. _CC0: https://creativecommons.org/publicdomain/zero/1.0/\n.. _paper: https://password-hashing.net/argon2-specs.pdf\n\nmsinttypes\n^^^^^^^^^^\n\nIn order to be able to compile on Visual Studio 2008 and Visual Studio 2010 which are required for Python 2.7, we also ship two C headers with integer types.\nThey are from the `msinttypes project <https://code.google.com/archive/p/msinttypes>`_ (`auto-import on GitHub <https://github.com/chemeris/msinttypes>`_) and licensed under New BSD:\n\nCopyright (c) 2006-2013 Alexander Chemeris\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n  1. Redistributions of source code must retain the above copyright notice,\n     this list of conditions and the following disclaimer.\n  2. Redistributions in binary form must reproduce the above copyright\n     notice, this list of conditions and the following disclaimer in the\n     documentation and/or other materials provided with the distribution.\n  3. Neither the name of the product nor the names of its contributors may\n     be used to endorse or promote products derived from this software\n     without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR IMPLIED\nWARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\nEVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\nPROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;\nOR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\nWHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\nOTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\nADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
          "name": "argon2-cffi",
          "author": [
            {
              "type": "Person",
              "name": "Hynek Schlawack",
              "email": [
                "hs@ox.cx"
              ],
              "familyName": [
                "Schlawack"
              ],
              "givenName": [
                "Hynek"
              ]
            }
          ],
          "keywords": "password,hash,hashing,security",
          "license": "MIT",
          "version": "==20.1.0",
          "codeRepository": "https://pypi.org/project/argon2-cffi/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python",
          "applicationCategory": [
            "Security",
            "Software Development"
          ],
          "applicationSubCategory": [
            "Cryptography",
            "Libraries"
          ],
          "operatingSystem": [
            {
              "type": "OperatingSystem",
              "name": "macOS"
            },
            {
              "type": "OperatingSystem",
              "name": "Windows"
            },
            {
              "type": "OperatingSystem",
              "name": "Linux"
            },
            {
              "type": "OperatingSystem",
              "name": "Unix"
            }
          ]
        },
        {
          "type": "SoftwarePackage",
          "description": ".. image:: https://img.shields.io/badge/chat-join%20now-blue.svg\n   :target: https://gitter.im/python-trio/general\n   :alt: Join chatroom\n\n.. image:: https://img.shields.io/badge/docs-read%20now-blue.svg\n   :target: https://async-generator.readthedocs.io/en/latest/?badge=latest\n   :alt: Documentation Status\n\n.. image:: https://travis-ci.org/python-trio/async_generator.svg?branch=master\n   :target: https://travis-ci.org/python-trio/async_generator\n   :alt: Automated test status\n\n.. image:: https://ci.appveyor.com/api/projects/status/af4eyed8o8tc3t0r/branch/master?svg=true\n   :target: https://ci.appveyor.com/project/python-trio/trio/history\n   :alt: Automated test status (Windows)\n\n.. image:: https://codecov.io/gh/python-trio/async_generator/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/python-trio/async_generator\n   :alt: Test coverage\n\nThe async_generator library\n===========================\n\nPython 3.6 added `async generators\n<https://www.python.org/dev/peps/pep-0525/>`__. (What's an async\ngenerator? `Check out my 5-minute lightning talk demo from PyCon 2016\n<https://youtu.be/PulzIT8KYLk?t=24m30s>`__.) Python 3.7 adds some more\ntools to make them usable, like ``contextlib.asynccontextmanager``.\n\nThis library gives you all that back to Python 3.5.\n\nFor example, this code only works in Python 3.6+:\n\n.. code-block:: python3\n\n   async def load_json_lines(stream_reader):\n       async for line in stream_reader:\n           yield json.loads(line)\n\nBut this code does the same thing, and works on Python 3.5+:\n\n.. code-block:: python3\n\n   from async_generator import async_generator, yield_\n\n   @async_generator\n   async def load_json_lines(stream_reader):\n       async for line in stream_reader:\n           await yield_(json.loads(line))\n\nOr in Python 3.7, you can write:\n\n.. code-block:: python3\n\n   from contextlib import asynccontextmanager\n\n   @asynccontextmanager\n   async def background_server():\n       async with trio.open_nursery() as nursery:\n           value = await nursery.start(my_server)\n           try:\n               yield value\n           finally:\n               # Kill the server when the scope exits\n               nursery.cancel_scope.cancel()\n\nThis is the same, but back to 3.5:\n\n.. code-block:: python3\n\n   from async_generator import async_generator, yield_, asynccontextmanager\n\n   @asynccontextmanager\n   @async_generator\n   async def background_server():\n       async with trio.open_nursery() as nursery:\n           value = await nursery.start(my_server)\n           try:\n               await yield_(value)\n           finally:\n               # Kill the server when the scope exits\n               nursery.cancel_scope.cancel()\n\n(And if you're on 3.6, you can use ``@asynccontextmanager`` with\nnative generators.)\n\n\nLet's do this\n=============\n\n* Install: ``python3 -m pip install -U async_generator`` (or on Windows,\n  maybe ``py -3 -m pip install -U async_generator``\n\n* Manual: https://async-generator.readthedocs.io/\n\n* Bug tracker and source code: https://github.com/python-trio/async_generator\n\n* Real-time chat: https://gitter.im/python-trio/general\n\n* License: MIT or Apache 2, your choice\n\n* Contributor guide: https://trio.readthedocs.io/en/latest/contributing.html\n\n* Code of conduct: Contributors are requested to follow our `code of\n  conduct\n  <https://trio.readthedocs.io/en/latest/code-of-conduct.html>`__ in\n  all project spaces.\n\n\nHow come some of those links talk about \"trio\"?\n===============================================\n\n`Trio <https://trio.readthedocs.io>`__ is a new async concurrency\nlibrary for Python that's obsessed with usability and correctness – we\nwant to make it *easy* to get things *right*. The ``async_generator``\nlibrary is maintained by the Trio project as part of that mission, and\nbecause Trio uses ``async_generator`` internally.\n\nYou can use ``async_generator`` with any async library. It works great\nwith ``asyncio``, or Twisted, or whatever you like. (But we think Trio\nis pretty sweet.)\n\n\n",
          "name": "async-generator",
          "author": [
            {
              "type": "Person",
              "name": "Nathaniel J.",
              "familyName": [
                "J."
              ],
              "givenName": [
                "Nathaniel"
              ]
            }
          ],
          "keywords": "async",
          "license": "MIT -or- Apache License 2.0",
          "version": "==1.10",
          "codeRepository": "https://pypi.org/project/async_generator/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python"
        },
        {
          "type": "SoftwarePackage",
          "description": "===================\npython-atomicwrites\n===================\n\n.. image:: https://travis-ci.org/untitaker/python-atomicwrites.svg?branch=master\n    :target: https://travis-ci.org/untitaker/python-atomicwrites\n\n.. image:: https://ci.appveyor.com/api/projects/status/vadc4le3c27to59x/branch/master?svg=true\n   :target: https://ci.appveyor.com/project/untitaker/python-atomicwrites/branch/master\n\nAtomic file writes.\n\n.. code-block:: python\n\n    from atomicwrites import atomic_write\n\n    with atomic_write('foo.txt', overwrite=True) as f:\n        f.write('Hello world.')\n        # \"foo.txt\" doesn't exist yet.\n\n    # Now it does.\n\n\nFeatures that distinguish it from other similar libraries (see `Alternatives and Credit`_):\n\n- Race-free assertion that the target file doesn't yet exist. This can be\n  controlled with the ``overwrite`` parameter.\n\n- Windows support, although not well-tested. The MSDN resources are not very\n  explicit about which operations are atomic. I'm basing my assumptions off `a\n  comment\n  <https://social.msdn.microsoft.com/Forums/windowsdesktop/en-US/449bb49d-8acc-48dc-a46f-0760ceddbfc3/movefileexmovefilereplaceexisting-ntfs-same-volume-atomic?forum=windowssdk#a239bc26-eaf0-4920-9f21-440bd2be9cc8>`_\n  by `Doug Crook\n  <https://social.msdn.microsoft.com/Profile/doug%20e.%20cook>`_, who appears\n  to be a Microsoft employee:\n\n      FAQ: Is MoveFileEx atomic\n      Frequently asked question: Is MoveFileEx atomic if the existing and new\n      files are both on the same drive?\n\n      The simple answer is \"usually, but in some cases it will silently fall-back\n      to a non-atomic method, so don't count on it\".\n\n      The implementation of MoveFileEx looks something like this: [...]\n\n      The problem is if the rename fails, you might end up with a CopyFile, which\n      is definitely not atomic.\n\n      If you really need atomic-or-nothing, you can try calling\n      NtSetInformationFile, which is unsupported but is much more likely to be\n      atomic. \n\n- Simple high-level API that wraps a very flexible class-based API.\n\n- Consistent error handling across platforms.\n\n\nHow it works\n============\n\nIt uses a temporary file in the same directory as the given path. This ensures\nthat the temporary file resides on the same filesystem.\n\nThe temporary file will then be atomically moved to the target location: On\nPOSIX, it will use ``rename`` if files should be overwritten, otherwise a\ncombination of ``link`` and ``unlink``. On Windows, it uses MoveFileEx_ through\nstdlib's ``ctypes`` with the appropriate flags.\n\nNote that with ``link`` and ``unlink``, there's a timewindow where the file\nmight be available under two entries in the filesystem: The name of the\ntemporary file, and the name of the target file.\n\nAlso note that the permissions of the target file may change this way. In some\nsituations a ``chmod`` can be issued without any concurrency problems, but\nsince that is not always the case, this library doesn't do it by itself.\n\n.. _MoveFileEx: https://msdn.microsoft.com/en-us/library/windows/desktop/aa365240%28v=vs.85%29.aspx\n\nfsync\n-----\n\nOn POSIX, ``fsync`` is invoked on the temporary file after it is written (to\nflush file content and metadata), and on the parent directory after the file is\nmoved (to flush filename).\n\n``fsync`` does not take care of disks' internal buffers, but there don't seem\nto be any standard POSIX APIs for that. On OS X, ``fcntl`` is used with\n``F_FULLFSYNC`` instead of ``fsync`` for that reason.\n\nOn Windows, `_commit <https://msdn.microsoft.com/en-us/library/17618685.aspx>`_\nis used, but there are no guarantees about disk internal buffers.\n\nAlternatives and Credit\n=======================\n\nAtomicwrites is directly inspired by the following libraries (and shares a\nminimal amount of code):\n\n- The Trac project's `utility functions\n  <http://www.edgewall.org/docs/tags-trac-0.11.7/epydoc/trac.util-pysrc.html>`_,\n  also used in `Werkzeug <http://werkzeug.pocoo.org/>`_ and\n  `mitsuhiko/python-atomicfile\n  <https://github.com/mitsuhiko/python-atomicfile>`_. The idea to use\n  ``ctypes`` instead of ``PyWin32`` originated there.\n\n- `abarnert/fatomic <https://github.com/abarnert/fatomic>`_. Windows support\n  (based on ``PyWin32``) was originally taken from there.\n\nOther alternatives to atomicwrites include:\n\n- `sashka/atomicfile <https://github.com/sashka/atomicfile>`_. Originally I\n  considered using that, but at the time it was lacking a lot of features I\n  needed (Windows support, overwrite-parameter, overriding behavior through\n  subclassing).\n\n- The `Boltons library collection <https://github.com/mahmoud/boltons>`_\n  features a class for atomic file writes, which seems to have a very similar\n  ``overwrite`` parameter. It is lacking Windows support though.\n\nLicense\n=======\n\nLicensed under the MIT, see ``LICENSE``.\n\n\n",
          "name": "atomicwrites",
          "author": [
            {
              "type": "Person",
              "name": "Markus Unterwaditzer",
              "email": [
                "markus@unterwaditzer.net"
              ],
              "familyName": [
                "Unterwaditzer"
              ],
              "givenName": [
                "Markus"
              ]
            }
          ],
          "license": "MIT",
          "version": "==1.4.0",
          "codeRepository": "https://pypi.org/project/atomicwrites/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python"
        },
        {
          "type": "SoftwarePackage",
          "description": "======================================\n``attrs``: Classes Without Boilerplate\n======================================\n\n\n``attrs`` is the Python package that will bring back the **joy** of **writing classes** by relieving you from the drudgery of implementing object protocols (aka `dunder <https://nedbatchelder.com/blog/200605/dunder.html>`_ methods).\n`Trusted by NASA <https://docs.github.com/en/github/setting-up-and-managing-your-github-profile/personalizing-your-profile#list-of-qualifying-repositories-for-mars-2020-helicopter-contributor-badge>`_ for Mars missions since 2020!\n\nIts main goal is to help you to write **concise** and **correct** software without slowing down your code.\n\n.. teaser-end\n\nFor that, it gives you a class decorator and a way to declaratively define the attributes on that class:\n\n.. -code-begin-\n\n.. code-block:: pycon\n\n   >>> import attr\n\n   >>> @attr.s\n   ... class SomeClass(object):\n   ...     a_number = attr.ib(default=42)\n   ...     list_of_numbers = attr.ib(factory=list)\n   ...\n   ...     def hard_math(self, another_number):\n   ...         return self.a_number + sum(self.list_of_numbers) * another_number\n\n\n   >>> sc = SomeClass(1, [1, 2, 3])\n   >>> sc\n   SomeClass(a_number=1, list_of_numbers=[1, 2, 3])\n\n   >>> sc.hard_math(3)\n   19\n   >>> sc == SomeClass(1, [1, 2, 3])\n   True\n   >>> sc != SomeClass(2, [3, 2, 1])\n   True\n\n   >>> attr.asdict(sc)\n   {'a_number': 1, 'list_of_numbers': [1, 2, 3]}\n\n   >>> SomeClass()\n   SomeClass(a_number=42, list_of_numbers=[])\n\n   >>> C = attr.make_class(\"C\", [\"a\", \"b\"])\n   >>> C(\"foo\", \"bar\")\n   C(a='foo', b='bar')\n\n\nAfter *declaring* your attributes ``attrs`` gives you:\n\n- a concise and explicit overview of the class's attributes,\n- a nice human-readable ``__repr__``,\n- a complete set of comparison methods (equality and ordering),\n- an initializer,\n- and much more,\n\n*without* writing dull boilerplate code again and again and *without* runtime performance penalties.\n\nOn Python 3.6 and later, you can often even drop the calls to ``attr.ib()`` by using `type annotations <https://www.attrs.org/en/latest/types.html>`_.\n\nThis gives you the power to use actual classes with actual types in your code instead of confusing ``tuple``\\ s or `confusingly behaving <https://www.attrs.org/en/stable/why.html#namedtuples>`_ ``namedtuple``\\ s.\nWhich in turn encourages you to write *small classes* that do `one thing well <https://www.destroyallsoftware.com/talks/boundaries>`_.\nNever again violate the `single responsibility principle <https://en.wikipedia.org/wiki/Single_responsibility_principle>`_ just because implementing ``__init__`` et al is a painful drag.\n\n\n.. -getting-help-\n\nGetting Help\n============\n\nPlease use the ``python-attrs`` tag on `StackOverflow <https://stackoverflow.com/questions/tagged/python-attrs>`_ to get help.\n\nAnswering questions of your fellow developers is also a great way to help the project!\n\n\n.. -project-information-\n\nProject Information\n===================\n\n``attrs`` is released under the `MIT <https://choosealicense.com/licenses/mit/>`_ license,\nits documentation lives at `Read the Docs <https://www.attrs.org/>`_,\nthe code on `GitHub <https://github.com/python-attrs/attrs>`_,\nand the latest release on `PyPI <https://pypi.org/project/attrs/>`_.\nIt’s rigorously tested on Python 2.7, 3.5+, and PyPy.\n\nWe collect information on **third-party extensions** in our `wiki <https://github.com/python-attrs/attrs/wiki/Extensions-to-attrs>`_.\nFeel free to browse and add your own!\n\nIf you'd like to contribute to ``attrs`` you're most welcome and we've written `a little guide <https://www.attrs.org/en/latest/contributing.html>`_ to get you started!\n\n\n``attrs`` for Enterprise\n------------------------\n\nAvailable as part of the Tidelift Subscription.\n\nThe maintainers of ``attrs`` and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source packages you use to build your applications.\nSave time, reduce risk, and improve code health, while paying the maintainers of the exact packages you use.\n`Learn more. <https://tidelift.com/subscription/pkg/pypi-attrs?utm_source=pypi-attrs&utm_medium=referral&utm_campaign=enterprise&utm_term=repo>`_\n\n\nRelease Information\n===================\n\n21.2.0 (2021-05-07)\n-------------------\n\nBackward-incompatible Changes\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n- We had to revert the recursive feature for ``attr.evolve()`` because it broke some use-cases -- sorry!\n  `#806 <https://github.com/python-attrs/attrs/issues/806>`_\n- Python 3.4 is now blocked using packaging metadata because ``attrs`` can't be imported on it anymore.\n  To ensure that 3.4 users can keep installing  ``attrs`` easily, we will `yank <https://pypi.org/help/#yanked>`_ 21.1.0 from PyPI.\n  This has **no** consequences if you pin ``attrs`` to 21.1.0.\n  `#807 <https://github.com/python-attrs/attrs/issues/807>`_\n\n`Full changelog <https://www.attrs.org/en/stable/changelog.html>`_.\n\nCredits\n=======\n\n``attrs`` is written and maintained by `Hynek Schlawack <https://hynek.me/>`_.\n\nThe development is kindly supported by `Variomedia AG <https://www.variomedia.de/>`_.\n\nA full list of contributors can be found in `GitHub's overview <https://github.com/python-attrs/attrs/graphs/contributors>`_.\n\nIt’s the spiritual successor of `characteristic <https://characteristic.readthedocs.io/>`_ and aspires to fix some of it clunkiness and unfortunate decisions.\nBoth were inspired by Twisted’s `FancyEqMixin <https://twistedmatrix.com/documents/current/api/twisted.python.util.FancyEqMixin.html>`_ but both are implemented using class decorators because `subclassing is bad for you <https://www.youtube.com/watch?v=3MNVP9-hglc>`_, m’kay?\n\n\n",
          "name": "attrs",
          "author": [
            {
              "type": "Person",
              "name": "Hynek Schlawack",
              "email": [
                "hs@ox.cx"
              ],
              "familyName": [
                "Schlawack"
              ],
              "givenName": [
                "Hynek"
              ]
            }
          ],
          "keywords": "class,attribute,boilerplate",
          "license": "MIT",
          "version": "==20.3.0",
          "codeRepository": "https://pypi.org/project/attrs/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python",
          "applicationCategory": [
            "Software Development"
          ],
          "applicationSubCategory": [
            "Libraries"
          ]
        },
        {
          "type": "SoftwarePackage",
          "description": "========\nbackcall\n========\n\n.. image:: https://travis-ci.org/takluyver/backcall.png?branch=master\n        :target: https://travis-ci.org/takluyver/backcall\n\nSpecifications for callback functions passed in to an API\n\nIf your code lets other people supply callback functions, it's important to\nspecify the function signature you expect, and check that functions support that.\nAdding extra parameters later would break other peoples code unless you're careful.\n\nbackcall provides a way of specifying the callback signature using a prototype\nfunction::\n\n    from backcall import callback_prototype\n    \n    @callback_prototype\n    def handle_ping(sender, delay=None):\n        # Specify positional parameters without a default, and keyword\n        # parameters with a default.\n        pass\n    \n    def register_ping_handler(callback):\n        # This checks and adapts the function passed in:\n        callback = handle_ping.adapt(callback)\n        ping_callbacks.append(callback)\n\nIf the callback takes fewer parameters than your prototype, *backcall* will wrap\nit in a function that discards the extra arguments. If the callback expects\nmore arguments, a TypeError is thrown when it is registered.\n\nFor more details, see the `docs <http://backcall.readthedocs.org/en/latest/>`_ or\nthe `Demo notebook <http://nbviewer.ipython.org/github/takluyver/backcall/blob/master/Demo.ipynb>`_.\n\nThe tests are run with `pytest <http://pytest.org/latest/>`_. In the root directory,\nexecute::\n\n    py.test\n",
          "name": "backcall",
          "author": [
            {
              "type": "Person",
              "name": "Thomas Kluyver",
              "email": [
                "thomas@kluyver.me.uk"
              ],
              "familyName": [
                "Kluyver"
              ],
              "givenName": [
                "Thomas"
              ]
            }
          ],
          "codeRepository": "https://pypi.org/project/backcall/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python"
        },
        {
          "type": "SoftwarePackage",
          "description": ".. image:: https://img.shields.io/pypi/v/backports.functools_lru_cache.svg\n   :target: `PyPI link`_\n\n.. image:: https://img.shields.io/pypi/pyversions/backports.functools_lru_cache.svg\n   :target: `PyPI link`_\n\n.. _PyPI link: https://pypi.org/project/backports.functools_lru_cache\n\n.. image:: https://github.com/jaraco/backports.functools_lru_cache/workflows/tests/badge.svg\n   :target: https://github.com/jaraco/backports.functools_lru_cache/actions?query=workflow%3A%22tests%22\n   :alt: tests\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n   :target: https://github.com/psf/black\n   :alt: Code style: Black\n\n.. image:: https://readthedocs.org/projects/backportsfunctools_lru_cache/badge/?version=latest\n   :target: https://backportsfunctools_lru_cache.readthedocs.io/en/latest/?badge=latest\n\n.. image:: https://tidelift.com/badges/package/pypi/backports.functools_lru_cache\n   :target: https://tidelift.com/subscription/pkg/pypi-backports.functools_lru_cache?utm_source=pypi-backports.functools_lru_cache&utm_medium=readme\n\nBackport of functools.lru_cache from Python 3.3 as published at `ActiveState\n<http://code.activestate.com/recipes/578078/>`_.\n\nUsage\n=====\n\nConsider using this technique for importing the 'lru_cache' function::\n\n    try:\n        from functools import lru_cache\n    except ImportError:\n        from backports.functools_lru_cache import lru_cache\n\n\nFor Enterprise\n==============\n\nAvailable as part of the Tidelift Subscription.\n\nThis project and the maintainers of thousands of other packages are working with Tidelift to deliver one enterprise subscription that covers all of the open source you use.\n\n`Learn more <https://tidelift.com/subscription/pkg/pypi-backports.functools_lru_cache?utm_source=pypi-backports.functools_lru_cache&utm_medium=referral&utm_campaign=github>`_.\n\nSecurity Contact\n================\n\nTo report a security vulnerability, please use the\n`Tidelift security contact <https://tidelift.com/security>`_.\nTidelift will coordinate the fix and disclosure.\n\n\n",
          "name": "backports.functools-lru-cache",
          "author": [
            {
              "type": "Person",
              "name": "Raymond Hettinger",
              "email": [
                "raymond.hettinger@gmail.com"
              ],
              "familyName": [
                "Hettinger"
              ],
              "givenName": [
                "Raymond"
              ]
            }
          ],
          "codeRepository": "https://pypi.org/project/backports.functools-lru-cache/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python"
        },
        {
          "type": "SoftwarePackage",
          "description": "======\nBleach\n======\n\n.. image:: https://github.com/mozilla/bleach/workflows/Test/badge.svg\n   :target: https://github.com/mozilla/bleach/actions?query=workflow%3ATest\n\n.. image:: https://github.com/mozilla/bleach/workflows/Lint/badge.svg\n   :target: https://github.com/mozilla/bleach/actions?query=workflow%3ALint\n\n.. image:: https://badge.fury.io/py/bleach.svg\n   :target: http://badge.fury.io/py/bleach\n\nBleach is an allowed-list-based HTML sanitizing library that escapes or strips\nmarkup and attributes.\n\nBleach can also linkify text safely, applying filters that Django's ``urlize``\nfilter cannot, and optionally setting ``rel`` attributes, even on links already\nin the text.\n\nBleach is intended for sanitizing text from *untrusted* sources. If you find\nyourself jumping through hoops to allow your site administrators to do lots of\nthings, you're probably outside the use cases. Either trust those users, or\ndon't.\n\nBecause it relies on html5lib_, Bleach is as good as modern browsers at dealing\nwith weird, quirky HTML fragments. And *any* of Bleach's methods will fix\nunbalanced or mis-nested tags.\n\nThe version on GitHub_ is the most up-to-date and contains the latest bug\nfixes. You can find full documentation on `ReadTheDocs`_.\n\n:Code:           https://github.com/mozilla/bleach\n:Documentation:  https://bleach.readthedocs.io/\n:Issue tracker:  https://github.com/mozilla/bleach/issues\n:License:        Apache License v2; see LICENSE file\n\n\nReporting Bugs\n==============\n\nFor regular bugs, please report them `in our issue tracker\n<https://github.com/mozilla/bleach/issues>`_.\n\nIf you believe that you've found a security vulnerability, please `file a secure\nbug report in our bug tracker\n<https://bugzilla.mozilla.org/enter_bug.cgi?assigned_to=nobody%40mozilla.org&product=Webtools&component=Bleach-security&groups=webtools-security>`_\nor send an email to *security AT mozilla DOT org*.\n\nFor more information on security-related bug disclosure and the PGP key to use\nfor sending encrypted mail or to verify responses received from that address,\nplease read our wiki page at\n`<https://www.mozilla.org/en-US/security/#For_Developers>`_.\n\n\nSecurity\n========\n\nBleach is a security-focused library.\n\nWe have a responsible security vulnerability reporting process. Please use\nthat if you're reporting a security issue.\n\nSecurity issues are fixed in private. After we land such a fix, we'll do a\nrelease.\n\nFor every release, we mark security issues we've fixed in the ``CHANGES`` in\nthe **Security issues** section. We include any relevant CVE links.\n\n\nInstalling Bleach\n=================\n\nBleach is available on PyPI_, so you can install it with ``pip``::\n\n    $ pip install bleach\n\n\nUpgrading Bleach\n================\n\n.. warning::\n\n   Before doing any upgrades, read through `Bleach Changes\n   <https://bleach.readthedocs.io/en/latest/changes.html>`_ for backwards\n   incompatible changes, newer versions, etc.\n\n\nBasic use\n=========\n\nThe simplest way to use Bleach is:\n\n.. code-block:: python\n\n    >>> import bleach\n\n    >>> bleach.clean('an <script>evil()</script> example')\n    u'an &lt;script&gt;evil()&lt;/script&gt; example'\n\n    >>> bleach.linkify('an http://example.com url')\n    u'an <a href=\"http://example.com\" rel=\"nofollow\">http://example.com</a> url'\n\n\nCode of Conduct\n===============\n\nThis project and repository is governed by Mozilla's code of conduct and\netiquette guidelines. For more details please see the `CODE_OF_CONDUCT.md\n</CODE_OF_CONDUCT.md>`_\n\n\n.. _html5lib: https://github.com/html5lib/html5lib-python\n.. _GitHub: https://github.com/mozilla/bleach\n.. _ReadTheDocs: https://bleach.readthedocs.io/\n.. _PyPI: https://pypi.org/project/bleach/\n\n\nBleach changes\n==============\n\nVersion 3.3.0 (February 1st, 2021)\n----------------------------------\n\n**Backwards incompatible changes**\n\n* clean escapes HTML comments even when strip_comments=False\n\n**Security fixes**\n\n* Fix bug 1621692 / GHSA-m6xf-fq7q-8743. See the advisory for details.\n\n**Features**\n\nNone\n\n**Bug fixes**\n\nNone\n\nVersion 3.2.3 (January 26th, 2021)\n----------------------------------\n\n**Security fixes**\n\nNone\n\n**Features**\n\nNone\n\n**Bug fixes**\n\n* fix clean and linkify raising ValueErrors for certain inputs. Thank you @Google-Autofuzz.\n\nVersion 3.2.2 (January 20th, 2021)\n----------------------------------\n\n**Security fixes**\n\nNone\n\n**Features**\n\n* Migrate CI to Github Actions. Thank you @hugovk.\n\n**Bug fixes**\n\n* fix linkify raising an IndexError on certain inputs. Thank you @Google-Autofuzz.\n\nVersion 3.2.1 (September 18th, 2020)\n------------------------------------\n\n**Security fixes**\n\nNone\n\n**Features**\n\nNone\n\n**Bug fixes**\n\n* change linkifier to add rel=\"nofollow\" as documented. Thank you @mitar.\n* suppress html5lib sanitizer DeprecationWarnings #557\n\nVersion 3.2.0 (September 16th, 2020)\n------------------------------------\n\n**Security fixes**\n\nNone\n\n**Features**\n\nNone\n\n**Bug fixes**\n\n* ``html5lib`` dependency to version 1.1.0. Thank you Sam Sneddon.\n* update tests_website terminology. Thank you Thomas Grainger.\n\nVersion 3.1.5 (April 29th, 2020)\n--------------------------------\n\n**Security fixes**\n\nNone\n\n**Features**\n\nNone\n\n**Bug fixes**\n\n* replace missing ``setuptools`` dependency with ``packaging``. Thank you Benjamin Peterson.\n\nVersion 3.1.4 (March 24th, 2020)\n--------------------------------\n\n**Security fixes**\n\n* ``bleach.clean`` behavior parsing style attributes could result in a\n  regular expression denial of service (ReDoS).\n\n  Calls to ``bleach.clean`` with an allowed tag with an allowed\n  ``style`` attribute were vulnerable to ReDoS. For example,\n  ``bleach.clean(..., attributes={'a': ['style']})``.\n\n  This issue was confirmed in Bleach versions v3.1.3, v3.1.2, v3.1.1,\n  v3.1.0, v3.0.0, v2.1.4, and v2.1.3. Earlier versions used a similar\n  regular expression and should be considered vulnerable too.\n\n  Anyone using Bleach <=v3.1.3 is encouraged to upgrade.\n\n  https://bugzilla.mozilla.org/show_bug.cgi?id=1623633\n\n**Backwards incompatible changes**\n\n* Style attributes with dashes, or single or double quoted values are\n  cleaned instead of passed through.\n\n**Features**\n\nNone\n\n**Bug fixes**\n\nNone\n\nVersion 3.1.3 (March 17th, 2020)\n--------------------------------\n\n**Security fixes**\n\nNone\n\n**Backwards incompatible changes**\n\nNone\n\n**Features**\n\n* Add relative link to code of conduct. (#442)\n\n* Drop deprecated 'setup.py test' support. (#507)\n\n* Fix typo: curren -> current in tests/test_clean.py (#504)\n\n* Test on PyPy 7\n\n* Drop test support for end of life Python 3.4\n\n**Bug fixes**\n\nNone\n\nVersion 3.1.2 (March 11th, 2020)\n--------------------------------\n\n**Security fixes**\n\n* ``bleach.clean`` behavior parsing embedded MathML and SVG content\n  with RCDATA tags did not match browser behavior and could result in\n  a mutation XSS.\n\n  Calls to ``bleach.clean`` with ``strip=False`` and ``math`` or\n  ``svg`` tags and one or more of the RCDATA tags ``script``,\n  ``noscript``, ``style``, ``noframes``, ``iframe``, ``noembed``, or\n  ``xmp`` in the allowed tags whitelist were vulnerable to a mutation\n  XSS.\n\n  This security issue was confirmed in Bleach version v3.1.1. Earlier\n  versions are likely affected too.\n\n  Anyone using Bleach <=v3.1.1 is encouraged to upgrade.\n\n  https://bugzilla.mozilla.org/show_bug.cgi?id=1621692\n\n**Backwards incompatible changes**\n\nNone\n\n**Features**\n\nNone\n\n**Bug fixes**\n\nNone\n\nVersion 3.1.1 (February 13th, 2020)\n-----------------------------------\n\n**Security fixes**\n\n* ``bleach.clean`` behavior parsing ``noscript`` tags did not match\n  browser behavior.\n\n  Calls to ``bleach.clean`` allowing ``noscript`` and one or more of\n  the raw text tags (``title``, ``textarea``, ``script``, ``style``,\n  ``noembed``, ``noframes``, ``iframe``, and ``xmp``) were vulnerable\n  to a mutation XSS.\n\n  This security issue was confirmed in Bleach versions v2.1.4, v3.0.2,\n  and v3.1.0. Earlier versions are probably affected too.\n\n  Anyone using Bleach <=v3.1.0 is highly encouraged to upgrade.\n\n  https://bugzilla.mozilla.org/show_bug.cgi?id=1615315\n\n**Backwards incompatible changes**\n\nNone\n\n**Features**\n\nNone\n\n**Bug fixes**\n\nNone\n\nBleach changes\n==============\n\nVersion 3.1.0 (January 9th, 2019)\n---------------------------------\n\n**Security fixes**\n\nNone\n\n**Backwards incompatible changes**\n\nNone\n\n**Features**\n\n* Add ``recognized_tags`` argument to the linkify ``Linker`` class. This\n  fixes issues when linkifying on its own and having some tags get escaped.\n  It defaults to a list of HTML5 tags. Thank you, Chad Birch! (#409)\n\n**Bug fixes**\n\n* Add ``six>=1.9`` to requirements. Thank you, Dave Shawley (#416)\n\n* Fix cases where attribute names could have invalid characters in them.\n  (#419)\n\n* Fix problems with ``LinkifyFilter`` not being able to match links\n  across ``&amp;``. (#422)\n\n* Fix ``InputStreamWithMemory`` when the ``BleachHTMLParser`` is\n  parsing ``meta`` tags. (#431)\n\n* Fix doctests. (#357)\n\n\nVersion 3.0.2 (October 11th, 2018)\n----------------------------------\n\n**Security fixes**\n\nNone\n\n**Backwards incompatible changes**\n\nNone\n\n**Features**\n\nNone\n\n**Bug fixes**\n\n* Merge ``Characters`` tokens after sanitizing them. This fixes issues in the\n  ``LinkifyFilter`` where it was only linkifying parts of urls. (#374)\n\n\nVersion 3.0.1 (October 9th, 2018)\n---------------------------------\n\n**Security fixes**\n\nNone\n\n**Backwards incompatible changes**\n\nNone\n\n**Features**\n\n* Support Python 3.7. It supported Python 3.7 just fine, but we added 3.7 to\n  the list of Python environments we test so this is now officially supported.\n  (#377)\n\n**Bug fixes**\n\n* Fix ``list`` object has no attribute ``lower`` in ``clean``. (#398)\n* Fix ``abbr`` getting escaped in ``linkify``. (#400)\n\n\nVersion 3.0.0 (October 3rd, 2018)\n---------------------------------\n\n**Security fixes**\n\nNone\n\n**Backwards incompatible changes**\n\n* A bunch of functions were moved from one module to another.\n\n  These were moved from ``bleach.sanitizer`` to ``bleach.html5lib_shim``:\n\n  * ``convert_entity``\n  * ``convert_entities``\n  * ``match_entity``\n  * ``next_possible_entity``\n  * ``BleachHTMLSerializer``\n  * ``BleachHTMLTokenizer``\n  * ``BleachHTMLParser``\n\n  These functions and classes weren't documented and aren't part of the\n  public API, but people read code and might be using them so we're\n  considering it an incompatible API change.\n\n  If you're using them, you'll need to update your code.\n\n**Features**\n\n* Bleach no longer depends on html5lib. html5lib==1.0.1 is now vendored into\n  Bleach. You can remove it from your requirements file if none of your other\n  requirements require html5lib.\n\n  This means Bleach will now work fine with other libraries that depend on\n  html5lib regardless of what version of html5lib they require. (#386)\n\n**Bug fixes**\n\n* Fixed tags getting added when using clean or linkify. This was a\n  long-standing regression from the Bleach 2.0 rewrite. (#280, #392)\n\n* Fixed ``<isindex>`` getting replaced with a string. Now it gets escaped or\n  stripped depending on whether it's in the allowed tags or not. (#279)\n\n\nVersion 2.1.4 (August 16th, 2018)\n---------------------------------\n\n**Security fixes**\n\nNone\n\n**Backwards incompatible changes**\n\n* Dropped support for Python 3.3. (#328)\n\n**Features**\n\nNone\n\n**Bug fixes**\n\n* Handle ambiguous ampersands in correctly. (#359)\n\n\nVersion 2.1.3 (March 5th, 2018)\n-------------------------------\n\n**Security fixes**\n\n* Attributes that have URI values weren't properly sanitized if the\n  values contained character entities. Using character entities, it\n  was possible to construct a URI value with a scheme that was not\n  allowed that would slide through unsanitized.\n\n  This security issue was introduced in Bleach 2.1. Anyone using\n  Bleach 2.1 is highly encouraged to upgrade.\n\n  https://bugzilla.mozilla.org/show_bug.cgi?id=1442745\n\n**Backwards incompatible changes**\n\nNone\n\n**Features**\n\nNone\n\n**Bug fixes**\n\n* Fixed some other edge cases for attribute URI value sanitizing and\n  improved testing of this code.\n\n\nVersion 2.1.2 (December 7th, 2017)\n----------------------------------\n\n**Security fixes**\n\nNone\n\n**Backwards incompatible changes**\n\nNone\n\n**Features**\n\nNone\n\n**Bug fixes**\n\n* Support html5lib-python 1.0.1. (#337)\n\n* Add deprecation warning for supporting html5lib-python < 1.0.\n\n* Switch to semver.\n\n\nVersion 2.1.1 (October 2nd, 2017)\n---------------------------------\n\n**Security fixes**\n\nNone\n\n**Backwards incompatible changes**\n\nNone\n\n**Features**\n\nNone\n\n**Bug fixes**\n\n* Fix ``setup.py`` opening files when ``LANG=``. (#324)\n\n\nVersion 2.1 (September 28th, 2017)\n----------------------------------\n\n**Security fixes**\n\n* Convert control characters (backspace particularly) to \"?\" preventing\n  malicious copy-and-paste situations. (#298)\n\n  See `<https://github.com/mozilla/bleach/issues/298>`_ for more details.\n\n  This affects all previous versions of Bleach. Check the comments on that\n  issue for ways to alleviate the issue if you can't upgrade to Bleach 2.1.\n\n\n**Backwards incompatible changes**\n\n* Redid versioning. ``bleach.VERSION`` is no longer available. Use the string\n  version at ``bleach.__version__`` and parse it with\n  ``pkg_resources.parse_version``. (#307)\n\n* clean, linkify: linkify and clean should only accept text types; thank you,\n  Janusz! (#292)\n\n* clean, linkify: accept only unicode or utf-8-encoded str (#176)\n\n\n**Features**\n\n\n**Bug fixes**\n\n* ``bleach.clean()`` no longer unescapes entities including ones that are missing\n  a ``;`` at the end which can happen in urls and other places. (#143)\n\n* linkify: fix http links inside of mailto links; thank you, sedrubal! (#300)\n\n* clarify security policy in docs (#303)\n\n* fix dependency specification for html5lib 1.0b8, 1.0b9, and 1.0b10; thank you,\n  Zoltán! (#268)\n\n* add Bleach vs. html5lib comparison to README; thank you, Stu Cox! (#278)\n\n* fix KeyError exceptions on tags without href attr; thank you, Alex Defsen!\n  (#273)\n\n* add test website and scripts to test ``bleach.clean()`` output in browser;\n  thank you, Greg Guthe!\n\n\nVersion 2.0 (March 8th, 2017)\n-----------------------------\n\n**Security fixes**\n\n* None\n\n\n**Backwards incompatible changes**\n\n* Removed support for Python 2.6. #206\n\n* Removed support for Python 3.2. #224\n\n* Bleach no longer supports html5lib < 0.99999999 (8 9s).\n\n  This version is a rewrite to use the new sanitizing API since the old\n  one was dropped in html5lib 0.99999999 (8 9s).\n\n  If you're using 0.9999999 (7 9s) upgrade to 0.99999999 (8 9s) or higher.\n\n  If you're using 1.0b8 (equivalent to 0.9999999 (7 9s)), upgrade to 1.0b9\n  (equivalent to 0.99999999 (8 9s)) or higher.\n\n* ``bleach.clean`` and friends were rewritten\n\n  ``clean`` was reimplemented as an html5lib filter and happens at a different\n  step in the HTML parsing -> traversing -> serializing process. Because of\n  that, there are some differences in clean's output as compared with previous\n  versions.\n\n  Amongst other things, this version will add end tags even if the tag in\n  question is to be escaped.\n\n* ``bleach.clean`` and friends attribute callables now take three arguments:\n  tag, attribute name and attribute value. Previously they only took attribute\n  name and attribute value.\n\n  All attribute callables will need to be updated.\n\n* ``bleach.linkify`` was rewritten\n\n  ``linkify`` was reimplemented as an html5lib Filter. As such, it no longer\n  accepts a ``tokenizer`` argument.\n\n  The callback functions for adjusting link attributes now takes a namespaced\n  attribute.\n\n  Previously you'd do something like this::\n\n      def check_protocol(attrs, is_new):\n          if not attrs.get('href', '').startswith('http:', 'https:')):\n              return None\n          return attrs\n\n  Now it's more like this::\n\n      def check_protocol(attrs, is_new):\n          if not attrs.get((None, u'href'), u'').startswith(('http:', 'https:')):\n              #            ^^^^^^^^^^^^^^^\n              return None\n          return attrs\n\n  Further, you need to make sure you're always using unicode values. If you\n  don't then html5lib will raise an assertion error that the value is not\n  unicode.\n\n  All linkify filters will need to be updated.\n\n* ``bleach.linkify`` and friends had a ``skip_pre`` argument--that's been\n  replaced with a more general ``skip_tags`` argument.\n\n  Before, you might do::\n\n      bleach.linkify(some_text, skip_pre=True)\n\n  The equivalent with Bleach 2.0 is::\n\n      bleach.linkify(some_text, skip_tags=['pre'])\n\n  You can skip other tags, too, like ``style`` or ``script`` or other places\n  where you don't want linkification happening.\n\n  All uses of linkify that use ``skip_pre`` will need to be updated.\n\n\n**Changes**\n\n* Supports Python 3.6.\n\n* Supports html5lib >= 0.99999999 (8 9s).\n\n* There's a ``bleach.sanitizer.Cleaner`` class that you can instantiate with your\n  favorite clean settings for easy reuse.\n\n* There's a ``bleach.linkifier.Linker`` class that you can instantiate with your\n  favorite linkify settings for easy reuse.\n\n* There's a ``bleach.linkifier.LinkifyFilter`` which is an htm5lib filter that\n  you can pass as a filter to ``bleach.sanitizer.Cleaner`` allowing you to clean\n  and linkify in one pass.\n\n* ``bleach.clean`` and friends can now take a callable as an attributes arg value.\n\n* Tons of bug fixes.\n\n* Cleaned up tests.\n\n* Documentation fixes.\n\n\nVersion 1.5 (November 4th, 2016)\n--------------------------------\n\n**Security fixes**\n\n* None\n\n**Backwards incompatible changes**\n\n* clean: The list of ``ALLOWED_PROTOCOLS`` now defaults to http, https and\n  mailto.\n\n  Previously it was a long list of protocols something like ed2k, ftp, http,\n  https, irc, mailto, news, gopher, nntp, telnet, webcal, xmpp, callto, feed,\n  urn, aim, rsync, tag, ssh, sftp, rtsp, afs, data. #149\n\n**Changes**\n\n* clean: Added ``protocols`` to arguments list to let you override the list of\n  allowed protocols. Thank you, Andreas Malecki! #149\n\n* linkify: Fix a bug involving periods at the end of an email address. Thank you,\n  Lorenz Schori! #219\n\n* linkify: Fix linkification of non-ascii ports. Thank you Alexandre, Macabies!\n  #207\n\n* linkify: Fix linkify inappropriately removing node tails when dropping nodes.\n  #132\n\n* Fixed a test that failed periodically. #161\n\n* Switched from nose to py.test. #204\n\n* Add test matrix for all supported Python and html5lib versions. #230\n\n* Limit to html5lib ``>=0.999,!=0.9999,!=0.99999,<0.99999999`` because 0.9999\n  and 0.99999 are busted.\n\n* Add support for ``python setup.py test``. #97\n\n\nVersion 1.4.3 (May 23rd, 2016)\n------------------------------\n\n**Security fixes**\n\n* None\n\n**Changes**\n\n* Limit to html5lib ``>=0.999,<0.99999999`` because of impending change to\n  sanitizer api. #195\n\n\nVersion 1.4.2 (September 11, 2015)\n----------------------------------\n\n**Changes**\n\n* linkify: Fix hang in linkify with ``parse_email=True``. #124\n\n* linkify: Fix crash in linkify when removing a link that is a first-child. #136\n\n* Updated TLDs.\n\n* linkify: Don't remove exterior brackets when linkifying. #146\n\n\nVersion 1.4.1 (December 15, 2014)\n---------------------------------\n\n**Changes**\n\n* Consistent order of attributes in output.\n\n* Python 3.4 support.\n\n\nVersion 1.4 (January 12, 2014)\n------------------------------\n\n**Changes**\n\n* linkify: Update linkify to use etree type Treewalker instead of simpletree.\n\n* Updated html5lib to version ``>=0.999``.\n\n* Update all code to be compatible with Python 3 and 2 using six.\n\n* Switch to Apache License.\n\n\nVersion 1.3\n-----------\n\n* Used by Python 3-only fork.\n\n\nVersion 1.2.2 (May 18, 2013)\n----------------------------\n\n* Pin html5lib to version 0.95 for now due to major API break.\n\n\nVersion 1.2.1 (February 19, 2013)\n---------------------------------\n\n* ``clean()`` no longer considers ``feed:`` an acceptable protocol due to\n  inconsistencies in browser behavior.\n\n\nVersion 1.2 (January 28, 2013)\n------------------------------\n\n* ``linkify()`` has changed considerably. Many keyword arguments have been\n  replaced with a single callbacks list. Please see the documentation for more\n  information.\n\n* Bleach will no longer consider unacceptable protocols when linkifying.\n\n* ``linkify()`` now takes a tokenizer argument that allows it to skip\n  sanitization.\n\n* ``delinkify()`` is gone.\n\n* Removed exception handling from ``_render``. ``clean()`` and ``linkify()`` may\n  now throw.\n\n* ``linkify()`` correctly ignores case for protocols and domain names.\n\n* ``linkify()`` correctly handles markup within an <a> tag.\n\n\nVersion 1.1.5\n-------------\n\n\nVersion 1.1.4\n-------------\n\n\nVersion 1.1.3 (July 10, 2012)\n-----------------------------\n\n* Fix parsing bare URLs when parse_email=True.\n\n\nVersion 1.1.2 (June 1, 2012)\n----------------------------\n\n* Fix hang in style attribute sanitizer. (#61)\n\n* Allow ``/`` in style attribute values.\n\n\nVersion 1.1.1 (February 17, 2012)\n---------------------------------\n\n* Fix tokenizer for html5lib 0.9.5.\n\n\nVersion 1.1.0 (October 24, 2011)\n--------------------------------\n\n* ``linkify()`` now understands port numbers. (#38)\n\n* Documented character encoding behavior. (#41)\n\n* Add an optional target argument to ``linkify()``.\n\n* Add ``delinkify()`` method. (#45)\n\n* Support subdomain whitelist for ``delinkify()``. (#47, #48)\n\n\nVersion 1.0.4 (September 2, 2011)\n---------------------------------\n\n* Switch to SemVer git tags.\n\n* Make ``linkify()`` smarter about trailing punctuation. (#30)\n\n* Pass ``exc_info`` to logger during rendering issues.\n\n* Add wildcard key for attributes. (#19)\n\n* Make ``linkify()`` use the ``HTMLSanitizer`` tokenizer. (#36)\n\n* Fix URLs wrapped in parentheses. (#23)\n\n* Make ``linkify()`` UTF-8 safe. (#33)\n\n\nVersion 1.0.3 (June 14, 2011)\n-----------------------------\n\n* ``linkify()`` works with 3rd level domains. (#24)\n\n* ``clean()`` supports vendor prefixes in style values. (#31, #32)\n\n* Fix ``linkify()`` email escaping.\n\n\nVersion 1.0.2 (June 6, 2011)\n----------------------------\n\n* ``linkify()`` supports email addresses.\n\n* ``clean()`` supports callables in attributes filter.\n\n\nVersion 1.0.1 (April 12, 2011)\n------------------------------\n\n* ``linkify()`` doesn't drop trailing slashes. (#21)\n* ``linkify()`` won't linkify 'libgl.so.1'. (#22)\n\n\n",
          "name": "bleach",
          "license": "Apache Software License",
          "version": "==3.3.0",
          "codeRepository": "https://pypi.org/project/bleach/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python",
          "applicationCategory": [
            "Software Development"
          ],
          "applicationSubCategory": [
            "Libraries"
          ]
        },
        {
          "type": "SoftwarePackage",
          "description": "brotlipy\n========\n\nThis library contains Python bindings for the reference Brotli encoder/decoder,\n`available here`_. This allows Python software to use the Brotli compression\nalgorithm directly from Python code.\n\nTo use it simply, try this:\n\n.. code-block:: python\n\n    import brotli\n    data = brotli.decompress(compressed_data)\n\nMore information can be found `in the documentation`_.\n\n.. _available here: https://github.com/google/brotli\n.. _in the documentation: https://brotlipy.readthedocs.org\n\nLicense\n-------\n\nThe source code of brotlipy is available under the MIT license. Brotli itself\nis made available under the Version 2.0 of the Apache Software License. See the\nLICENSE and libbrotli/LICENSE files for more information.\n\nAuthors\n-------\n\nbrotlipy is maintained by Cory Benfield.\n\n\nChangelog\n=========\n\n0.7.0 (2017-05-30)\n------------------\n\n- Update to v0.6.0 of the Brotli library.\n\n0.6.0 (2016-09-08)\n------------------\n\n- Resolved a bug where ``decompress()`` would return an empty bytestring\n  instead of erroring if the provided bytestring was small enough.\n- Added the ``finish()`` method to the streaming decompressor.\n\n0.5.1 (2016-08-17)\n------------------\n\n- Update to v0.5.2 of the Brotli library.\n- Add new exception type (``Error``).\n- Add compatiblity with C++ brotli library by aliasing ``Error`` to ``error``.\n- Extra error checking of input parameters to the compressor.\n\n0.5.0 (2016-08-16)\n------------------\n\n- Update to v0.5.0 of the Brotli library.\n- Extend one-shot compression API to include all control parameters.\n- Added streaming/incremental compression API.\n- Added flags to control compression mode.\n\n0.4.0 (2016-08-01)\n------------------\n\nUpdate to v0.4.0 of the Brotli library.\n\n0.3.0 (2016-05-11)\n------------------\n\nUpdate to v0.3.0 of the Brotli library.\n\n0.2.0 (2015-10-05)\n------------------\n\nFix broken ``brotli.compress`` support on Windows.\n\n0.1.3 (2015-10-05)\n------------------\n\n- Added basic for ``brotli.compress`` through a C wrapper included in this\n  library.",
          "name": "brotlipy",
          "author": [
            {
              "type": "Person",
              "name": "Cory Benfield",
              "email": [
                "cory@lukasa.co.uk"
              ],
              "familyName": [
                "Benfield"
              ],
              "givenName": [
                "Cory"
              ]
            }
          ],
          "license": "MIT",
          "version": "==0.7.0",
          "codeRepository": "https://pypi.org/project/brotlipy/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python"
        },
        {
          "type": "SoftwarePackage",
          "description": "Certifi: Python SSL Certificates\n================================\n\n`Certifi`_ provides Mozilla's carefully curated collection of Root Certificates for\nvalidating the trustworthiness of SSL certificates while verifying the identity\nof TLS hosts. It has been extracted from the `Requests`_ project.\n\nInstallation\n------------\n\n``certifi`` is available on PyPI. Simply install it with ``pip``::\n\n    $ pip install certifi\n\nUsage\n-----\n\nTo reference the installed certificate authority (CA) bundle, you can use the\nbuilt-in function::\n\n    >>> import certifi\n\n    >>> certifi.where()\n    '/usr/local/lib/python3.7/site-packages/certifi/cacert.pem'\n\nOr from the command line::\n\n    $ python -m certifi\n    /usr/local/lib/python3.7/site-packages/certifi/cacert.pem\n\nEnjoy!\n\n1024-bit Root Certificates\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nBrowsers and certificate authorities have concluded that 1024-bit keys are\nunacceptably weak for certificates, particularly root certificates. For this\nreason, Mozilla has removed any weak (i.e. 1024-bit key) certificate from its\nbundle, replacing it with an equivalent strong (i.e. 2048-bit or greater key)\ncertificate from the same CA. Because Mozilla removed these certificates from\nits bundle, ``certifi`` removed them as well.\n\nIn previous versions, ``certifi`` provided the ``certifi.old_where()`` function\nto intentionally re-add the 1024-bit roots back into your bundle. This was not\nrecommended in production and therefore was removed at the end of 2018.\n\n.. _`Certifi`: https://certifiio.readthedocs.io/en/latest/\n.. _`Requests`: https://requests.readthedocs.io/en/master/\n\nAddition/Removal of Certificates\n--------------------------------\n\nCertifi does not support any addition/removal or other modification of the\nCA trust store content. This project is intended to provide a reliable and\nhighly portable root of trust to python deployments. Look to upstream projects\nfor methods to use alternate trust.\n\n\n",
          "name": "certifi",
          "author": [
            {
              "type": "Person",
              "name": "Kenneth Reitz",
              "email": [
                "me@kennethreitz.com"
              ],
              "familyName": [
                "Reitz"
              ],
              "givenName": [
                "Kenneth"
              ]
            }
          ],
          "license": "MPL-2.0",
          "version": "==2021.5.30",
          "codeRepository": "https://pypi.org/project/certifi/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python"
        },
        {
          "type": "SoftwarePackage",
          "description": "CFFI\n====\n\nForeign Function Interface for Python calling C code.\nPlease see the `Documentation <http://cffi.readthedocs.org/>`_.\n\nContact\n-------\n\n`Mailing list <https://groups.google.com/forum/#!forum/python-cffi>`_\n\n\n",
          "name": "cffi",
          "author": [
            {
              "type": "Person",
              "name": "Armin Rigo,",
              "familyName": [
                "Rigo,"
              ],
              "givenName": [
                "Armin"
              ]
            }
          ],
          "license": "MIT",
          "codeRepository": "https://pypi.org/project/cffi/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python"
        },
        {
          "type": "SoftwarePackage",
          "description": "Chardet: The Universal Character Encoding Detector\n--------------------------------------------------\n\n.. image:: https://img.shields.io/travis/chardet/chardet/stable.svg\n   :alt: Build status\n   :target: https://travis-ci.org/chardet/chardet\n\n.. image:: https://img.shields.io/coveralls/chardet/chardet/stable.svg\n   :target: https://coveralls.io/r/chardet/chardet\n\n.. image:: https://img.shields.io/pypi/v/chardet.svg\n   :target: https://warehouse.python.org/project/chardet/\n   :alt: Latest version on PyPI\n\n.. image:: https://img.shields.io/pypi/l/chardet.svg\n   :alt: License\n\n\nDetects\n - ASCII, UTF-8, UTF-16 (2 variants), UTF-32 (4 variants)\n - Big5, GB2312, EUC-TW, HZ-GB-2312, ISO-2022-CN (Traditional and Simplified Chinese)\n - EUC-JP, SHIFT_JIS, CP932, ISO-2022-JP (Japanese)\n - EUC-KR, ISO-2022-KR (Korean)\n - KOI8-R, MacCyrillic, IBM855, IBM866, ISO-8859-5, windows-1251 (Cyrillic)\n - ISO-8859-5, windows-1251 (Bulgarian)\n - ISO-8859-1, windows-1252 (Western European languages)\n - ISO-8859-7, windows-1253 (Greek)\n - ISO-8859-8, windows-1255 (Visual and Logical Hebrew)\n - TIS-620 (Thai)\n\n.. note::\n   Our ISO-8859-2 and windows-1250 (Hungarian) probers have been temporarily\n   disabled until we can retrain the models.\n\nRequires Python 2.7 or 3.5+.\n\nInstallation\n------------\n\nInstall from `PyPI <https://pypi.org/project/chardet/>`_::\n\n    pip install chardet\n\nDocumentation\n-------------\n\nFor users, docs are now available at https://chardet.readthedocs.io/.\n\nCommand-line Tool\n-----------------\n\nchardet comes with a command-line script which reports on the encodings of one\nor more files::\n\n    % chardetect somefile someotherfile\n    somefile: windows-1252 with confidence 0.5\n    someotherfile: ascii with confidence 1.0\n\nAbout\n-----\n\nThis is a continuation of Mark Pilgrim's excellent chardet. Previously, two\nversions needed to be maintained: one that supported python 2.x and one that\nsupported python 3.x.  We've recently merged with `Ian Cordasco <https://github.com/sigmavirus24>`_'s\n`charade <https://github.com/sigmavirus24/charade>`_ fork, so now we have one\ncoherent version that works for Python 2.7+ and 3.4+.\n\n:maintainer: Dan Blanchard\n\n\n",
          "name": "chardet",
          "author": [
            {
              "type": "Person",
              "name": "Mark Pilgrim",
              "email": [
                "mark@diveintomark.org"
              ],
              "familyName": [
                "Pilgrim"
              ],
              "givenName": [
                "Mark"
              ]
            }
          ],
          "keywords": "encoding,i18n,xml",
          "license": "LGPL",
          "codeRepository": "https://pypi.org/project/chardet/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python",
          "applicationCategory": [
            "Software Development",
            "Text Processing"
          ],
          "applicationSubCategory": [
            "Libraries",
            "Linguistic"
          ]
        },
        {
          "type": "SoftwarePackage",
          "description": "================================================================\nCOBRApy - Constraint-Based Reconstruction and Analysis in Python\n================================================================\n\n.. image:: https://img.shields.io/pypi/v/cobra.svg\n   :target: https://pypi.org/project/cobra/\n   :alt: Current PyPI Version\n\n.. image:: https://img.shields.io/pypi/pyversions/cobra.svg\n   :target: https://pypi.org/project/cobra/\n   :alt: Supported Python Versions\n\n.. image:: https://img.shields.io/pypi/l/cobra.svg\n   :target: https://www.gnu.org/licenses/old-licenses/lgpl-2.0.html\n   :alt: GNU Lesser General Public License 2 or later\n\n.. image:: https://img.shields.io/badge/Contributor%20Covenant-v2.0%20adopted-ff69b4.svg\n   :target: https://github.com/opencobra/cobrapy/blob/devel/.github/CODE_OF_CONDUCT.md\n   :alt: Code of Conduct\n\n.. image:: https://github.com/opencobra/cobrapy/workflows/CI-CD/badge.svg\n   :target: https://github.com/opencobra/cobrapy/workflows/CI-CD\n   :alt: GitHub Actions CI/CD Status\n\n.. image:: https://codecov.io/gh/opencobra/cobrapy/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/opencobra/cobrapy\n   :alt: Codecov\n\n.. image:: https://readthedocs.org/projects/cobrapy/badge/?version=latest\n   :target: https://cobrapy.readthedocs.io/en/latest/?badge=latest\n   :alt: Documentation Status\n\n.. image:: https://badges.gitter.im/opencobra/cobrapy.svg\n   :target: https://gitter.im/opencobra/cobrapy\n   :alt: Gitter Chat Room\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n   :target: https://github.com/ambv/black\n   :alt: Black\n\n.. image:: https://zenodo.org/badge/6510063.svg\n   :target: https://zenodo.org/badge/latestdoi/6510063\n   :alt: Zenodo DOI\n\nWhat is COBRApy?\n================\n\nCOBRA methods are widely used for genome-scale modeling of metabolic networks in\nboth prokaryotes and eukaryotes. **COBRApy** is a constraint-based modeling\npackage that is designed to accommodate the biological complexity of the next\ngeneration of COBRA models and provides access to commonly used COBRA methods,\nsuch as flux balance analysis, flux variability analysis, and gene deletion\nanalyses.\n\nOur aim with COBRApy is to provide useful, efficient infrastructure for:\n\n- creating and managing metabolic models\n- accessing popular solvers\n- analyzing models with methods such as FVA, FBA, pFBA, MOMA etc.\n- inspecting models and drawing conclusions on gene essentiality, testing\n  consequences of knock-outs etc.\n\nOur goal with COBRApy is for it to be useful on its own, and for it to be the\nnatural choice of infrastructure for developers that want to build new COBRA\nrelated python packages for e.g. visualization, strain-design and data driven\nanalysis. By re-using the same classes and design principles, we can make new\nmethods both easier to implement and easier to use, thereby bringing the power\nof COBRA to more researchers.\n\nThe documentation is browseable online at `readthedocs\n<https://cobrapy.readthedocs.org/en/stable/>`_ and can also be `downloaded\n<https://readthedocs.org/projects/cobrapy/downloads/>`_.\n\nPlease use the `Google Group <http://groups.google.com/group/cobra-pie>`_ for\nhelp. By writing a well formulated question, with sufficient detail, you are\nmuch more likely to quickly receive a good answer! Please refer to these\n`StackOverflow guidelines <https://stackoverflow.com/help/how-to-ask>`_ on how\nto ask questions.  Alternatively, you can use `gitter.im\n<https://gitter.im/opencobra/cobrapy>`_ for quick questions and discussions\nabout COBRApy (faster response times). Please keep in mind that answers are\nprovided on a volunteer basis.\n\nMore information about opencobra is available at the `website\n<http://opencobra.github.io/>`_.\n\nIf you use COBRApy in a scientific publication, please cite\n`doi:10.1186/1752-0509-7-74 <http://dx.doi.org/doi:10.1186/1752-0509-7-74>`_\n\nInstallation\n============\n\nUse pip to `install COBRApy from PyPI <https://pypi.org/project/cobra/>`_ (we\nrecommend doing this inside a `virtual environment\n<http://docs.python-guide.org/en/latest/dev/virtualenvs/>`_)::\n\n    pip install cobra\n\nIf you want to load MATLAB models, you will need additional dependencies. Please\ninstall::\n\n    pip install cobra[array]\n\nFor further information, please follow the `detailed installation instructions\n<INSTALL.rst>`_.\n\nContributing\n============\n\nContributions are always welcome! Please read the `contributing guidelines\n<https://github.com/opencobra/cobrapy/blob/devel/.github/CONTRIBUTING.rst>`_ to\nget started.\n\nLicense\n=======\n\nThe COBRApy source is released under both the GPL and LGPL licenses version 2 or\nlater. You may choose which license you choose to use the software under.\n\nThis program is free software: you can redistribute it and/or modify it under\nthe terms of the GNU General Public License or the GNU Lesser General Public\nLicense as published by the Free Software Foundation, either version 2 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful, but WITHOUT ANY\nWARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\nPARTICULAR PURPOSE. See the GNU General Public License for more details.\n\n=======================\nInstallation of COBRApy\n=======================\n\nFor installation help, please use the `Google Group\n<http://groups.google.com/group/cobra-pie>`_. For usage instructions, please see\nthe `documentation <https://cobrapy.readthedocs.org/en/latest/>`_.\n\nWe only test against Python 3.6+, however, Python 3.4 or higher and even 2.7\nshould work mostly. For Windows users and possibly also Mac OS users, we\nrecommend using the `Anaconda Python <https://www.anaconda.com/>`_ distribution.\n\nStable version installation\n===========================\n\nCOBRApy can be installed with any recent installation of pip.  Instructions for\nseveral operating systems are below:\n\nMac OS X or Linux\n-----------------\n\n1. We highly recommend that you create a `Python virtual environment\n   <https://realpython.com/python-virtual-environments-a-primer>`_.\n2. Install COBRApy when an environment is active by running ``pip install\n   cobra`` in the terminal.\n\nMicrosoft Windows\n-----------------\n\nIf you heed our recommendation to use Anaconda, you can open an Anaconda shell\nand install COBRApy from the ``bioconda`` channel. Soon it should also be\navailable from the ``conda-forge`` channel.\n\n.. code-block:: console\n\n    conda install -c bioconda cobra\n\nInstallation for development\n============================\n\nGet the `detailed contribution instructions <.github/CONTRIBUTING.rst>`_ for\ncontributing to COBRApy.\n\nSolvers\n=======\n\nCOBRApy uses `optlang <http://optlang.readthedocs.io>`_ to interface the\nmathematical solvers used to optimize the created COBRA models.  At the time of\nwriting the supported solvers are:\n\n- ILOG/CPLEX (available with `Academic\n  <https://www.ibm.com/developerworks/university/academicinitiative/>`_ and\n  `Commercial\n  <http://www.ibm.com/software/integration/optimization/cplex-optimizer/>`_\n  licenses)\n- `Gurobi <http://gurobi.com>`_\n- `GLPK <http://www.gnu.org/software/glpk/>`_ which is automatically installed\n  as swiglpk\n\n\n",
          "name": "cobra",
          "author": [
            {
              "type": "Person",
              "name": "The cobrapy",
              "familyName": [
                "cobrapy"
              ],
              "givenName": [
                "The"
              ]
            }
          ],
          "keywords": "metabolism,biology,constraint-based,linear programming,mixed-integer,optimization,flux-balance analysis,reconstruction",
          "license": "LGPL-2.0-or-later OR GPL-2.0-or-later",
          "version": "==0.21.0",
          "codeRepository": "https://pypi.org/project/cobra/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python",
          "applicationCategory": [
            "Scientific/Engineering"
          ],
          "applicationSubCategory": [
            "Bio-Informatics"
          ]
        },
        {
          "type": "SoftwarePackage",
          "description": ".. image:: https://img.shields.io/pypi/v/colorama.svg\n    :target: https://pypi.org/project/colorama/\n    :alt: Latest Version\n\n.. image:: https://img.shields.io/pypi/pyversions/colorama.svg\n    :target: https://pypi.org/project/colorama/\n    :alt: Supported Python versions\n\n.. image:: https://travis-ci.org/tartley/colorama.svg?branch=master\n    :target: https://travis-ci.org/tartley/colorama\n    :alt: Build Status\n\nColorama\n========\n\nMakes ANSI escape character sequences (for producing colored terminal text and\ncursor positioning) work under MS Windows.\n\n.. |donate| image:: https://www.paypalobjects.com/en_US/i/btn/btn_donate_SM.gif\n  :target: https://www.paypal.com/cgi-bin/webscr?cmd=_donations&business=2MZ9D2GMLYCUJ&item_name=Colorama&currency_code=USD\n  :alt: Donate with Paypal\n\n`PyPI for releases <https://pypi.org/project/colorama/>`_ Â·\n`Github for source <https://github.com/tartley/colorama>`_ Â·\n`Colorama for enterprise on Tidelift <https://github.com/tartley/colorama/blob/master/ENTERPRISE.md>`_\n\nIf you find Colorama useful, please |donate| to the authors. Thank you!\n\n\nInstallation\n------------\n\n.. code-block:: bash\n\n    pip install colorama\n    # or\n    conda install -c anaconda colorama\n\n\nDescription\n-----------\n\nANSI escape character sequences have long been used to produce colored terminal\ntext and cursor positioning on Unix and Macs. Colorama makes this work on\nWindows, too, by wrapping ``stdout``, stripping ANSI sequences it finds (which\nwould appear as gobbledygook in the output), and converting them into the\nappropriate win32 calls to modify the state of the terminal. On other platforms,\nColorama does nothing.\n\nThis has the upshot of providing a simple cross-platform API for printing\ncolored terminal text from Python, and has the happy side-effect that existing\napplications or libraries which use ANSI sequences to produce colored output on\nLinux or Macs can now also work on Windows, simply by calling\n``colorama.init()``.\n\nAn alternative approach is to install ``ansi.sys`` on Windows machines, which\nprovides the same behaviour for all applications running in terminals. Colorama\nis intended for situations where that isn't easy (e.g., maybe your app doesn't\nhave an installer.)\n\nDemo scripts in the source code repository print some colored text using\nANSI sequences. Compare their output under Gnome-terminal's built in ANSI\nhandling, versus on Windows Command-Prompt using Colorama:\n\n.. image:: https://github.com/tartley/colorama/raw/master/screenshots/ubuntu-demo.png\n    :width: 661\n    :height: 357\n    :alt: ANSI sequences on Ubuntu under gnome-terminal.\n\n.. image:: https://github.com/tartley/colorama/raw/master/screenshots/windows-demo.png\n    :width: 668\n    :height: 325\n    :alt: Same ANSI sequences on Windows, using Colorama.\n\nThese screenshots show that, on Windows, Colorama does not support ANSI 'dim\ntext'; it looks the same as 'normal text'.\n\nUsage\n-----\n\nInitialisation\n..............\n\nApplications should initialise Colorama using:\n\n.. code-block:: python\n\n    from colorama import init\n    init()\n\nOn Windows, calling ``init()`` will filter ANSI escape sequences out of any\ntext sent to ``stdout`` or ``stderr``, and replace them with equivalent Win32\ncalls.\n\nOn other platforms, calling ``init()`` has no effect (unless you request other\noptional functionality; see \"Init Keyword Args\", below). By design, this permits\napplications to call ``init()`` unconditionally on all platforms, after which\nANSI output should just work.\n\nTo stop using Colorama before your program exits, simply call ``deinit()``.\nThis will restore ``stdout`` and ``stderr`` to their original values, so that\nColorama is disabled. To resume using Colorama again, call ``reinit()``; it is\ncheaper than calling ``init()`` again (but does the same thing).\n\n\nColored Output\n..............\n\nCross-platform printing of colored text can then be done using Colorama's\nconstant shorthand for ANSI escape sequences:\n\n.. code-block:: python\n\n    from colorama import Fore, Back, Style\n    print(Fore.RED + 'some red text')\n    print(Back.GREEN + 'and with a green background')\n    print(Style.DIM + 'and in dim text')\n    print(Style.RESET_ALL)\n    print('back to normal now')\n\n...or simply by manually printing ANSI sequences from your own code:\n\n.. code-block:: python\n\n    print('\\033[31m' + 'some red text')\n    print('\\033[39m') # and reset to default color\n\n...or, Colorama can be used in conjunction with existing ANSI libraries\nsuch as the venerable `Termcolor <https://pypi.org/project/termcolor/>`_\nor the fabulous `Blessings <https://pypi.org/project/blessings/>`_.\nThis is highly recommended for anything more than trivial coloring:\n\n.. code-block:: python\n\n    from colorama import init\n    from termcolor import colored\n\n    # use Colorama to make Termcolor work on Windows too\n    init()\n\n    # then use Termcolor for all colored text output\n    print(colored('Hello, World!', 'green', 'on_red'))\n\nAvailable formatting constants are::\n\n    Fore: BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE, RESET.\n    Back: BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE, RESET.\n    Style: DIM, NORMAL, BRIGHT, RESET_ALL\n\n``Style.RESET_ALL`` resets foreground, background, and brightness. Colorama will\nperform this reset automatically on program exit.\n\n\nCursor Positioning\n..................\n\nANSI codes to reposition the cursor are supported. See ``demos/demo06.py`` for\nan example of how to generate them.\n\n\nInit Keyword Args\n.................\n\n``init()`` accepts some ``**kwargs`` to override default behaviour.\n\ninit(autoreset=False):\n    If you find yourself repeatedly sending reset sequences to turn off color\n    changes at the end of every print, then ``init(autoreset=True)`` will\n    automate that:\n\n    .. code-block:: python\n\n        from colorama import init\n        init(autoreset=True)\n        print(Fore.RED + 'some red text')\n        print('automatically back to default color again')\n\ninit(strip=None):\n    Pass ``True`` or ``False`` to override whether ANSI codes should be\n    stripped from the output. The default behaviour is to strip if on Windows\n    or if output is redirected (not a tty).\n\ninit(convert=None):\n    Pass ``True`` or ``False`` to override whether to convert ANSI codes in the\n    output into win32 calls. The default behaviour is to convert if on Windows\n    and output is to a tty (terminal).\n\ninit(wrap=True):\n    On Windows, Colorama works by replacing ``sys.stdout`` and ``sys.stderr``\n    with proxy objects, which override the ``.write()`` method to do their work.\n    If this wrapping causes you problems, then this can be disabled by passing\n    ``init(wrap=False)``. The default behaviour is to wrap if ``autoreset`` or\n    ``strip`` or ``convert`` are True.\n\n    When wrapping is disabled, colored printing on non-Windows platforms will\n    continue to work as normal. To do cross-platform colored output, you can\n    use Colorama's ``AnsiToWin32`` proxy directly:\n\n    .. code-block:: python\n\n        import sys\n        from colorama import init, AnsiToWin32\n        init(wrap=False)\n        stream = AnsiToWin32(sys.stderr).stream\n\n        # Python 2\n        print >>stream, Fore.BLUE + 'blue text on stderr'\n\n        # Python 3\n        print(Fore.BLUE + 'blue text on stderr', file=stream)\n\n\nRecognised ANSI Sequences\n.........................\n\nANSI sequences generally take the form::\n\n    ESC [ <param> ; <param> ... <command>\n\nWhere ``<param>`` is an integer, and ``<command>`` is a single letter. Zero or\nmore params are passed to a ``<command>``. If no params are passed, it is\ngenerally synonymous with passing a single zero. No spaces exist in the\nsequence; they have been inserted here simply to read more easily.\n\nThe only ANSI sequences that Colorama converts into win32 calls are::\n\n    ESC [ 0 m       # reset all (colors and brightness)\n    ESC [ 1 m       # bright\n    ESC [ 2 m       # dim (looks same as normal brightness)\n    ESC [ 22 m      # normal brightness\n\n    # FOREGROUND:\n    ESC [ 30 m      # black\n    ESC [ 31 m      # red\n    ESC [ 32 m      # green\n    ESC [ 33 m      # yellow\n    ESC [ 34 m      # blue\n    ESC [ 35 m      # magenta\n    ESC [ 36 m      # cyan\n    ESC [ 37 m      # white\n    ESC [ 39 m      # reset\n\n    # BACKGROUND\n    ESC [ 40 m      # black\n    ESC [ 41 m      # red\n    ESC [ 42 m      # green\n    ESC [ 43 m      # yellow\n    ESC [ 44 m      # blue\n    ESC [ 45 m      # magenta\n    ESC [ 46 m      # cyan\n    ESC [ 47 m      # white\n    ESC [ 49 m      # reset\n\n    # cursor positioning\n    ESC [ y;x H     # position cursor at x across, y down\n    ESC [ y;x f     # position cursor at x across, y down\n    ESC [ n A       # move cursor n lines up\n    ESC [ n B       # move cursor n lines down\n    ESC [ n C       # move cursor n characters forward\n    ESC [ n D       # move cursor n characters backward\n\n    # clear the screen\n    ESC [ mode J    # clear the screen\n\n    # clear the line\n    ESC [ mode K    # clear the line\n\nMultiple numeric params to the ``'m'`` command can be combined into a single\nsequence::\n\n    ESC [ 36 ; 45 ; 1 m     # bright cyan text on magenta background\n\nAll other ANSI sequences of the form ``ESC [ <param> ; <param> ... <command>``\nare silently stripped from the output on Windows.\n\nAny other form of ANSI sequence, such as single-character codes or alternative\ninitial characters, are not recognised or stripped. It would be cool to add\nthem though. Let me know if it would be useful for you, via the Issues on\nGitHub.\n\n\nStatus & Known Problems\n-----------------------\n\nI've personally only tested it on Windows XP (CMD, Console2), Ubuntu\n(gnome-terminal, xterm), and OS X.\n\nSome presumably valid ANSI sequences aren't recognised (see details below),\nbut to my knowledge nobody has yet complained about this. Puzzling.\n\nSee outstanding issues and wish-list:\nhttps://github.com/tartley/colorama/issues\n\nIf anything doesn't work for you, or doesn't do what you expected or hoped for,\nI'd love to hear about it on that issues list, would be delighted by patches,\nand would be happy to grant commit access to anyone who submits a working patch\nor two.\n\n\nLicense\n-------\n\nCopyright Jonathan Hartley & Arnon Yaari, 2013-2020. BSD 3-Clause license; see\nLICENSE file.\n\n\nDevelopment\n-----------\n\nHelp and fixes welcome!\n\nTested on CPython 2.7, 3.5, 3.6, 3.7 and 3.8.\n\nNo requirements other than the standard library.\nDevelopment requirements are captured in requirements-dev.txt.\n\nTo create and populate a virtual environment::\n\n    ./bootstrap.ps1 # Windows\n    make bootstrap # Linux\n\nTo run tests::\n\n   ./test.ps1 # Windows\n   make test # Linux\n\nIf you use nose to run the tests, you must pass the ``-s`` flag; otherwise,\n``nosetests`` applies its own proxy to ``stdout``, which confuses the unit\ntests.\n\n\nProfessional support\n--------------------\n\n.. |tideliftlogo| image:: https://cdn2.hubspot.net/hubfs/4008838/website/logos/logos_for_download/Tidelift_primary-shorthand-logo.png\n   :alt: Tidelift\n   :target: https://tidelift.com/subscription/pkg/pypi-colorama?utm_source=pypi-colorama&utm_medium=referral&utm_campaign=readme\n\n.. list-table::\n   :widths: 10 100\n\n   * - |tideliftlogo|\n     - Professional support for colorama is available as part of the\n       `Tidelift Subscription`_.\n       Tidelift gives software development teams a single source for purchasing\n       and maintaining their software, with professional grade assurances from\n       the experts who know it best, while seamlessly integrating with existing\n       tools.\n\n.. _Tidelift Subscription: https://tidelift.com/subscription/pkg/pypi-colorama?utm_source=pypi-colorama&utm_medium=referral&utm_campaign=readme\n\n\nThanks\n------\n\n* Marc Schlaich (schlamar) for a ``setup.py`` fix for Python2.5.\n* Marc Abramowitz, reported & fixed a crash on exit with closed ``stdout``,\n  providing a solution to issue #7's setuptools/distutils debate,\n  and other fixes.\n* User 'eryksun', for guidance on correctly instantiating ``ctypes.windll``.\n* Matthew McCormick for politely pointing out a longstanding crash on non-Win.\n* Ben Hoyt, for a magnificent fix under 64-bit Windows.\n* Jesse at Empty Square for submitting a fix for examples in the README.\n* User 'jamessp', an observant documentation fix for cursor positioning.\n* User 'vaal1239', Dave Mckee & Lackner Kristof for a tiny but much-needed Win7\n  fix.\n* Julien Stuyck, for wisely suggesting Python3 compatible updates to README.\n* Daniel Griffith for multiple fabulous patches.\n* Oscar Lesta for a valuable fix to stop ANSI chars being sent to non-tty\n  output.\n* Roger Binns, for many suggestions, valuable feedback, & bug reports.\n* Tim Golden for thought and much appreciated feedback on the initial idea.\n* User 'Zearin' for updates to the README file.\n* John Szakmeister for adding support for light colors\n* Charles Merriam for adding documentation to demos\n* Jurko for a fix on 64-bit Windows CPython2.5 w/o ctypes\n* Florian Bruhin for a fix when stdout or stderr are None\n* Thomas Weininger for fixing ValueError on Windows\n* Remi Rampin for better Github integration and fixes to the README file\n* Simeon Visser for closing a file handle using 'with' and updating classifiers\n  to include Python 3.3 and 3.4\n* Andy Neff for fixing RESET of LIGHT_EX colors.\n* Jonathan Hartley for the initial idea and implementation.\n\n\n\n",
          "name": "colorama",
          "author": [
            {
              "type": "Person",
              "name": "Jonathan Hartley",
              "email": [
                "tartley@tartley.com"
              ],
              "familyName": [
                "Hartley"
              ],
              "givenName": [
                "Jonathan"
              ]
            }
          ],
          "keywords": "color colour terminal text ansi windows crossplatform xplatform",
          "license": "BSD",
          "version": "==0.4.4",
          "codeRepository": "https://pypi.org/project/colorama/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python",
          "applicationCategory": [
            "Terminals"
          ]
        },
        {
          "type": "SoftwarePackage",
          "name": "colorlover",
          "author": [
            {
              "type": "Person",
              "name": "Jack Parmer",
              "email": [
                "jack@plot.ly"
              ],
              "familyName": [
                "Parmer"
              ],
              "givenName": [
                "Jack"
              ]
            }
          ],
          "keywords": "ipython notebook,color scales",
          "version": "==0.3.0",
          "codeRepository": "https://pypi.org/project/colorlover/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python"
        },
        {
          "type": "SoftwarePackage",
          "description": "commonmark.py\n=============\n\ncommonmark.py is a pure Python port of `jgm <https://github.com/jgm>`__'s\n`commonmark.js <https://github.com/jgm/commonmark.js>`__, a\nMarkdown parser and renderer for the\n`CommonMark <http://commonmark.org>`__ specification, using only native\nmodules. Once both this project and the CommonMark specification are\nstable we will release the first ``1.0`` version and attempt to keep up\nto date with changes in ``commonmark.js``.\n\ncommonmark.py is tested against the CommonMark spec with Python versions\n2.7, 3.4, 3.5, 3.6, and 3.7.\n\n**Current version:** 0.9.1\n\n|Pypi Link| |Build Status| |Doc Link|\n\nInstallation\n------------\n\n::\n\n    $ pip install commonmark\n\nUsage\n-----\n\n::\n\n    >>> import commonmark\n    >>> commonmark.commonmark('*hello!*')\n    '<p><em>hello!</em></p>\\n'\n\nOr, without the syntactic sugar:\n\n.. code:: python\n\n    import commonmark\n    parser = commonmark.Parser()\n    ast = parser.parse(\"Hello *World*\")\n\n    renderer = commonmark.HtmlRenderer()\n    html = renderer.render(ast)\n    print(html) # <p>Hello <em>World</em><p/>\n\n    # inspecting the abstract syntax tree\n    json = commonmark.dumpJSON(ast)\n    commonmark.dumpAST(ast) # pretty print generated AST structure\n\nThere is also a CLI:\n\n::\n\n    $ cmark README.md -o README.html\n    $ cmark README.md -o README.json -aj # output AST as JSON\n    $ cmark README.md -a # pretty print generated AST structure\n    $ cmark -h\n    usage: cmark [-h] [-o [O]] [-a] [-aj] [infile]\n\n    Process Markdown according to the CommonMark specification.\n\n    positional arguments:\n      infile      Input Markdown file to parse, defaults to stdin\n\n    optional arguments:\n      -h, --help  show this help message and exit\n      -o [O]      Output HTML/JSON file, defaults to stdout\n      -a          Print formatted AST\n      -aj         Output JSON AST\n\n\nContributing\n------------\n\nIf you would like to offer suggestions/optimizations/bugfixes through\npull requests please do! Also if you find an error in the\nparser/renderer that isn't caught by the current test suite please open\na new issue and I would also suggest you send the\n`commonmark.js <https://github.com/jgm/commonmark.js>`__ project\na pull request adding your test to the existing test suite.\n\nTests\n-----\n\nTo work on commonmark.py, you will need to be able to run the test suite to\nmake sure your changes don't break anything. To run the tests, you can do\nsomething like this:\n\n::\n\n   $ pyvenv venv\n   $ ./venv/bin/python setup.py develop test\n\nThe tests script, ``commonmark/tests/run_spec_tests.py``, is pretty much a devtool. As\nwell as running all the tests embedded in ``spec.txt`` it also allows you\nto run specific tests using the ``-t`` argument, provide information\nabout passed tests with ``-p``, percentage passed by category of test\nwith ``-s``, and enter markdown interactively with ``-i`` (In\ninteractive mode end a block by inputting a line with just ``end``, to\nquit do the same but with ``quit``). ``-d`` can be used to print call\ntracing.\n\n::\n\n    $ ./venv/bin/python commonmark/tests/run_spec_tests.py -h\n    usage: run_spec_tests.py [-h] [-t T] [-p] [-f] [-i] [-d] [-np] [-s]\n\n    script to run the CommonMark specification tests against the commonmark.py\n    parser.\n\n    optional arguments:\n      -h, --help  show this help message and exit\n      -t T        Single test to run or comma separated list of tests (-t 10 or -t 10,11,12,13)\n      -p          Print passed test information\n      -f          Print failed tests (during -np...)\n      -i          Interactive Markdown input mode\n      -d          Debug, trace calls\n      -np         Only print section header, tick, or cross\n      -s          Print percent of tests passed by category\n\nAuthors\n-------\n\n-  `Bibek Kafle <https://github.com/kafle>`__\n-  `Roland Shoemaker <https://github.com/rolandshoemaker>`__\n-  `Nikolas Nyby <https://github.com/nikolas>`__\n\n.. |Pypi Link| image:: https://img.shields.io/pypi/v/commonmark.svg\n   :target: https://pypi.org/project/commonmark/\n\n.. |Build Status| image:: https://travis-ci.org/rtfd/commonmark.py.svg?branch=master\n   :target: https://travis-ci.org/rtfd/commonmark.py\n\n.. |Doc Link| image:: https://readthedocs.org/projects/commonmarkpy/badge/?version=latest\n   :target: https://commonmarkpy.readthedocs.io/en/latest/?badge=latest\n   :alt: Documentation Status\n\n\n",
          "name": "commonmark",
          "author": [
            {
              "type": "Person",
              "name": "Bibek Kafle",
              "email": [
                "bkafle662@gmail.com"
              ],
              "familyName": [
                "Kafle"
              ],
              "givenName": [
                "Bibek"
              ]
            }
          ],
          "keywords": "markup,markdown,commonmark",
          "license": "BSD-3-Clause",
          "version": "==0.9.1",
          "codeRepository": "https://pypi.org/project/commonmark/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python",
          "applicationCategory": [
            "Documentation",
            "Internet",
            "Software Development",
            "Text Processing",
            "Utilities"
          ],
          "applicationSubCategory": [
            "WWW/HTTP",
            "Documentation",
            "Libraries",
            "Markup"
          ]
        },
        {
          "type": "SoftwarePackage",
          "description": "pyca/cryptography\n=================\n\n.. image:: https://img.shields.io/pypi/v/cryptography.svg\n    :target: https://pypi.org/project/cryptography/\n    :alt: Latest Version\n\n.. image:: https://readthedocs.org/projects/cryptography/badge/?version=latest\n    :target: https://cryptography.io\n    :alt: Latest Docs\n\n.. image:: https://github.com/pyca/cryptography/workflows/CI/badge.svg?branch=master\n    :target: https://github.com/pyca/cryptography/actions?query=workflow%3ACI+branch%3Amaster\n\n.. image:: https://codecov.io/github/pyca/cryptography/coverage.svg?branch=master\n    :target: https://codecov.io/github/pyca/cryptography?branch=master\n\n\n``cryptography`` is a package which provides cryptographic recipes and\nprimitives to Python developers.  Our goal is for it to be your \"cryptographic\nstandard library\". It supports Python 3.6+ and PyPy3 7.2+.\n\n``cryptography`` includes both high level recipes and low level interfaces to\ncommon cryptographic algorithms such as symmetric ciphers, message digests, and\nkey derivation functions. For example, to encrypt something with\n``cryptography``'s high level symmetric encryption recipe:\n\n.. code-block:: pycon\n\n    >>> from cryptography.fernet import Fernet\n    >>> # Put this somewhere safe!\n    >>> key = Fernet.generate_key()\n    >>> f = Fernet(key)\n    >>> token = f.encrypt(b\"A really secret message. Not for prying eyes.\")\n    >>> token\n    '...'\n    >>> f.decrypt(token)\n    'A really secret message. Not for prying eyes.'\n\nYou can find more information in the `documentation`_.\n\nYou can install ``cryptography`` with:\n\n.. code-block:: console\n\n    $ pip install cryptography\n\nFor full details see `the installation documentation`_.\n\nDiscussion\n~~~~~~~~~~\n\nIf you run into bugs, you can file them in our `issue tracker`_.\n\nWe maintain a `cryptography-dev`_ mailing list for development discussion.\n\nYou can also join ``#cryptography-dev`` on Freenode to ask questions or get\ninvolved.\n\nSecurity\n~~~~~~~~\n\nNeed to report a security issue? Please consult our `security reporting`_\ndocumentation.\n\n\n.. _`documentation`: https://cryptography.io/\n.. _`the installation documentation`: https://cryptography.io/en/latest/installation.html\n.. _`issue tracker`: https://github.com/pyca/cryptography/issues\n.. _`cryptography-dev`: https://mail.python.org/mailman/listinfo/cryptography-dev\n.. _`security reporting`: https://cryptography.io/en/latest/security.html",
          "name": "cryptography",
          "author": [
            {
              "type": "Person",
              "name": "The Python",
              "familyName": [
                "Python"
              ],
              "givenName": [
                "The"
              ]
            }
          ],
          "license": "BSD or Apache License, Version 2.0",
          "codeRepository": "https://pypi.org/project/cryptography/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python",
          "applicationCategory": [
            "Security"
          ],
          "applicationSubCategory": [
            "Cryptography"
          ],
          "operatingSystem": [
            {
              "type": "OperatingSystem",
              "name": "macOS"
            },
            {
              "type": "OperatingSystem",
              "name": "Windows"
            },
            {
              "type": "OperatingSystem",
              "name": "Linux"
            }
          ]
        },
        {
          "type": "SoftwarePackage",
          "description": "cycler: composable cycles\n=========================\n\nDocs: http://matplotlib.org/cycler/\n",
          "name": "cycler",
          "author": [
            {
              "type": "Person",
              "name": "Thomas A",
              "familyName": [
                "A"
              ],
              "givenName": [
                "Thomas"
              ]
            }
          ],
          "keywords": "cycle kwargs",
          "license": "BSD",
          "version": "==0.10.0",
          "codeRepository": "https://pypi.org/project/Cycler/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python"
        },
        {
          "type": "SoftwarePackage",
          "description": "Decorators for Humans\n=====================\n\nThe goal of the decorator module is to make it easy to define\nsignature-preserving function decorators and decorator factories.\nIt also includes an implementation of multiple dispatch and other niceties\n(please check the docs). It is released under a two-clauses\nBSD license, i.e. basically you can do whatever you want with it but I am not\nresponsible.\n\nInstallation\n-------------\n\nIf you are lazy, just perform\n\n ``$ pip install decorator``\n\nwhich will install just the module on your system.\n\nIf you prefer to install the full distribution from source, including\nthe documentation, clone the `GitHub repo`_ or download the tarball_, unpack it and run\n\n ``$ pip install .``\n\nin the main directory, possibly as superuser.\n\n.. _tarball: https://pypi.org/project/decorator/#files\n.. _GitHub repo: https://github.com/micheles/decorator\n\nTesting\n--------\n\nIf you have the source code installation you can run the tests with\n\n `$ python src/tests/test.py -v`\n\nor (if you have setuptools installed)\n\n `$ python setup.py test`\n\nNotice that you may run into trouble if in your system there\nis an older version of the decorator module; in such a case remove the\nold version. It is safe even to copy the module `decorator.py` over\nan existing one, since we kept backward-compatibility for a long time.\n\nRepository\n---------------\n\nThe project is hosted on GitHub. You can look at the source here:\n\n https://github.com/micheles/decorator\n\nDocumentation\n---------------\n\nThe documentation has been moved to https://github.com/micheles/decorator/blob/master/docs/documentation.md\n\nFrom there you can get a PDF version by simply using the print\nfunctionality of your browser.\n\nHere is the documentation for previous versions of the module:\n\nhttps://github.com/micheles/decorator/blob/4.3.2/docs/tests.documentation.rst\nhttps://github.com/micheles/decorator/blob/4.2.1/docs/tests.documentation.rst\nhttps://github.com/micheles/decorator/blob/4.1.2/docs/tests.documentation.rst\nhttps://github.com/micheles/decorator/blob/4.0.0/documentation.rst\nhttps://github.com/micheles/decorator/blob/3.4.2/documentation.rst\n\nFor the impatient\n-----------------\n\nHere is an example of how to define a family of decorators tracing slow\noperations:\n\n.. code-block:: python\n\n   from decorator import decorator\n\n   @decorator\n   def warn_slow(func, timelimit=60, *args, **kw):\n       t0 = time.time()\n       result = func(*args, **kw)\n       dt = time.time() - t0\n       if dt > timelimit:\n           logging.warn('%s took %d seconds', func.__name__, dt)\n       else:\n           logging.info('%s took %d seconds', func.__name__, dt)\n       return result\n\n   @warn_slow  # warn if it takes more than 1 minute\n   def preprocess_input_files(inputdir, tempdir):\n       ...\n\n   @warn_slow(timelimit=600)  # warn if it takes more than 10 minutes\n   def run_calculation(tempdir, outdir):\n       ...\n\nEnjoy!\n\n\n",
          "name": "decorator",
          "author": [
            {
              "type": "Person",
              "name": "Michele Simionato",
              "email": [
                "michele.simionato@gmail.com"
              ],
              "familyName": [
                "Simionato"
              ],
              "givenName": [
                "Michele"
              ]
            }
          ],
          "keywords": "decorators generic utility",
          "license": "new BSD License",
          "codeRepository": "https://pypi.org/project/decorator/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python",
          "applicationCategory": [
            "Software Development",
            "Utilities"
          ],
          "applicationSubCategory": [
            "Libraries"
          ]
        },
        {
          "type": "SoftwarePackage",
          "description": "===================================================\ndefusedxml -- defusing XML bombs and other exploits\n===================================================\n\n.. image:: https://img.shields.io/pypi/v/defusedxml.svg\n    :target: https://pypi.org/project/defusedxml/\n    :alt: Latest Version\n\n.. image:: https://img.shields.io/pypi/pyversions/defusedxml.svg\n    :target: https://pypi.org/project/defusedxml/\n    :alt: Supported Python versions\n\n.. image:: https://travis-ci.org/tiran/defusedxml.svg?branch=master\n    :target: https://travis-ci.org/tiran/defusedxml\n    :alt: Travis CI\n\n.. image:: https://codecov.io/github/tiran/defusedxml/coverage.svg?branch=master\n    :target: https://codecov.io/github/tiran/defusedxml?branch=master\n    :alt: codecov\n\n.. image:: https://img.shields.io/pypi/dm/defusedxml.svg\n    :target: https://pypistats.org/packages/defusedxml\n    :alt: PyPI downloads\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/psf/black\n    :alt: Code style: black\n\n..\n\n    \"It's just XML, what could probably go wrong?\"\n\nChristian Heimes <christian@python.org>\n\nSynopsis\n========\n\nThe results of an attack on a vulnerable XML library can be fairly dramatic.\nWith just a few hundred **Bytes** of XML data an attacker can occupy several\n**Gigabytes** of memory within **seconds**. An attacker can also keep\nCPUs busy for a long time with a small to medium size request. Under some\ncircumstances it is even possible to access local files on your\nserver, to circumvent a firewall, or to abuse services to rebound attacks to\nthird parties.\n\nThe attacks use and abuse less common features of XML and its parsers. The\nmajority of developers are unacquainted with features such as processing\ninstructions and entity expansions that XML inherited from SGML. At best\nthey know about ``<!DOCTYPE>`` from experience with HTML but they are not\naware that a document type definition (DTD) can generate an HTTP request\nor load a file from the file system.\n\nNone of the issues is new. They have been known for a long time. Billion\nlaughs was first reported in 2003. Nevertheless some XML libraries and\napplications are still vulnerable and even heavy users of XML are\nsurprised by these features. It's hard to say whom to blame for the\nsituation. It's too short sighted to shift all blame on XML parsers and\nXML libraries for using insecure default settings. After all they\nproperly implement XML specifications. Application developers must not rely\nthat a library is always configured for security and potential harmful data\nby default.\n\n\n.. contents:: Table of Contents\n   :depth: 2\n\n\nAttack vectors\n==============\n\nbillion laughs / exponential entity expansion\n---------------------------------------------\n\nThe `Billion Laughs`_ attack -- also known as exponential entity expansion --\nuses multiple levels of nested entities. The original example uses 9 levels\nof 10 expansions in each level to expand the string ``lol`` to a string of\n3 * 10 :sup:`9` bytes, hence the name \"billion laughs\". The resulting string\noccupies 3 GB (2.79 GiB) of memory; intermediate strings require additional\nmemory. Because most parsers don't cache the intermediate step for every\nexpansion it is repeated over and over again. It increases the CPU load even\nmore.\n\nAn XML document of just a few hundred bytes can disrupt all services on a\nmachine within seconds.\n\nExample XML::\n\n    <!DOCTYPE xmlbomb [\n    <!ENTITY a \"1234567890\" >\n    <!ENTITY b \"&a;&a;&a;&a;&a;&a;&a;&a;\">\n    <!ENTITY c \"&b;&b;&b;&b;&b;&b;&b;&b;\">\n    <!ENTITY d \"&c;&c;&c;&c;&c;&c;&c;&c;\">\n    ]>\n    <bomb>&d;</bomb>\n\n\nquadratic blowup entity expansion\n---------------------------------\n\nA quadratic blowup attack is similar to a `Billion Laughs`_ attack; it abuses\nentity expansion, too. Instead of nested entities it repeats one large entity\nwith a couple of thousand chars over and over again. The attack isn't as\nefficient as the exponential case but it avoids triggering countermeasures of\nparsers against heavily nested entities. Some parsers limit the depth and\nbreadth of a single entity but not the total amount of expanded text\nthroughout an entire XML document.\n\nA medium-sized XML document with a couple of hundred kilobytes can require a\ncouple of hundred MB to several GB of memory. When the attack is combined\nwith some level of nested expansion an attacker is able to achieve a higher\nratio of success.\n\n::\n\n    <!DOCTYPE bomb [\n    <!ENTITY a \"xxxxxxx... a couple of ten thousand chars\">\n    ]>\n    <bomb>&a;&a;&a;... repeat</bomb>\n\n\nexternal entity expansion (remote)\n----------------------------------\n\nEntity declarations can contain more than just text for replacement. They can\nalso point to external resources by public identifiers or system identifiers.\nSystem identifiers are standard URIs. When the URI is a URL (e.g. a\n``http://`` locator) some parsers download the resource from the remote\nlocation and embed them into the XML document verbatim.\n\nSimple example of a parsed external entity::\n\n    <!DOCTYPE external [\n    <!ENTITY ee SYSTEM \"http://www.python.org/some.xml\">\n    ]>\n    <root>&ee;</root>\n\nThe case of parsed external entities works only for valid XML content. The\nXML standard also supports unparsed external entities with a\n``NData declaration``.\n\nExternal entity expansion opens the door to plenty of exploits. An attacker\ncan abuse a vulnerable XML library and application to rebound and forward\nnetwork requests with the IP address of the server. It highly depends\non the parser and the application what kind of exploit is possible. For\nexample:\n\n* An attacker can circumvent firewalls and gain access to restricted\n  resources as all the requests are made from an internal and trustworthy\n  IP address, not from the outside.\n* An attacker can abuse a service to attack, spy on or DoS your servers but\n  also third party services. The attack is disguised with the IP address of\n  the server and the attacker is able to utilize the high bandwidth of a big\n  machine.\n* An attacker can exhaust additional resources on the machine, e.g. with\n  requests to a service that doesn't respond or responds with very large\n  files.\n* An attacker may gain knowledge, when, how often and from which IP address\n  an XML document is accessed.\n* An attacker could send mail from inside your network if the URL handler\n  supports ``smtp://`` URIs.\n\n\nexternal entity expansion (local file)\n--------------------------------------\n\nExternal entities with references to local files are a sub-case of external\nentity expansion. It's listed as an extra attack because it deserves extra\nattention. Some XML libraries such as lxml disable network access by default\nbut still allow entity expansion with local file access by default. Local\nfiles are either referenced with a ``file://`` URL or by a file path (either\nrelative or absolute).\n\nAn attacker may be able to access and download all files that can be read by\nthe application process. This may include critical configuration files, too.\n\n::\n\n    <!DOCTYPE external [\n    <!ENTITY ee SYSTEM \"file:///PATH/TO/simple.xml\">\n    ]>\n    <root>&ee;</root>\n\n\nDTD retrieval\n-------------\n\nThis case is similar to external entity expansion, too. Some XML libraries\nlike Python's xml.dom.pulldom retrieve document type definitions from remote\nor local locations. Several attack scenarios from the external entity case\napply to this issue as well.\n\n::\n\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n      \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n    <html>\n        <head/>\n        <body>text</body>\n    </html>\n\n\nPython XML Libraries\n====================\n\n.. csv-table:: vulnerabilities and features\n   :header: \"kind\", \"sax\", \"etree\", \"minidom\", \"pulldom\", \"xmlrpc\", \"lxml\", \"genshi\"\n   :widths: 24, 7, 8, 8, 7, 8, 8, 8\n   :stub-columns: 0\n\n   \"billion laughs\", \"**True**\", \"**True**\", \"**True**\", \"**True**\", \"**True**\", \"False (1)\", \"False (5)\"\n   \"quadratic blowup\", \"**True**\", \"**True**\", \"**True**\", \"**True**\", \"**True**\", \"**True**\", \"False (5)\"\n   \"external entity expansion (remote)\", \"**True**\", \"False (3)\", \"False (4)\", \"**True**\", \"false\", \"False (1)\", \"False (5)\"\n   \"external entity expansion (local file)\", \"**True**\", \"False (3)\", \"False (4)\", \"**True**\", \"false\", \"**True**\", \"False (5)\"\n   \"DTD retrieval\", \"**True**\", \"False\", \"False\", \"**True**\", \"false\", \"False (1)\", \"False\"\n   \"gzip bomb\", \"False\", \"False\", \"False\", \"False\", \"**True**\", \"**partly** (2)\", \"False\"\n   \"xpath support (7)\", \"False\", \"False\", \"False\", \"False\", \"False\", \"**True**\", \"False\"\n   \"xsl(t) support (7)\", \"False\", \"False\", \"False\", \"False\", \"False\", \"**True**\", \"False\"\n   \"xinclude support (7)\", \"False\", \"**True** (6)\", \"False\", \"False\", \"False\", \"**True** (6)\", \"**True**\"\n   \"C library\", \"expat\", \"expat\", \"expat\", \"expat\", \"expat\", \"libxml2\", \"expat\"\n\n1. Lxml is protected against billion laughs attacks and doesn't do network\n   lookups by default.\n2. libxml2 and lxml are not directly vulnerable to gzip decompression bombs\n   but they don't protect you against them either.\n3. xml.etree doesn't expand entities and raises a ParserError when an entity\n   occurs.\n4. minidom doesn't expand entities and simply returns the unexpanded entity\n   verbatim.\n5. genshi.input of genshi 0.6 doesn't support entity expansion and raises a\n   ParserError when an entity occurs.\n6. Library has (limited) XInclude support but requires an additional step to\n   process inclusion.\n7. These are features but they may introduce exploitable holes, see\n   `Other things to consider`_\n\n\nSettings in standard library\n----------------------------\n\n\nxml.sax.handler Features\n........................\n\nfeature_external_ges (http://xml.org/sax/features/external-general-entities)\n  disables external entity expansion\n\nfeature_external_pes (http://xml.org/sax/features/external-parameter-entities)\n  the option is ignored and doesn't modify any functionality\n\nDOM xml.dom.xmlbuilder.Options\n..............................\n\nexternal_parameter_entities\n  ignored\n\nexternal_general_entities\n  ignored\n\nexternal_dtd_subset\n  ignored\n\nentities\n  unsure\n\n\ndefusedxml\n==========\n\nThe `defusedxml package`_ (`defusedxml on PyPI`_)\ncontains several Python-only workarounds and fixes\nfor denial of service and other vulnerabilities in Python's XML libraries.\nIn order to benefit from the protection you just have to import and use the\nlisted functions / classes from the right defusedxml module instead of the\noriginal module. Merely `defusedxml.xmlrpc`_ is implemented as monkey patch.\n\nInstead of::\n\n   >>> from xml.etree.ElementTree import parse\n   >>> et = parse(xmlfile)\n\nalter code to::\n\n   >>> from defusedxml.ElementTree import parse\n   >>> et = parse(xmlfile)\n\nAdditionally the package has an **untested** function to monkey patch\nall stdlib modules with ``defusedxml.defuse_stdlib()``.\n\nAll functions and parser classes accept three additional keyword arguments.\nThey return either the same objects as the original functions or compatible\nsubclasses.\n\nforbid_dtd (default: False)\n  disallow XML with a ``<!DOCTYPE>`` processing instruction and raise a\n  *DTDForbidden* exception when a DTD processing instruction is found.\n\nforbid_entities (default: True)\n  disallow XML with ``<!ENTITY>`` declarations inside the DTD and raise an\n  *EntitiesForbidden* exception when an entity is declared.\n\nforbid_external (default: True)\n  disallow any access to remote or local resources in external entities\n  or DTD and raising an *ExternalReferenceForbidden* exception when a DTD\n  or entity references an external resource.\n\n\ndefusedxml (package)\n--------------------\n\nDefusedXmlException, DTDForbidden, EntitiesForbidden,\nExternalReferenceForbidden, NotSupportedError\n\ndefuse_stdlib() (*experimental*)\n\n\ndefusedxml.cElementTree\n-----------------------\n\n**NOTE** ``defusedxml.cElementTree`` is deprecated and will be removed in a\nfuture release. Import from ``defusedxml.ElementTree`` instead.\n\nparse(), iterparse(), fromstring(), XMLParser\n\n\ndefusedxml.ElementTree\n-----------------------\n\nparse(), iterparse(), fromstring(), XMLParser\n\n\ndefusedxml.expatreader\n----------------------\n\ncreate_parser(), DefusedExpatParser\n\n\ndefusedxml.sax\n--------------\n\nparse(), parseString(), make_parser()\n\n\ndefusedxml.expatbuilder\n-----------------------\n\nparse(), parseString(), DefusedExpatBuilder, DefusedExpatBuilderNS\n\n\ndefusedxml.minidom\n------------------\n\nparse(), parseString()\n\n\ndefusedxml.pulldom\n------------------\n\nparse(), parseString()\n\n\ndefusedxml.xmlrpc\n-----------------\n\nThe fix is implemented as monkey patch for the stdlib's xmlrpc package (3.x)\nor xmlrpclib module (2.x). The function `monkey_patch()` enables the fixes,\n`unmonkey_patch()` removes the patch and puts the code in its former state.\n\nThe monkey patch protects against XML related attacks as well as\ndecompression bombs and excessively large requests or responses. The default\nsetting is 30 MB for requests, responses and gzip decompression. You can\nmodify the default by changing the module variable `MAX_DATA`. A value of\n`-1` disables the limit.\n\n\ndefusedxml.lxml\n---------------\n\n**DEPRECATED** The module is deprecated and will be removed in a future\nrelease.\n\nThe module acts as an *example* how you could protect code that uses\nlxml.etree. It implements a custom Element class that filters out\nEntity instances, a custom parser factory and a thread local storage for\nparser instances. It also has a check_docinfo() function which inspects\na tree for internal or external DTDs and entity declarations. In order to\ncheck for entities lxml > 3.0 is required.\n\nparse(), fromstring()\nRestrictedElement, GlobalParserTLS, getDefaultParser(), check_docinfo()\n\n\ndefusedexpat\n============\n\nThe `defusedexpat package`_ (`defusedexpat on PyPI`_)\ncomes with binary extensions and a\n`modified expat`_ library instead of the standard `expat parser`_. It's\nbasically a stand-alone version of the patches for Python's standard\nlibrary C extensions.\n\nModifications in expat\n----------------------\n\nnew definitions::\n\n  XML_BOMB_PROTECTION\n  XML_DEFAULT_MAX_ENTITY_INDIRECTIONS\n  XML_DEFAULT_MAX_ENTITY_EXPANSIONS\n  XML_DEFAULT_RESET_DTD\n\nnew XML_FeatureEnum members::\n\n  XML_FEATURE_MAX_ENTITY_INDIRECTIONS\n  XML_FEATURE_MAX_ENTITY_EXPANSIONS\n  XML_FEATURE_IGNORE_DTD\n\nnew XML_Error members::\n\n  XML_ERROR_ENTITY_INDIRECTIONS\n  XML_ERROR_ENTITY_EXPANSION\n\nnew API functions::\n\n  int XML_GetFeature(XML_Parser parser,\n                     enum XML_FeatureEnum feature,\n                     long *value);\n  int XML_SetFeature(XML_Parser parser,\n                     enum XML_FeatureEnum feature,\n                     long value);\n  int XML_GetFeatureDefault(enum XML_FeatureEnum feature,\n                            long *value);\n  int XML_SetFeatureDefault(enum XML_FeatureEnum feature,\n                            long value);\n\nXML_FEATURE_MAX_ENTITY_INDIRECTIONS\n   Limit the amount of indirections that are allowed to occur during the\n   expansion of a nested entity. A counter starts when an entity reference\n   is encountered. It resets after the entity is fully expanded. The limit\n   protects the parser against exponential entity expansion attacks (aka\n   billion laughs attack). When the limit is exceeded the parser stops and\n   fails with `XML_ERROR_ENTITY_INDIRECTIONS`.\n   A value of 0 disables the protection.\n\n   Supported range\n     0 .. UINT_MAX\n   Default\n     40\n\nXML_FEATURE_MAX_ENTITY_EXPANSIONS\n   Limit the total length of all entity expansions throughout the entire\n   document. The lengths of all entities are accumulated in a parser variable.\n   The setting protects against quadratic blowup attacks (lots of expansions\n   of a large entity declaration). When the sum of all entities exceeds\n   the limit, the parser stops and fails with `XML_ERROR_ENTITY_EXPANSION`.\n   A value of 0 disables the protection.\n\n   Supported range\n     0 .. UINT_MAX\n   Default\n     8 MiB\n\nXML_FEATURE_RESET_DTD\n   Reset all DTD information after the <!DOCTYPE> block has been parsed. When\n   the flag is set (default: false) all DTD information after the\n   endDoctypeDeclHandler has been called. The flag can be set inside the\n   endDoctypeDeclHandler. Without DTD information any entity reference in\n   the document body leads to `XML_ERROR_UNDEFINED_ENTITY`.\n\n   Supported range\n     0, 1\n   Default\n     0\n\n\nHow to avoid XML vulnerabilities\n================================\n\nBest practices\n--------------\n\n* Don't allow DTDs\n* Don't expand entities\n* Don't resolve externals\n* Limit parse depth\n* Limit total input size\n* Limit parse time\n* Favor a SAX or iterparse-like parser for potential large data\n* Validate and properly quote arguments to XSL transformations and\n  XPath queries\n* Don't use XPath expression from untrusted sources\n* Don't apply XSL transformations that come untrusted sources\n\n(based on Brad Hill's `Attacking XML Security`_)\n\n\nOther things to consider\n========================\n\nXML, XML parsers and processing libraries have more features and possible\nissue that could lead to DoS vulnerabilities or security exploits in\napplications. I have compiled an incomplete list of theoretical issues that\nneed further research and more attention. The list is deliberately pessimistic\nand a bit paranoid, too. It contains things that might go wrong under daffy\ncircumstances.\n\n\nattribute blowup / hash collision attack\n----------------------------------------\n\nXML parsers may use an algorithm with quadratic runtime O(n :sup:`2`) to\nhandle attributes and namespaces. If it uses hash tables (dictionaries) to\nstore attributes and namespaces the implementation may be vulnerable to\nhash collision attacks, thus reducing the performance to O(n :sup:`2`) again.\nIn either case an attacker is able to forge a denial of service attack with\nan XML document that contains thousands upon thousands of attributes in\na single node.\n\nI haven't researched yet if expat, pyexpat or libxml2 are vulnerable.\n\n\ndecompression bomb\n------------------\n\nThe issue of decompression bombs (aka `ZIP bomb`_) apply to all XML libraries\nthat can parse compressed XML stream like gzipped HTTP streams or LZMA-ed\nfiles. For an attacker it can reduce the amount of transmitted data by three\nmagnitudes or more. Gzip is able to compress 1 GiB zeros to roughly 1 MB,\nlzma is even better::\n\n    $ dd if=/dev/zero bs=1M count=1024 | gzip > zeros.gz\n    $ dd if=/dev/zero bs=1M count=1024 | lzma -z > zeros.xy\n    $ ls -sh zeros.*\n    1020K zeros.gz\n     148K zeros.xy\n\nNone of Python's standard XML libraries decompress streams except for\n``xmlrpclib``. The module is vulnerable <https://bugs.python.org/issue16043>\nto decompression bombs.\n\nlxml can load and process compressed data through libxml2 transparently.\nlibxml2 can handle even very large blobs of compressed data efficiently\nwithout using too much memory. But it doesn't protect applications from\ndecompression bombs. A carefully written SAX or iterparse-like approach can\nbe safe.\n\n\nProcessing Instruction\n----------------------\n\n`PI`_'s like::\n\n  <?xml-stylesheet type=\"text/xsl\" href=\"style.xsl\"?>\n\nmay impose more threats for XML processing. It depends if and how a\nprocessor handles processing instructions. The issue of URL retrieval with\nnetwork or local file access apply to processing instructions, too.\n\n\nOther DTD features\n------------------\n\n`DTD`_ has more features like ``<!NOTATION>``. I haven't researched how\nthese features may be a security threat.\n\n\nXPath\n-----\n\nXPath statements may introduce DoS vulnerabilities. Code should never execute\nqueries from untrusted sources. An attacker may also be able to create an XML\ndocument that makes certain XPath queries costly or resource hungry.\n\n\nXPath injection attacks\n-----------------------\n\nXPath injeciton attacks pretty much work like SQL injection attacks.\nArguments to XPath queries must be quoted and validated properly, especially\nwhen they are taken from the user. The page `Avoid the dangers of XPath injection`_\nlist some ramifications of XPath injections.\n\nPython's standard library doesn't have XPath support. Lxml supports\nparameterized XPath queries which does proper quoting. You just have to use\nits xpath() method correctly::\n\n   # DON'T\n   >>> tree.xpath(\"/tag[@id='%s']\" % value)\n\n   # instead do\n   >>> tree.xpath(\"/tag[@id=$tagid]\", tagid=name)\n\n\nXInclude\n--------\n\n`XML Inclusion`_ is another way to load and include external files::\n\n   <root xmlns:xi=\"http://www.w3.org/2001/XInclude\">\n     <xi:include href=\"filename.txt\" parse=\"text\" />\n   </root>\n\nThis feature should be disabled when XML files from an untrusted source are\nprocessed. Some Python XML libraries and libxml2 support XInclude but don't\nhave an option to sandbox inclusion and limit it to allowed directories.\n\n\nXMLSchema location\n------------------\n\nA validating XML parser may download schema files from the information in a\n``xsi:schemaLocation`` attribute.\n\n::\n\n  <ead xmlns=\"urn:isbn:1-931666-22-9\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"urn:isbn:1-931666-22-9 http://www.loc.gov/ead/ead.xsd\">\n  </ead>\n\n\nXSL Transformation\n------------------\n\nYou should keep in mind that XSLT is a Turing complete language. Never\nprocess XSLT code from unknown or untrusted source! XSLT processors may\nallow you to interact with external resources in ways you can't even imagine.\nSome processors even support extensions that allow read/write access to file\nsystem, access to JRE objects or scripting with Jython.\n\nExample from `Attacking XML Security`_ for Xalan-J::\n\n    <xsl:stylesheet version=\"1.0\"\n     xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\n     xmlns:rt=\"http://xml.apache.org/xalan/java/java.lang.Runtime\"\n     xmlns:ob=\"http://xml.apache.org/xalan/java/java.lang.Object\"\n     exclude-result-prefixes= \"rt ob\">\n     <xsl:template match=\"/\">\n       <xsl:variable name=\"runtimeObject\" select=\"rt:getRuntime()\"/>\n       <xsl:variable name=\"command\"\n         select=\"rt:exec($runtimeObject, &apos;c:\\Windows\\system32\\cmd.exe&apos;)\"/>\n       <xsl:variable name=\"commandAsString\" select=\"ob:toString($command)\"/>\n       <xsl:value-of select=\"$commandAsString\"/>\n     </xsl:template>\n    </xsl:stylesheet>\n\n\nRelated CVEs\n============\n\nCVE-2013-1664\n  Unrestricted entity expansion induces DoS vulnerabilities in Python XML\n  libraries (XML bomb)\n\nCVE-2013-1665\n  External entity expansion in Python XML libraries inflicts potential\n  security flaws and DoS vulnerabilities\n\n\nOther languages / frameworks\n=============================\n\nSeveral other programming languages and frameworks are vulnerable as well. A\ncouple of them are affected by the fact that libxml2 up to 2.9.0 has no\nprotection against quadratic blowup attacks. Most of them have potential\ndangerous default settings for entity expansion and external entities, too.\n\nPerl\n----\n\nPerl's XML::Simple is vulnerable to quadratic entity expansion and external\nentity expansion (both local and remote).\n\n\nRuby\n----\n\nRuby's REXML document parser is vulnerable to entity expansion attacks\n(both quadratic and exponential) but it doesn't do external entity\nexpansion by default. In order to counteract entity expansion you have to\ndisable the feature::\n\n  REXML::Document.entity_expansion_limit = 0\n\nlibxml-ruby and hpricot don't expand entities in their default configuration.\n\n\nPHP\n---\n\nPHP's SimpleXML API is vulnerable to quadratic entity expansion and loads\nentities from local and remote resources. The option ``LIBXML_NONET`` disables\nnetwork access but still allows local file access. ``LIBXML_NOENT`` seems to\nhave no effect on entity expansion in PHP 5.4.6.\n\n\nC# / .NET / Mono\n----------------\n\nInformation in `XML DoS and Defenses (MSDN)`_ suggest that .NET is\nvulnerable with its default settings. The article contains code snippets\nhow to create a secure XML reader::\n\n  XmlReaderSettings settings = new XmlReaderSettings();\n  settings.ProhibitDtd = false;\n  settings.MaxCharactersFromEntities = 1024;\n  settings.XmlResolver = null;\n  XmlReader reader = XmlReader.Create(stream, settings);\n\n\nJava\n----\n\nUntested. The documentation of Xerces and its `Xerces SecurityMananger`_\nsounds like Xerces is also vulnerable to billion laugh attacks with its\ndefault settings. It also does entity resolving when an\n``org.xml.sax.EntityResolver`` is configured. I'm not yet sure about the\ndefault setting here.\n\nJava specialists suggest to have a custom builder factory::\n\n  DocumentBuilderFactory builderFactory = DocumentBuilderFactory.newInstance();\n  builderFactory.setXIncludeAware(False);\n  builderFactory.setExpandEntityReferences(False);\n  builderFactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, True);\n  # either\n  builderFactory.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", True);\n  # or if you need DTDs\n  builderFactory.setFeature(\"http://xml.org/sax/features/external-general-entities\", False);\n  builderFactory.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", False);\n  builderFactory.setFeature(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\", False);\n  builderFactory.setFeature(\"http://apache.org/xml/features/nonvalidating/load-dtd-grammar\", False);\n\n\nTODO\n====\n\n* DOM: Use xml.dom.xmlbuilder options for entity handling\n* SAX: take feature_external_ges and feature_external_pes (?) into account\n* test experimental monkey patching of stdlib modules\n* improve documentation\n\n\nLicense\n=======\n\nCopyright (c) 2013-2017 by Christian Heimes <christian@python.org>\n\nLicensed to PSF under a Contributor Agreement.\n\nSee https://www.python.org/psf/license for licensing details.\n\n\nAcknowledgements\n================\n\nBrett Cannon (Python Core developer)\n  review and code cleanup\n\nAntoine Pitrou (Python Core developer)\n  code review\n\nAaron Patterson, Ben Murphy and Michael Koziarski (Ruby community)\n  Many thanks to Aaron, Ben and Michael from the Ruby community for their\n  report and assistance.\n\nThierry Carrez (OpenStack)\n  Many thanks to Thierry for his report to the Python Security Response\n  Team on behalf of the OpenStack security team.\n\nCarl Meyer (Django)\n  Many thanks to Carl for his report to PSRT on behalf of the Django security\n  team.\n\nDaniel Veillard (libxml2)\n  Many thanks to Daniel for his insight and assistance with libxml2.\n\nsemantics GmbH (https://www.semantics.de/)\n  Many thanks to my employer semantics for letting me work on the issue\n  during working hours as part of semantics's open source initiative.\n\n\nReferences\n==========\n\n* `XML DoS and Defenses (MSDN)`_\n* `Billion Laughs`_ on Wikipedia\n* `ZIP bomb`_ on Wikipedia\n* `Configure SAX parsers for secure processing`_\n* `Testing for XML Injection`_\n\n.. _defusedxml package: https://github.com/tiran/defusedxml\n.. _defusedxml on PyPI: https://pypi.python.org/pypi/defusedxml\n.. _defusedexpat package: https://github.com/tiran/defusedexpat\n.. _defusedexpat on PyPI: https://pypi.python.org/pypi/defusedexpat\n.. _modified expat: https://github.com/tiran/expat\n.. _expat parser: http://expat.sourceforge.net/\n.. _Attacking XML Security: https://www.isecpartners.com/media/12976/iSEC-HILL-Attacking-XML-Security-bh07.pdf\n.. _Billion Laughs: https://en.wikipedia.org/wiki/Billion_laughs\n.. _XML DoS and Defenses (MSDN): https://msdn.microsoft.com/en-us/magazine/ee335713.aspx\n.. _ZIP bomb: https://en.wikipedia.org/wiki/Zip_bomb\n.. _DTD: https://en.wikipedia.org/wiki/Document_Type_Definition\n.. _PI: https://en.wikipedia.org/wiki/Processing_Instruction\n.. _Avoid the dangers of XPath injection: http://www.ibm.com/developerworks/xml/library/x-xpathinjection/index.html\n.. _Configure SAX parsers for secure processing: http://www.ibm.com/developerworks/xml/library/x-tipcfsx/index.html\n.. _Testing for XML Injection: https://www.owasp.org/index.php/Testing_for_XML_Injection_(OWASP-DV-008)\n.. _Xerces SecurityMananger: https://xerces.apache.org/xerces2-j/javadocs/xerces2/org/apache/xerces/util/SecurityManager.html\n.. _XML Inclusion: https://www.w3.org/TR/xinclude/#include_element\n\nChangelog\n=========\n\ndefusedxml 0.7.1\n---------------------\n\n*Release date: 08-Mar-2021*\n\n- Fix regression ``defusedxml.ElementTree.ParseError`` (#63)\n  The ``ParseError`` exception is now the same class object as\n  ``xml.etree.ElementTree.ParseError`` again.\n\n\ndefusedxml 0.7.0\n----------------\n\n*Release date: 4-Mar-2021*\n\n- No changes\n\n\ndefusedxml 0.7.0rc2\n-------------------\n\n*Release date: 12-Jan-2021*\n\n- Re-add and deprecate ``defusedxml.cElementTree``\n- Use GitHub Actions instead of TravisCI\n- Restore ``ElementTree`` attribute of ``xml.etree`` module after patching\n\ndefusedxml 0.7.0rc1\n-------------------\n\n*Release date: 04-May-2020*\n\n- Add support for Python 3.9\n- ``defusedxml.cElementTree`` is not available with Python 3.9.\n- Python 2 is deprecate. Support for Python 2 will be removed in 0.8.0.\n\n\ndefusedxml 0.6.0\n----------------\n\n*Release date: 17-Apr-2019*\n\n- Increase test coverage.\n- Add badges to README.\n\n\ndefusedxml 0.6.0rc1\n-------------------\n\n*Release date: 14-Apr-2019*\n\n- Test on Python 3.7 stable and 3.8-dev\n- Drop support for Python 3.4\n- No longer pass *html* argument to XMLParse. It has been deprecated and\n  ignored for a long time. The DefusedXMLParser still takes a html argument.\n  A deprecation warning is issued when the argument is False and a TypeError\n  when it's True.\n- defusedxml now fails early when pyexpat stdlib module is not available or\n  broken.\n- defusedxml.ElementTree.__all__ now lists ParseError as public attribute.\n- The defusedxml.ElementTree and defusedxml.cElementTree modules had a typo\n  and used XMLParse instead of XMLParser as an alias for DefusedXMLParser.\n  Both the old and fixed name are now available.\n\n\ndefusedxml 0.5.0\n----------------\n\n*Release date: 07-Feb-2017*\n\n- No changes\n\n\ndefusedxml 0.5.0.rc1\n--------------------\n\n*Release date: 28-Jan-2017*\n\n- Add compatibility with Python 3.6\n- Drop support for Python 2.6, 3.1, 3.2, 3.3\n- Fix lxml tests (XMLSyntaxError: Detected an entity reference loop)\n\n\ndefusedxml 0.4.1\n----------------\n\n*Release date: 28-Mar-2013*\n\n- Add more demo exploits, e.g. python_external.py and Xalan XSLT demos.\n- Improved documentation.\n\n\ndefusedxml 0.4\n--------------\n\n*Release date: 25-Feb-2013*\n\n- As per http://seclists.org/oss-sec/2013/q1/340 please REJECT\n  CVE-2013-0278, CVE-2013-0279 and CVE-2013-0280 and use CVE-2013-1664,\n  CVE-2013-1665 for OpenStack/etc.\n- Add missing parser_list argument to sax.make_parser(). The argument is\n  ignored, though. (thanks to Florian Apolloner)\n- Add demo exploit for external entity attack on Python's SAX parser, XML-RPC\n  and WebDAV.\n\n\ndefusedxml 0.3\n--------------\n\n*Release date: 19-Feb-2013*\n\n- Improve documentation\n\n\ndefusedxml 0.2\n--------------\n\n*Release date: 15-Feb-2013*\n\n- Rename ExternalEntitiesForbidden to ExternalReferenceForbidden\n- Rename defusedxml.lxml.check_dtd() to check_docinfo()\n- Unify argument names in callbacks\n- Add arguments and formatted representation to exceptions\n- Add forbid_external argument to all functions and classes\n- More tests\n- LOTS of documentation\n- Add example code for other languages (Ruby, Perl, PHP) and parsers (Genshi)\n- Add protection against XML and gzip attacks to xmlrpclib\n\ndefusedxml 0.1\n--------------\n\n*Release date: 08-Feb-2013*\n\n- Initial and internal release for PSRT review\n\n\n",
          "name": "defusedxml",
          "author": [
            {
              "type": "Person",
              "name": "Christian Heimes",
              "email": [
                "christian@python.org"
              ],
              "familyName": [
                "Heimes"
              ],
              "givenName": [
                "Christian"
              ]
            }
          ],
          "keywords": "xml bomb DoS",
          "license": "PSFL",
          "version": "==0.7.1",
          "codeRepository": "https://pypi.org/project/defusedxml/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python",
          "applicationCategory": [
            "Text Processing"
          ],
          "applicationSubCategory": [
            "Markup"
          ]
        },
        {
          "type": "SoftwarePackage",
          "description": "==============================\nPackage Dependency Information\n==============================\n\n.. image:: https://img.shields.io/pypi/v/depinfo.svg\n   :target: https://pypi.org/project/depinfo/\n   :alt: Current PyPI Version\n\n.. image:: https://img.shields.io/pypi/pyversions/depinfo.svg\n   :target: https://pypi.org/project/dependency-info/\n   :alt: Supported Python Versions\n\n.. image:: https://img.shields.io/pypi/l/depinfo.svg\n   :target: https://www.apache.org/licenses/LICENSE-2.0\n   :alt: Apache Software License Version 2.0\n\n.. image:: https://img.shields.io/badge/Contributor%20Covenant-v2.0%20adopted-ff69b4.svg\n   :target: .github/CODE_OF_CONDUCT.md\n   :alt: Code of Conduct\n\n.. image:: https://github.com/Midnighter/dependency-info/workflows/CI-CD/badge.svg\n   :target: https://github.com/Midnighter/dependency-info/workflows/CI-CD\n   :alt: GitHub Actions\n\n.. image:: https://codecov.io/gh/Midnighter/dependency-info/branch/stable/graph/badge.svg\n   :target: https://codecov.io/gh/Midnighter/dependency-info\n   :alt: Codecov\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n   :target: https://github.com/ambv/black\n   :alt: Code Style Black\n\n.. code-block:: python\n\n    from depinfo import print_dependencies\n\n\n    def show_versions():\n        print_dependencies(\"your-package-name\")\n\nThat's all there is to it.\n\nIf instead you want to access and modify the information, you can make use of\nthe underlying functions that return dictionaries that map package names to\ntheir current versions. By default it will include common build packages such as\n``pip``.\n\n.. code-block:: python\n\n    from depinfo import get_pkg_info\n    help(get_pkg_info)\n\nExample\n=======\n\n.. code-block:: python\n\n    from depinfo import print_dependencies\n    print_dependencies(\"depinfo\")\n\n.. code-block:: console\n\n    System Information\n    ==================\n    OS                     Linux\n    OS-release 4.4.0-122-generic\n    Python                 3.6.5\n\n    Package Versions\n    ================\n    pip        10.0.1\n    setuptools 39.0.1\n    wheel      0.31.0\n\nCopyright\n=========\n\n* Copyright © 2018-2021, Moritz E. Beber.\n* Free software distributed under the `Apache Software License 2.0\n  <https://www.apache.org/licenses/LICENSE-2.0>`_.\n\n\n",
          "name": "depinfo",
          "author": [
            {
              "type": "Person",
              "name": "Moritz E.",
              "familyName": [
                "E."
              ],
              "givenName": [
                "Moritz"
              ]
            }
          ],
          "keywords": "dependency,dependencies,tree,version",
          "license": "Apache-2.0",
          "version": "==1.7.0",
          "codeRepository": "https://pypi.org/project/depinfo/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python",
          "applicationCategory": [
            "Utilities"
          ]
        },
        {
          "type": "SoftwarePackage",
          "description": "DiskCache: Disk Backed Cache\n============================\n\n`DiskCache`_ is an Apache2 licensed disk and file backed cache library, written\nin pure-Python, and compatible with Django.\n\nThe cloud-based computing of 2021 puts a premium on memory. Gigabytes of empty\nspace is left on disks as processes vie for memory. Among these processes is\nMemcached (and sometimes Redis) which is used as a cache. Wouldn't it be nice\nto leverage empty disk space for caching?\n\nDjango is Python's most popular web framework and ships with several caching\nbackends. Unfortunately the file-based cache in Django is essentially\nbroken. The culling method is random and large caches repeatedly scan a cache\ndirectory which slows linearly with growth. Can you really allow it to take\nsixty milliseconds to store a key in a cache with a thousand items?\n\nIn Python, we can do better. And we can do it in pure-Python!\n\n::\n\n   In [1]: import pylibmc\n   In [2]: client = pylibmc.Client(['127.0.0.1'], binary=True)\n   In [3]: client[b'key'] = b'value'\n   In [4]: %timeit client[b'key']\n\n   10000 loops, best of 3: 25.4 µs per loop\n\n   In [5]: import diskcache as dc\n   In [6]: cache = dc.Cache('tmp')\n   In [7]: cache[b'key'] = b'value'\n   In [8]: %timeit cache[b'key']\n\n   100000 loops, best of 3: 11.8 µs per loop\n\n**Note:** Micro-benchmarks have their place but are not a substitute for real\nmeasurements. DiskCache offers cache benchmarks to defend its performance\nclaims. Micro-optimizations are avoided but your mileage may vary.\n\nDiskCache efficiently makes gigabytes of storage space available for\ncaching. By leveraging rock-solid database libraries and memory-mapped files,\ncache performance can match and exceed industry-standard solutions. There's no\nneed for a C compiler or running another process. Performance is a feature and\ntesting has 100% coverage with unit tests and hours of stress.\n\nTestimonials\n------------\n\n`Daren Hasenkamp`_, Founder --\n\n    \"It's a useful, simple API, just like I love about Redis. It has reduced\n    the amount of queries hitting my Elasticsearch cluster by over 25% for a\n    website that gets over a million users/day (100+ hits/second).\"\n\n`Mathias Petermann`_, Senior Linux System Engineer --\n\n    \"I implemented it into a wrapper for our Ansible lookup modules and we were\n    able to speed up some Ansible runs by almost 3 times. DiskCache is saving\n    us a ton of time.\"\n\nDoes your company or website use `DiskCache`_? Send us a `message\n<contact@grantjenks.com>`_ and let us know.\n\n.. _`Daren Hasenkamp`: https://www.linkedin.com/in/daren-hasenkamp-93006438/\n.. _`Mathias Petermann`: https://www.linkedin.com/in/mathias-petermann-a8aa273b/\n\nFeatures\n--------\n\n- Pure-Python\n- Fully Documented\n- Benchmark comparisons (alternatives, Django cache backends)\n- 100% test coverage\n- Hours of stress testing\n- Performance matters\n- Django compatible API\n- Thread-safe and process-safe\n- Supports multiple eviction policies (LRU and LFU included)\n- Keys support \"tag\" metadata and eviction\n- Developed on Python 3.9\n- Tested on CPython 3.6, 3.7, 3.8, 3.9\n- Tested on Linux, Mac OS X, and Windows\n- Tested using GitHub Actions\n\n.. image:: https://github.com/grantjenks/python-diskcache/workflows/integration/badge.svg\n   :target: https://github.com/grantjenks/python-diskcache/actions?query=workflow%3Aintegration\n\n.. image:: https://github.com/grantjenks/python-diskcache/workflows/release/badge.svg\n   :target: https://github.com/grantjenks/python-diskcache/actions?query=workflow%3Arelease\n\nQuickstart\n----------\n\nInstalling `DiskCache`_ is simple with `pip <http://www.pip-installer.org/>`_::\n\n  $ pip install diskcache\n\nYou can access documentation in the interpreter with Python's built-in help\nfunction::\n\n  >>> import diskcache\n  >>> help(diskcache)                             # doctest: +SKIP\n\nThe core of `DiskCache`_ is three data types intended for caching. `Cache`_\nobjects manage a SQLite database and filesystem directory to store key and\nvalue pairs. `FanoutCache`_ provides a sharding layer to utilize multiple\ncaches and `DjangoCache`_ integrates that with `Django`_::\n\n  >>> from diskcache import Cache, FanoutCache, DjangoCache\n  >>> help(Cache)                                 # doctest: +SKIP\n  >>> help(FanoutCache)                           # doctest: +SKIP\n  >>> help(DjangoCache)                           # doctest: +SKIP\n\nBuilt atop the caching data types, are `Deque`_ and `Index`_ which work as a\ncross-process, persistent replacements for Python's ``collections.deque`` and\n``dict``. These implement the sequence and mapping container base classes::\n\n  >>> from diskcache import Deque, Index\n  >>> help(Deque)                                 # doctest: +SKIP\n  >>> help(Index)                                 # doctest: +SKIP\n\nFinally, a number of `recipes`_ for cross-process synchronization are provided\nusing an underlying cache. Features like memoization with cache stampede\nprevention, cross-process locking, and cross-process throttling are available::\n\n  >>> from diskcache import memoize_stampede, Lock, throttle\n  >>> help(memoize_stampede)                      # doctest: +SKIP\n  >>> help(Lock)                                  # doctest: +SKIP\n  >>> help(throttle)                              # doctest: +SKIP\n\nPython's docstrings are a quick way to get started but not intended as a\nreplacement for the `DiskCache Tutorial`_ and `DiskCache API Reference`_.\n\n.. _`Cache`: http://www.grantjenks.com/docs/diskcache/tutorial.html#cache\n.. _`FanoutCache`: http://www.grantjenks.com/docs/diskcache/tutorial.html#fanoutcache\n.. _`DjangoCache`: http://www.grantjenks.com/docs/diskcache/tutorial.html#djangocache\n.. _`Django`: https://www.djangoproject.com/\n.. _`Deque`: http://www.grantjenks.com/docs/diskcache/tutorial.html#deque\n.. _`Index`: http://www.grantjenks.com/docs/diskcache/tutorial.html#index\n.. _`recipes`: http://www.grantjenks.com/docs/diskcache/tutorial.html#recipes\n\nUser Guide\n----------\n\nFor those wanting more details, this part of the documentation describes\ntutorial, benchmarks, API, and development.\n\n* `DiskCache Tutorial`_\n* `DiskCache Cache Benchmarks`_\n* `DiskCache DjangoCache Benchmarks`_\n* `Case Study: Web Crawler`_\n* `Case Study: Landing Page Caching`_\n* `Talk: All Things Cached - SF Python 2017 Meetup`_\n* `DiskCache API Reference`_\n* `DiskCache Development`_\n\n.. _`DiskCache Tutorial`: http://www.grantjenks.com/docs/diskcache/tutorial.html\n.. _`DiskCache Cache Benchmarks`: http://www.grantjenks.com/docs/diskcache/cache-benchmarks.html\n.. _`DiskCache DjangoCache Benchmarks`: http://www.grantjenks.com/docs/diskcache/djangocache-benchmarks.html\n.. _`Talk: All Things Cached - SF Python 2017 Meetup`: http://www.grantjenks.com/docs/diskcache/sf-python-2017-meetup-talk.html\n.. _`Case Study: Web Crawler`: http://www.grantjenks.com/docs/diskcache/case-study-web-crawler.html\n.. _`Case Study: Landing Page Caching`: http://www.grantjenks.com/docs/diskcache/case-study-landing-page-caching.html\n.. _`DiskCache API Reference`: http://www.grantjenks.com/docs/diskcache/api.html\n.. _`DiskCache Development`: http://www.grantjenks.com/docs/diskcache/development.html\n\nComparisons\n-----------\n\nComparisons to popular projects related to `DiskCache`_.\n\nKey-Value Stores\n................\n\n`DiskCache`_ is mostly a simple key-value store. Feature comparisons with four\nother projects are shown in the tables below.\n\n* `dbm`_ is part of Python's standard library and implements a generic\n  interface to variants of the DBM database — dbm.gnu or dbm.ndbm. If none of\n  these modules is installed, the slow-but-simple dbm.dumb is used.\n* `shelve`_ is part of Python's standard library and implements a “shelf” as a\n  persistent, dictionary-like object. The difference with “dbm” databases is\n  that the values can be anything that the pickle module can handle.\n* `sqlitedict`_ is a lightweight wrapper around Python's sqlite3 database with\n  a simple, Pythonic dict-like interface and support for multi-thread\n  access. Keys are arbitrary strings, values arbitrary pickle-able objects.\n* `pickleDB`_ is a lightweight and simple key-value store. It is built upon\n  Python's simplejson module and was inspired by Redis. It is licensed with the\n  BSD three-caluse license.\n\n.. _`dbm`: https://docs.python.org/3/library/dbm.html\n.. _`shelve`: https://docs.python.org/3/library/shelve.html\n.. _`sqlitedict`: https://github.com/RaRe-Technologies/sqlitedict\n.. _`pickleDB`: https://pythonhosted.org/pickleDB/\n\n**Features**\n\n================ ============= ========= ========= ============ ============\nFeature          diskcache     dbm       shelve    sqlitedict   pickleDB\n================ ============= ========= ========= ============ ============\nAtomic?          Always        Maybe     Maybe     Maybe        No\nPersistent?      Yes           Yes       Yes       Yes          Yes\nThread-safe?     Yes           No        No        Yes          No\nProcess-safe?    Yes           No        No        Maybe        No\nBackend?         SQLite        DBM       DBM       SQLite       File\nSerialization?   Customizable  None      Pickle    Customizable JSON\nData Types?      Mapping/Deque Mapping   Mapping   Mapping      Mapping\nOrdering?        Insert/Sorted None      None      None         None\nEviction?        LRU/LFU/more  None      None      None         None\nVacuum?          Automatic     Maybe     Maybe     Manual       Automatic\nTransactions?    Yes           No        No        Maybe        No\nMultiprocessing? Yes           No        No        No           No\nForkable?        Yes           No        No        No           No\nMetadata?        Yes           No        No        No           No\n================ ============= ========= ========= ============ ============\n\n**Quality**\n\n================ ============= ========= ========= ============ ============\nProject          diskcache     dbm       shelve    sqlitedict   pickleDB\n================ ============= ========= ========= ============ ============\nTests?           Yes           Yes       Yes       Yes          Yes\nCoverage?        Yes           Yes       Yes       Yes          No\nStress?          Yes           No        No        No           No\nCI Tests?        Linux/Windows Yes       Yes       Linux        No\nPython?          2/3/PyPy      All       All       2/3          2/3\nLicense?         Apache2       Python    Python    Apache2      3-Clause BSD\nDocs?            Extensive     Summary   Summary   Readme       Summary\nBenchmarks?      Yes           No        No        No           No\nSources?         GitHub        GitHub    GitHub    GitHub       GitHub\nPure-Python?     Yes           Yes       Yes       Yes          Yes\nServer?          No            No        No        No           No\nIntegrations?    Django        None      None      None         None\n================ ============= ========= ========= ============ ============\n\n**Timings**\n\nThese are rough measurements. See `DiskCache Cache Benchmarks`_ for more\nrigorous data.\n\n================ ============= ========= ========= ============ ============\nProject          diskcache     dbm       shelve    sqlitedict   pickleDB\n================ ============= ========= ========= ============ ============\nget                      25 µs     36 µs     41 µs       513 µs        92 µs\nset                     198 µs    900 µs    928 µs       697 µs     1,020 µs\ndelete                  248 µs    740 µs    702 µs     1,717 µs     1,020 µs\n================ ============= ========= ========= ============ ============\n\nCaching Libraries\n.................\n\n* `joblib.Memory`_ provides caching functions and works by explicitly saving\n  the inputs and outputs to files. It is designed to work with non-hashable and\n  potentially large input and output data types such as numpy arrays.\n* `klepto`_ extends Python’s `lru_cache` to utilize different keymaps and\n  alternate caching algorithms, such as `lfu_cache` and `mru_cache`. Klepto\n  uses a simple dictionary-sytle interface for all caches and archives.\n\n.. _`klepto`: https://pypi.org/project/klepto/\n.. _`joblib.Memory`: https://joblib.readthedocs.io/en/latest/memory.html\n\nData Structures\n...............\n\n* `dict`_ is a mapping object that maps hashable keys to arbitrary\n  values. Mappings are mutable objects. There is currently only one standard\n  Python mapping type, the dictionary.\n* `pandas`_ is a Python package providing fast, flexible, and expressive data\n  structures designed to make working with “relational” or “labeled” data both\n  easy and intuitive.\n* `Sorted Containers`_ is an Apache2 licensed sorted collections library,\n  written in pure-Python, and fast as C-extensions. Sorted Containers\n  implements sorted list, sorted dictionary, and sorted set data types.\n\n.. _`dict`: https://docs.python.org/3/library/stdtypes.html#typesmapping\n.. _`pandas`: https://pandas.pydata.org/\n.. _`Sorted Containers`: http://www.grantjenks.com/docs/sortedcontainers/\n\nPure-Python Databases\n.....................\n\n* `ZODB`_ supports an isomorphic interface for database operations which means\n  there's little impact on your code to make objects persistent and there's no\n  database mapper that partially hides the datbase.\n* `CodernityDB`_ is an open source, pure-Python, multi-platform, schema-less,\n  NoSQL database and includes an HTTP server version, and a Python client\n  library that aims to be 100% compatible with the embedded version.\n* `TinyDB`_ is a tiny, document oriented database optimized for your\n  happiness. If you need a simple database with a clean API that just works\n  without lots of configuration, TinyDB might be the right choice for you.\n\n.. _`ZODB`: http://www.zodb.org/\n.. _`CodernityDB`: https://pypi.org/project/CodernityDB/\n.. _`TinyDB`: https://tinydb.readthedocs.io/\n\nObject Relational Mappings (ORM)\n................................\n\n* `Django ORM`_ provides models that are the single, definitive source of\n  information about data and contains the essential fields and behaviors of the\n  stored data. Generally, each model maps to a single SQL database table.\n* `SQLAlchemy`_ is the Python SQL toolkit and Object Relational Mapper that\n  gives application developers the full power and flexibility of SQL. It\n  provides a full suite of well known enterprise-level persistence patterns.\n* `Peewee`_ is a simple and small ORM. It has few (but expressive) concepts,\n  making it easy to learn and intuitive to use. Peewee supports Sqlite, MySQL,\n  and PostgreSQL with tons of extensions.\n* `SQLObject`_ is a popular Object Relational Manager for providing an object\n  interface to your database, with tables as classes, rows as instances, and\n  columns as attributes.\n* `Pony ORM`_ is a Python ORM with beautiful query syntax. Use Python syntax\n  for interacting with the database. Pony translates such queries into SQL and\n  executes them in the database in the most efficient way.\n\n.. _`Django ORM`: https://docs.djangoproject.com/en/dev/topics/db/\n.. _`SQLAlchemy`: https://www.sqlalchemy.org/\n.. _`Peewee`: http://docs.peewee-orm.com/\n.. _`SQLObject`: http://sqlobject.org/\n.. _`Pony ORM`: https://ponyorm.com/\n\nSQL Databases\n.............\n\n* `SQLite`_ is part of Python's standard library and provides a lightweight\n  disk-based database that doesn’t require a separate server process and allows\n  accessing the database using a nonstandard variant of the SQL query language.\n* `MySQL`_ is one of the world’s most popular open source databases and has\n  become a leading database choice for web-based applications. MySQL includes a\n  standardized database driver for Python platforms and development.\n* `PostgreSQL`_ is a powerful, open source object-relational database system\n  with over 30 years of active development. Psycopg is the most popular\n  PostgreSQL adapter for the Python programming language.\n* `Oracle DB`_ is a relational database management system (RDBMS) from the\n  Oracle Corporation. Originally developed in 1977, Oracle DB is one of the\n  most trusted and widely used enterprise relational database engines.\n* `Microsoft SQL Server`_ is a relational database management system developed\n  by Microsoft. As a database server, it stores and retrieves data as requested\n  by other software applications.\n\n.. _`SQLite`: https://docs.python.org/3/library/sqlite3.html\n.. _`MySQL`: https://dev.mysql.com/downloads/connector/python/\n.. _`PostgreSQL`: http://initd.org/psycopg/\n.. _`Oracle DB`: https://pypi.org/project/cx_Oracle/\n.. _`Microsoft SQL Server`: https://pypi.org/project/pyodbc/\n\nOther Databases\n...............\n\n* `Memcached`_ is free and open source, high-performance, distributed memory\n  object caching system, generic in nature, but intended for use in speeding up\n  dynamic web applications by alleviating database load.\n* `Redis`_ is an open source, in-memory data structure store, used as a\n  database, cache and message broker. It supports data structures such as\n  strings, hashes, lists, sets, sorted sets with range queries, and more.\n* `MongoDB`_ is a cross-platform document-oriented database program. Classified\n  as a NoSQL database program, MongoDB uses JSON-like documents with\n  schema. PyMongo is the recommended way to work with MongoDB from Python.\n* `LMDB`_ is a lightning-fast, memory-mapped database. With memory-mapped\n  files, it has the read performance of a pure in-memory database while\n  retaining the persistence of standard disk-based databases.\n* `BerkeleyDB`_ is a software library intended to provide a high-performance\n  embedded database for key/value data. Berkeley DB is a programmatic toolkit\n  that provides built-in database support for desktop and server applications.\n* `LevelDB`_ is a fast key-value storage library written at Google that\n  provides an ordered mapping from string keys to string values. Data is stored\n  sorted by key and users can provide a custom comparison function.\n\n.. _`Memcached`: https://pypi.org/project/python-memcached/\n.. _`MongoDB`: https://api.mongodb.com/python/current/\n.. _`Redis`: https://redis.io/clients#python\n.. _`LMDB`: https://lmdb.readthedocs.io/\n.. _`BerkeleyDB`: https://pypi.org/project/bsddb3/\n.. _`LevelDB`: https://plyvel.readthedocs.io/\n\nReference\n---------\n\n* `DiskCache Documentation`_\n* `DiskCache at PyPI`_\n* `DiskCache at GitHub`_\n* `DiskCache Issue Tracker`_\n\n.. _`DiskCache Documentation`: http://www.grantjenks.com/docs/diskcache/\n.. _`DiskCache at PyPI`: https://pypi.python.org/pypi/diskcache/\n.. _`DiskCache at GitHub`: https://github.com/grantjenks/python-diskcache/\n.. _`DiskCache Issue Tracker`: https://github.com/grantjenks/python-diskcache/issues/\n\nLicense\n-------\n\nCopyright 2016-2021 Grant Jenks\n\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License.  You may obtain a copy of the\nLicense at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed\nunder the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\nCONDITIONS OF ANY KIND, either express or implied. See the License for the\nspecific language governing permissions and limitations under the License.\n\n.. _`DiskCache`: http://www.grantjenks.com/docs/diskcache/\n\n\n",
          "name": "diskcache",
          "author": [
            {
              "type": "Person",
              "name": "Grant Jenks",
              "email": [
                "contact@grantjenks.com"
              ],
              "familyName": [
                "Jenks"
              ],
              "givenName": [
                "Grant"
              ]
            }
          ],
          "license": "Apache 2.0",
          "version": "==5.2.1",
          "codeRepository": "https://pypi.org/project/diskcache/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python"
        },
        {
          "type": "SoftwarePackage",
          "description": "Entry points are a way for Python packages to advertise objects with some\ncommon interface. The most common examples are ``console_scripts`` entry points,\nwhich define shell commands by identifying a Python function to run.\n\n*Groups* of entry points, such as ``console_scripts``, point to objects with\nsimilar interfaces. An application might use a group to find its plugins, or\nmultiple groups if it has different kinds of plugins.\n\nThe **entrypoints** module contains functions to find and load entry points.\nYou can install it from PyPI with ``pip install entrypoints``.\n\nTo advertise entry points when distributing a package, see\n`entry_points in the Python Packaging User Guide\n<https://packaging.python.org/en/latest/distributing.html#entry-points>`_.\n",
          "name": "entrypoints",
          "author": [
            {
              "type": "Person",
              "name": "Thomas Kluyver",
              "email": [
                "thomas@kluyver.me.uk"
              ],
              "familyName": [
                "Kluyver"
              ],
              "givenName": [
                "Thomas"
              ]
            }
          ],
          "version": "==0.3",
          "codeRepository": "https://pypi.org/project/entrypoints/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python"
        },
        {
          "type": "SoftwarePackage",
          "name": "Escher",
          "author": [
            {
              "type": "Person",
              "name": "Zachary King",
              "familyName": [
                "King"
              ],
              "givenName": [
                "Zachary"
              ]
            }
          ],
          "keywords": "visualization,pathway map,metabolism,genome-scale-model,web application,D3.js,biojs",
          "license": "MIT",
          "version": "==1.7.3",
          "codeRepository": "https://pypi.org/project/Escher/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python",
          "applicationCategory": [
            "Scientific/Engineering"
          ],
          "applicationSubCategory": [
            "Visualization"
          ]
        },
        {
          "type": "SoftwarePackage",
          "description": "future: Easy, safe support for Python 2/3 compatibility\n=======================================================\n\n``future`` is the missing compatibility layer between Python 2 and Python\n3. It allows you to use a single, clean Python 3.x-compatible codebase to\nsupport both Python 2 and Python 3 with minimal overhead.\n\nIt is designed to be used as follows::\n\n    from __future__ import (absolute_import, division,\n                            print_function, unicode_literals)\n    from builtins import (\n             bytes, dict, int, list, object, range, str,\n             ascii, chr, hex, input, next, oct, open,\n             pow, round, super,\n             filter, map, zip)\n\nfollowed by predominantly standard, idiomatic Python 3 code that then runs\nsimilarly on Python 2.6/2.7 and Python 3.3+.\n\nThe imports have no effect on Python 3. On Python 2, they shadow the\ncorresponding builtins, which normally have different semantics on Python 3\nversus 2, to provide their Python 3 semantics.\n\n\nStandard library reorganization\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``future`` supports the standard library reorganization (PEP 3108) through the\nfollowing Py3 interfaces:\n\n    >>> # Top-level packages with Py3 names provided on Py2:\n    >>> import html.parser\n    >>> import queue\n    >>> import tkinter.dialog\n    >>> import xmlrpc.client\n    >>> # etc.\n\n    >>> # Aliases provided for extensions to existing Py2 module names:\n    >>> from future.standard_library import install_aliases\n    >>> install_aliases()\n\n    >>> from collections import Counter, OrderedDict   # backported to Py2.6\n    >>> from collections import UserDict, UserList, UserString\n    >>> import urllib.request\n    >>> from itertools import filterfalse, zip_longest\n    >>> from subprocess import getoutput, getstatusoutput\n\n\nAutomatic conversion\n--------------------\n\nAn included script called `futurize\n<http://python-future.org/automatic_conversion.html>`_ aids in converting\ncode (from either Python 2 or Python 3) to code compatible with both\nplatforms. It is similar to ``python-modernize`` but goes further in\nproviding Python 3 compatibility through the use of the backported types\nand builtin functions in ``future``.\n\n\nDocumentation\n-------------\n\nSee: http://python-future.org\n\n\nCredits\n-------\n\n:Author:  Ed Schofield, Jordan M. Adler, et al\n:Sponsor: Python Charmers Pty Ltd, Australia, and Python Charmers Pte\n          Ltd, Singapore. http://pythoncharmers.com\n:Others:  See docs/credits.rst or http://python-future.org/credits.html\n\n\nLicensing\n---------\nCopyright 2013-2019 Python Charmers Pty Ltd, Australia.\nThe software is distributed under an MIT licence. See LICENSE.txt.",
          "name": "future",
          "author": [
            {
              "type": "Person",
              "name": "Ed Schofield",
              "email": [
                "ed@pythoncharmers.com"
              ],
              "familyName": [
                "Schofield"
              ],
              "givenName": [
                "Ed"
              ]
            }
          ],
          "keywords": "future past python3 migration futurize backport six 2to3 modernize pasteurize 3to2",
          "license": "MIT",
          "version": "==0.18.2",
          "codeRepository": "https://pypi.org/project/future/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python"
        },
        {
          "type": "SoftwarePackage",
          "description": "# Tools for Gene Ontology\n\n[![DOI](/doc/images/DOI.svg)](https://www.nature.com/articles/s41598-018-28948-z)\n[![Latest PyPI version](https://img.shields.io/pypi/v/goatools.svg)](https://pypi.python.org/pypi/goatools)\n[![bioconda](https://img.shields.io/badge/install%20with-bioconda-brightgreen.svg?style=flat)](http://bioconda.github.io/recipes/goatools/README.html?highlight=goatools)\n[![Github Actions](https://github.com/tanghaibao/goatools/workflows/build/badge.svg)](https://github.com/tanghaibao/goatools/actions)\n[![Downloads](https://pepy.tech/badge/goatools)](https://pepy.tech/project/goatools)\n\n|         |                                                                       |\n| ------- | --------------------------------------------------------------------- |\n| Authors | Haibao Tang ([tanghaibao](http://github.com/tanghaibao))              |\n|         | DV Klopfenstein ([dvklopfenstein](https://github.com/dvklopfenstein)) |\n|         | Brent Pedersen ([brentp](http://github.com/brentp))                   |\n|         | Fidel Ramirez ([fidelram](https://github.com/fidelram))               |\n|         | Aurelien Naldi ([aurelien-naldi](http://github.com/aurelien-naldi))   |\n|         | Patrick Flick ([patflick](http://github.com/patflick))                |\n|         | Jeff Yunes ([yunesj](http://github.com/yunesj))                       |\n|         | Kenta Sato ([bicycle1885](http://github.com/bicycle1885))             |\n|         | Chris Mungall ([cmungall](https://github.com/cmungall))               |\n|         | Greg Stupp ([stuppie](https://github.com/stuppie))                    |\n|         | David DeTomaso ([deto](https://github.com/deto))                      |\n|         | Olga Botvinnik ([olgabot](https://github.com/olgabot))                |\n| Email   | <tanghaibao@gmail.com>                                                |\n| License | BSD                                                                   |\n\n## Description\n\nThis package contains a Python library to\n\n- Process over- and under-representation of certain GO terms, based on\n  Fisher's exact test. With numerous multiple correction routines\n  including locally implemented routines for Bonferroni, Sidak, Holm,\n  and false discovery rate. Also included are multiple test\n  corrections from\n  [statsmodels](http://www.statsmodels.org/stable/index.html): FDR\n  Benjamini/Hochberg, FDR Benjamini/Yekutieli, Holm-Sidak,\n  Simes-Hochberg, Hommel, FDR 2-stage Benjamini-Hochberg, FDR 2-stage\n  Benjamini-Krieger-Yekutieli, FDR adaptive Gavrilov-Benjamini-Sarkar,\n  Bonferroni, Sidak, and Holm.\n\n- Process the obo-formatted file from [Gene Ontology\n  website](http://geneontology.org). The data structure is a directed\n  acyclic graph (DAG) that allows easy traversal from leaf to root.\n\n- Read [GO Association files](http://geneontology.org/page/go-annotation-file-formats):\n\n  - GAF ([GO Annotation\n    File](http://geneontology.org/page/go-annotation-file-gaf-format-21))\n  - GPAD ([Gene Product Association Data](https://geneontology.github.io/docs/gene-product-association-data-gpad-format/))\n  - NCBI's gene2go file\n  - id2gos format. See [example](https://raw.githubusercontent.com/tanghaibao/goatools/main/data/association)\n\n- [Print **_decendants count_** and/or **_information content_**](/notebooks/dcnt_and_tinfo.ipynb)\n  for a list of GO terms\n\n- [Get parents or ancestors for a GO term with or without optional\n  relationships](notebooks/parents_and_ancestors.ipynb), including [Print details about a\n  GO ID's parents](notebooks/parent_go_terms.ipynb)\n\n- Compare two or more lists of GO IDs\n- [Plot GO hierarchies](https://github.com/tanghaibao/goatools#plot-go-lineage)\n- [Write GO hierarchies to an ASCII text file](https://github.com/tanghaibao/goatools#write-go-hierarchy)\n- Group GO terms for easier viewing\n\n- Map GO terms (or protein products with multiple associations to\n  GO terms) to GOslim terms (analog to the map2slim.pl script supplied\n  by geneontology.org)\n\n## To Cite\n\nKlopfenstein DV, Zhang L, Pedersen BS, ... Tang H [GOATOOLS: A Python library for Gene Ontology analyses](https://www.nature.com/articles/s41598-018-28948-z)\n_Scientific reports_ | (2018) 8:10872 | DOI:10.1038/s41598-018-28948-z\n\n- **GO Grouping**:\n  Visualize the major findings in a gene ontology enrichment analysis (GEOA) more easily with grouping.\n  A detailed description of GOATOOLS GO grouping is found in the\n  [manuscript](https://www.nature.com/articles/s41598-018-28948-z).\n- **Compare GO lists**:\n  Compare [two](https://github.com/tanghaibao/goatools/issues/162) or more lists\n  of GO IDs using `compare_gos.py`, which can be used with or without\n  grouping.\n- **Stochastic GOEA simulations**:\n  One of the findings resulting from our simulations is:\n  [Larger study sizes result in higher GOEA sensitivity](https://github.com/dvklopfenstein/goatools_simulation#manuscript-figures),\n  meaning fewer truly significant observations go unreported.\n  The code for the stochastic GOEA simulations\n  described in the paper is found [here](https://github.com/dvklopfenstein/goatools_simulation)\n\n## Installation\n\nMake sure your Python version >= 3.7, install the latest stable\nversion via PyPI:\n\n```bash\npip install goatools\n```\n\nTo install the development version:\n\n```bash\npip install git+git://github.com/tanghaibao/goatools.git\n```\n\n`.obo` file for the most current\n[GO](http://geneontology.org/page/download-ontology):\n\n```bash\nwget http://geneontology.org/ontology/go-basic.obo\n```\n\n`.obo` file for the most current [GO\nSlim](http://geneontology.org/page/go-slim-and-subset-guide) terms (e.g.\ngeneric GOslim) :\n\n```bash\nwget http://www.geneontology.org/ontology/subsets/goslim_generic.obo\n```\n\n## Dependencies\n\n- Simplest is to install via pip as above or\n  [bioconda](http://bioconda.github.io/recipes/goatools/README.html?highlight=goatools).\n\n- To calculate the uncorrected p-values, there are currently two options:\n\n  - [`scipy.stats.fisher_exact`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.fisher_exact.html)\n  - `statsmodels` (optional) for access to a variety of statistical tests for GOEA\n\n- To plot the ontology lineage, install one of these two options:\n\n  - [Graphviz](http://www.graphviz.org/), for graph visualization.\n  - [pygraphviz](http://networkx.lanl.gov/pygraphviz/), Python binding for communicating with Graphviz:\n  - [pydot](https://code.google.com/p/pydot/), a Python interface to Graphviz's Dot language.\n\n## Cookbook\n\n`run.sh` contains example cases, which calls the utility scripts in the\n`scripts` folder.\n\n### Find GO enrichment of genes under study\n\nSee examples in [find_enrichment](/doc/md/README_find_enrichment.md)\n\nThe `find_enrichment.py` takes as arguments files\ncontaining:\n\n- gene names in a study\n- gene names in population (or other study if `--compare` is specified)\n- an association file that maps a gene name to a GO category.\n\nPlease look at `tests/data` folder to see examples on how to make these\nfiles. when ready, the command looks like:\n\n```bash\npython scripts/find_enrichment.py --pval=0.05 --indent data/study \\\n                                  data/population data/association\n```\n\nand can filter on the significance of (e)nrichment or (p)urification. it\ncan report various multiple testing corrected p-values as well as the\nfalse discovery rate.\n\nThe `e` in the \"Enrichment\" column means \"enriched\" - the concentration\nof GO term in the study group is significantly _higher_ than those in\nthe population. The \"p\" stands for \"purified\" - significantly _lower_\nconcentration of the GO term in the study group than in the population.\n\n**Important note**: by default, `find_enrichment.py` propagates counts\nto all the parents of a GO term. As a result, users may find terms in\nthe output that are not present in their `association` file. Use\n`--no_propagate_counts` to disable this behavior.\n\n### Write GO hierarchy\n\n- [`wr_hier.py`](doc/md/README_wr_hier.md): Given a GO ID, write the hierarchy below (default)\n  or above (`--up`) the given GO.\n\n### Plot GO lineage\n\n- [`go_plot.py`](doc/md/README_go_plot.md):\n  - Plots user-specified GO term(s) up to root\n  - Multiple user-specified GOs\n  - User-defined colors\n  - Plot relationships (`-r`)\n  - Optionally plot children of user-specfied GO terms\n- `plot_go_term.py` can plot the lineage\nof a certain GO term, by:\n\n```bash\npython scripts/plot_go_term.py --term=GO:0008135\n```\n\nThis command will plot the following image.\n\n![GO term lineage](https://www.dropbox.com/s/4zbqx8sqcls3mge/gograph.png?raw=1)\n\nSometimes people like to stylize the graph themselves, use option\n`--gml` to generate a GML output which can then be used in an external\ngraph editing software like [Cytoscape](http://www.cytoscape.org/). The\nfollowing image is produced by importing the GML file into Cytoscape\nusing yFile orthogonal layout and solid VizMapping. Note that the [GML\nreader plugin](https://code.google.com/p/graphmlreader/) may need to be\ndownloaded and installed in the `plugins` folder of Cytoscape:\n\n```bash\npython scripts/plot_go_term.py --term=GO:0008135 --gml\n```\n\n![GO term lineage (Cytoscape)](https://www.dropbox.com/s/ueov2ioxl063q8h/gograph-gml.png?raw=1)\n\n### Map GO terms to GOslim terms\n\nSee `map_to_slim.py` for usage. As arguments it takes the gene ontology\nfiles:\n\n- the current gene ontology file `go-basic.obo`\n- the GOslim file to be used (e.g. `goslim_generic.obo` or any other GOslim file)\n\nThe script either maps one GO term to its GOslim terms, or protein\nproducts with multiple associations to all its GOslim terms.\n\nTo determine the GOslim terms for a single GO term, you can use the\nfollowing command:\n\n```bash\npython scripts/map_to_slim.py --term=GO:0008135 go-basic.obo goslim_generic.obo\n```\n\nTo determine the GOslim terms for protein products with multiple\nassociations:\n\n```bash\npython scripts/map_to_slim.py --association_file=data/association go-basic.obo goslim_generic.obo\n```\n\nWhere the `association` file has the same format as used for\n`find_enrichment.py`.\n\nThe implementation is similar to\n[map2slim](http://search.cpan.org/~cmungall/go-perl/scripts/map2slim).\n\n## Technical notes\n\n### Available statistical tests for calculating uncorrected p-values\n\nThere are currently two fisher tests available for calculating uncorrected\np-values. Both fisher options from the fisher package and SciPy's stats package\ncalculate the same pvalues, but provide the user an option in installing\npackages.\n\n- [`scipy.stats.fisher_exact`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.fisher_exact.html)\n\n### Available multiple test corrections\n\nWe have implemented several significance tests:\n\n- `bonferroni`, bonferroni correction\n- `sidak`, sidak correction\n- `holm`, hold correction\n- `fdr`, false discovery rate (fdr) implementation using resampling\n\nAdditional methods are available if `statsmodels` is installed:\n\n- `sm_bonferroni`, bonferroni one-step correction\n- `sm_sidak`, sidak one-step correction\n- `sm_holm-sidak`, holm-sidak step-down method using Sidak adjustments\n- `sm_holm`, holm step-down method using Bonferroni adjustments\n- `simes-hochberg`, simes-hochberg step-up method (independent)\n- `hommel`, hommel closed method based on Simes tests (non-negative)\n- `fdr_bh`, fdr correction with Benjamini/Hochberg (non-negative)\n- `fdr_by`, fdr correction with Benjamini/Yekutieli (negative)\n- `fdr_tsbh`, two stage fdr correction (non-negative)\n- `fdr_tsbky`, two stage fdr correction (non-negative)\n- `fdr_gbs`, fdr adaptive Gavrilov-Benjamini-Sarkar\n\nIn total 15 tests are available, which can be selected using option\n`--method`. Please note that the default FDR (`fdr`) uses a resampling\nstrategy which may lead to slightly different q-values between runs.\n\n## iPython [Notebooks](notebooks)\n\n### Optional attributes\n\n[definition](notebooks/Optional_attribute_definition.ipynb)\n\n### Run a Gene Ontology Enrichment Analysis (GOEA)\n\n[goea_nbt3102](notebooks/goea_nbt3102.ipynb)\n\n### Show many study genes are associated with RNA, translation, mitochondria, and ribosomal\n\n[goea_nbt3102_group_results](notebooks/goea_nbt3102_group_results.ipynb)\n\n### Report level and depth counts of a set of GO terms\n\n[report_depth_level](notebooks/report_depth_level.ipynb)\n\n### Find all human protein-coding genes associated with cell cycle\n\n[cell_cycle](notebooks/cell_cycle.ipynb)\n\n### Calculate annotation coverage of GO terms on various species\n\n[annotation_coverage](notebooks/annotation_coverage.ipynb)\n\n### Determine the semantic similarities between GO terms\n\n[semantic_similarity](notebooks/semantic_similarity.ipynb) [semantic_similarity_wang](notebooks/semantic_similarity_wang.ipynb)\n\n### Obsolete GO terms are loaded upon request\n\n[godag_obsolete_terms](notebooks/godag_obsolete_terms.ipynb)\n\n## Want to Help?\n\nPrior to submitting your pull request, please add a test which verifies your code, and run:\n\n```console\nmake test\n```\n\nItems that we know we need include:\n\n- Add code coverage runs\n- Edit tests in the `makefile` under the comment\n- Help setting up [documentation](http://goatools.readthedocs.io/en/latest/). We\n  are using Sphinx and Python docstrings to create documentation.\n  For documentation practice, use make targets:\n\n  ```bash\n  make mkdocs_practice\n  ```\n\n  To remove practice documentation:\n\n  ```bash\n  make rmdocs_practice\n  ```\n\n  Once you are happy with the documentation do:\n\n  ```bash\n  make gh-pages\n  ```\n\nCopyright (C) 2010-2021, Haibao Tang et al. All rights reserved.",
          "name": "goatools",
          "author": [
            {
              "type": "Person",
              "name": "Haibao Tang,",
              "familyName": [
                "Tang,"
              ],
              "givenName": [
                "Haibao"
              ]
            }
          ],
          "license": "BSD",
          "codeRepository": "https://pypi.org/project/goatools/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python",
          "applicationCategory": [
            "Scientific/Engineering"
          ],
          "applicationSubCategory": [
            "Bio-Informatics"
          ]
        },
        {
          "type": "SoftwarePackage",
          "description": "h11\n===\n\n.. image:: https://travis-ci.org/python-hyper/h11.svg?branch=master\n   :target: https://travis-ci.org/python-hyper/h11\n   :alt: Automated test status\n\n.. image:: https://codecov.io/gh/python-hyper/h11/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/python-hyper/h11\n   :alt: Test coverage\n\n.. image:: https://readthedocs.org/projects/h11/badge/?version=latest\n   :target: http://h11.readthedocs.io/en/latest/?badge=latest\n   :alt: Documentation Status\n\nThis is a little HTTP/1.1 library written from scratch in Python,\nheavily inspired by `hyper-h2 <https://hyper-h2.readthedocs.io/>`_.\n\nIt's a \"bring-your-own-I/O\" library; h11 contains no IO code\nwhatsoever. This means you can hook h11 up to your favorite network\nAPI, and that could be anything you want: synchronous, threaded,\nasynchronous, or your own implementation of `RFC 6214\n<https://tools.ietf.org/html/rfc6214>`_ -- h11 won't judge you.\n(Compare this to the current state of the art, where every time a `new\nnetwork API <https://trio.readthedocs.io/>`_ comes along then someone\ngets to start over reimplementing the entire HTTP protocol from\nscratch.) Cory Benfield made an `excellent blog post describing the\nbenefits of this approach\n<https://lukasa.co.uk/2015/10/The_New_Hyper/>`_, or if you like video\nthen here's his `PyCon 2016 talk on the same theme\n<https://www.youtube.com/watch?v=7cC3_jGwl_U>`_.\n\nThis also means that h11 is not immediately useful out of the box:\nit's a toolkit for building programs that speak HTTP, not something\nthat could directly replace ``requests`` or ``twisted.web`` or\nwhatever. But h11 makes it much easier to implement something like\n``requests`` or ``twisted.web``.\n\nAt a high level, working with h11 goes like this:\n\n1) First, create an ``h11.Connection`` object to track the state of a\n   single HTTP/1.1 connection.\n\n2) When you read data off the network, pass it to\n   ``conn.receive_data(...)``; you'll get back a list of objects\n   representing high-level HTTP \"events\".\n\n3) When you want to send a high-level HTTP event, create the\n   corresponding \"event\" object and pass it to ``conn.send(...)``;\n   this will give you back some bytes that you can then push out\n   through the network.\n\nFor example, a client might instantiate and then send a\n``h11.Request`` object, then zero or more ``h11.Data`` objects for the\nrequest body (e.g., if this is a POST), and then a\n``h11.EndOfMessage`` to indicate the end of the message. Then the\nserver would then send back a ``h11.Response``, some ``h11.Data``, and\nits own ``h11.EndOfMessage``. If either side violates the protocol,\nyou'll get a ``h11.ProtocolError`` exception.\n\nh11 is suitable for implementing both servers and clients, and has a\npleasantly symmetric API: the events you send as a client are exactly\nthe ones that you receive as a server and vice-versa.\n\n`Here's an example of a tiny HTTP client\n<https://github.com/python-hyper/h11/blob/master/examples/basic-client.py>`_\n\nIt also has `a fine manual <https://h11.readthedocs.io/>`_.\n\nFAQ\n---\n\n*Whyyyyy?*\n\nI wanted to play with HTTP in `Curio\n<https://curio.readthedocs.io/en/latest/tutorial.html>`__ and `Trio\n<https://trio.readthedocs.io>`__, which at the time didn't have any\nHTTP libraries. So I thought, no big deal, Python has, like, a dozen\ndifferent implementations of HTTP, surely I can find one that's\nreusable. I didn't find one, but I did find Cory's call-to-arms\nblog-post. So I figured, well, fine, if I have to implement HTTP from\nscratch, at least I can make sure no-one *else* has to ever again.\n\n*Should I use it?*\n\nMaybe. You should be aware that it's a very young project. But, it's\nfeature complete and has an exhaustive test-suite and complete docs,\nso the next step is for people to try using it and see how it goes\n:-). If you do then please let us know -- if nothing else we'll want\nto talk to you before making any incompatible changes!\n\n*What are the features/limitations?*\n\nRoughly speaking, it's trying to be a robust, complete, and non-hacky\nimplementation of the first \"chapter\" of the HTTP/1.1 spec: `RFC 7230:\nHTTP/1.1 Message Syntax and Routing\n<https://tools.ietf.org/html/rfc7230>`_. That is, it mostly focuses on\nimplementing HTTP at the level of taking bytes on and off the wire,\nand the headers related to that, and tries to be anal about spec\nconformance. It doesn't know about higher-level concerns like URL\nrouting, conditional GETs, cross-origin cookie policies, or content\nnegotiation. But it does know how to take care of framing,\ncross-version differences in keep-alive handling, and the \"obsolete\nline folding\" rule, so you can focus your energies on the hard /\ninteresting parts for your application, and it tries to support the\nfull specification in the sense that any useful HTTP/1.1 conformant\napplication should be able to use h11.\n\nIt's pure Python, and has no dependencies outside of the standard\nlibrary.\n\nIt has a test suite with 100.0% coverage for both statements and\nbranches.\n\nCurrently it supports Python 3 (testing on 3.6-3.9) and PyPy 3.\nThe last Python 2-compatible version was h11 0.11.x.\n(Originally it had a Cython wrapper for `http-parser\n<https://github.com/nodejs/http-parser>`_ and a beautiful nested state\nmachine implemented with ``yield from`` to postprocess the output. But\nI had to take these out -- the new *parser* needs fewer lines-of-code\nthan the old *parser wrapper*, is written in pure Python, uses no\nexotic language syntax, and has more features. It's sad, really; that\nold state machine was really slick. I just need a few sentences here\nto mourn that.)\n\nI don't know how fast it is. I haven't benchmarked or profiled it yet,\nso it's probably got a few pointless hot spots, and I've been trying\nto err on the side of simplicity and robustness instead of\nmicro-optimization. But at the architectural level I tried hard to\navoid fundamentally bad decisions, e.g., I believe that all the\nparsing algorithms remain linear-time even in the face of pathological\ninput like slowloris, and there are no byte-by-byte loops. (I also\nbelieve that it maintains bounded memory usage in the face of\narbitrary/pathological input.)\n\nThe whole library is ~800 lines-of-code. You can read and understand\nthe whole thing in less than an hour. Most of the energy invested in\nthis so far has been spent on trying to keep things simple by\nminimizing special-cases and ad hoc state manipulation; even though it\nis now quite small and simple, I'm still annoyed that I haven't\nfigured out how to make it even smaller and simpler. (Unfortunately,\nHTTP does not lend itself to simplicity.)\n\nThe API is ~feature complete and I don't expect the general outlines\nto change much, but you can't judge an API's ergonomics until you\nactually document and use it, so I'd expect some changes in the\ndetails.\n\n*How do I try it?*\n\n.. code-block:: sh\n\n  $ pip install h11\n  $ git clone git@github.com:python-hyper/h11\n  $ cd h11/examples\n  $ python basic-client.py\n\nand go from there.\n\n*License?*\n\nMIT\n\n*Code of conduct?*\n\nContributors are requested to follow our `code of conduct\n<https://github.com/python-hyper/h11/blob/master/CODE_OF_CONDUCT.md>`_ in\nall project spaces.\n\n\n",
          "name": "h11",
          "author": [
            {
              "type": "Person",
              "name": "Nathaniel J.",
              "familyName": [
                "J."
              ],
              "givenName": [
                "Nathaniel"
              ]
            }
          ],
          "license": "MIT",
          "version": "==0.12.0",
          "codeRepository": "https://pypi.org/project/h11/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python",
          "applicationCategory": [
            "Internet",
            "System"
          ],
          "applicationSubCategory": [
            "WWW/HTTP",
            "Networking"
          ]
        },
        {
          "type": "SoftwarePackage",
          "description": "# HTTP Core\n\n[![Test Suite](https://github.com/encode/httpcore/workflows/Test%20Suite/badge.svg)](https://github.com/encode/httpcore/actions)\n[![Package version](https://badge.fury.io/py/httpcore.svg)](https://pypi.org/project/httpcore/)\n\n> *Do one thing, and do it well.*\n\nThe HTTP Core package provides a minimal low-level HTTP client, which does\none thing only. Sending HTTP requests.\n\nIt does not provide any high level model abstractions over the API,\ndoes not handle redirects, multipart uploads, building authentication headers,\ntransparent HTTP caching, URL parsing, session cookie handling,\ncontent or charset decoding, handling JSON, environment based configuration\ndefaults, or any of that Jazz.\n\nSome things HTTP Core does do:\n\n* Sending HTTP requests.\n* Provides both sync and async interfaces.\n* Supports HTTP/1.1 and HTTP/2.\n* Async backend support for `asyncio`, `trio` and `curio`.\n* Automatic connection pooling.\n* HTTP(S) proxy support.\n\n## Installation\n\nFor HTTP/1.1 only support, install with...\n\n```shell\n$ pip install httpcore\n```\n\nFor HTTP/1.1 and HTTP/2 support, install with...\n\n```shell\n$ pip install httpcore[http2]\n```\n\n## Quickstart\n\nHere's an example of making an HTTP GET request using `httpcore`...\n\n```python\nwith httpcore.SyncConnectionPool() as http:\n    status_code, headers, stream, extensions = http.handle_request(\n        method=b'GET',\n        url=(b'https', b'example.org', 443, b'/'),\n        headers=[(b'host', b'example.org'), (b'user-agent', b'httpcore')],\n        stream=httpcore.ByteStream(b''),\n        extensions={}\n    )\n    body = stream.read()\n    print(status_code, body)\n```\n\nOr, using async...\n\n```python\nasync with httpcore.AsyncConnectionPool() as http:\n    status_code, headers, stream, extensions = await http.handle_async_request(\n        method=b'GET',\n        url=(b'https', b'example.org', 443, b'/'),\n        headers=[(b'host', b'example.org'), (b'user-agent', b'httpcore')],\n        stream=httpcore.ByteStream(b''),\n        extensions={}\n    )\n    body = await stream.aread()\n    print(status_code, body)\n```\n\n## Motivation\n\nYou probably don't want to be using HTTP Core directly. It might make sense if\nyou're writing something like a proxy service in Python, and you just want\nsomething at the lowest possible level, but more typically you'll want to use\na higher level client library, such as `httpx`.\n\nThe motivation for `httpcore` is:\n\n* To provide a reusable low-level client library, that other packages can then build on top of.\n* To provide a *really clear interface split* between the networking code and client logic,\n  so that each is easier to understand and reason about in isolation.\n\n\n# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/).\n\n## 0.13.4 (June 9th, 2021)\n\n### Added\n\n- Improved error messaging when URL scheme is missing, or a non HTTP(S) scheme is used. (Pull ##354)\n\n### Fixed\n\n- Switched to `anyio` as the default backend implementation when running with `asyncio`. Resolves some awkward [TLS timeout issues](https://github.com/encode/httpx/discussions/1511).\n\n## 0.13.3 (May 6th, 2021)\n\n### Added\n\n- Support HTTP/2 prior knowledge, using `httpcore.SyncConnectionPool(http1=False)`. (Pull #333)\n\n### Fixed\n\n- Handle cases where environment does not provide `select.poll` support. (Pull #331)\n\n## 0.13.2 (April 29th, 2021)\n\n### Added\n\n- Improve error message for specific case of `RemoteProtocolError` where server disconnects without sending a response. (Pull #313)\n\n## 0.13.1 (April 28th, 2021)\n\n### Fixed\n\n- More resiliant testing for closed connections. (Pull #311)\n- Don't raise exceptions on ungraceful connection closes. (Pull #310)\n\n## 0.13.0 (April 21st, 2021)\n\nThe 0.13 release updates the core API in order to match the HTTPX Transport API,\nintroduced in HTTPX 0.18 onwards.\n\nAn example of making requests with the new interface is:\n\n```python\nwith httpcore.SyncConnectionPool() as http:\n    status_code, headers, stream, extensions = http.handle_request(\n        method=b'GET',\n        url=(b'https', b'example.org', 443, b'/'),\n        headers=[(b'host', b'example.org'), (b'user-agent', b'httpcore')]\n        stream=httpcore.ByteStream(b''),\n        extensions={}\n    )\n    body = stream.read()\n    print(status_code, body)\n```\n\n### Changed\n\n- The `.request()` method is now `handle_request()`. (Pull #296)\n- The `.arequest()` method is now `.handle_async_request()`. (Pull #296)\n- The `headers` argument is no longer optional. (Pull #296)\n- The `stream` argument is no longer optional. (Pull #296)\n- The `ext` argument is now named `extensions`, and is no longer optional. (Pull #296)\n- The `\"reason\"` extension keyword is now named `\"reason_phrase\"`. (Pull #296)\n- The `\"reason_phrase\"` and `\"http_version\"` extensions now use byte strings for their values. (Pull #296)\n- The `httpcore.PlainByteStream()` class becomes `httpcore.ByteStream()`. (Pull #296)\n\n### Added\n\n- Streams now support a `.read()` interface. (Pull #296)\n\n### Fixed\n\n- Task cancelation no longer leaks connections from the connection pool. (Pull #305)\n\n## 0.12.3 (December 7th, 2020)\n\n### Fixed\n\n- Abort SSL connections on close rather than waiting for remote EOF when using `asyncio`.  (Pull #167)\n- Fix exception raised in case of connect timeouts when using the `anyio` backend. (Pull #236)\n- Fix `Host` header precedence for `:authority` in HTTP/2. (Pull #241, #243)\n- Handle extra edge case when detecting for socket readability when using `asyncio`. (Pull #242, #244)\n- Fix `asyncio` SSL warning when using proxy tunneling. (Pull #249)\n\n## 0.12.2 (November 20th, 2020)\n\n### Fixed\n\n- Properly wrap connect errors on the asyncio backend. (Pull #235)\n- Fix `ImportError` occurring on Python 3.9 when using the HTTP/1.1 sync client in a multithreaded context. (Pull #237)\n\n## 0.12.1 (November 7th, 2020)\n\n### Added\n\n- Add connect retries. (Pull #221)\n\n### Fixed\n\n- Tweak detection of dropped connections, resolving an issue with open files limits on Linux. (Pull #185)\n- Avoid leaking connections when establishing an HTTP tunnel to a proxy has failed. (Pull #223)\n- Properly wrap OS errors when using `trio`. (Pull #225)\n\n## 0.12.0 (October 6th, 2020)\n\n### Changed\n\n- HTTP header casing is now preserved, rather than always sent in lowercase. (#216 and python-hyper/h11#104)\n\n### Added\n\n- Add Python 3.9 to officially supported versions.\n\n### Fixed\n\n- Gracefully handle a stdlib asyncio bug when a connection is closed while it is in a paused-for-reading state. (#201)\n\n## 0.11.1 (September 28nd, 2020)\n\n### Fixed\n\n- Add await to async semaphore release() coroutine (#197)\n- Drop incorrect curio classifier (#192)\n\n## 0.11.0 (September 22nd, 2020)\n\nThe Transport API with 0.11.0 has a couple of significant changes.\n\nFirstly we've moved changed the request interface in order to allow extensions, which will later enable us to support features\nsuch as trailing headers, HTTP/2 server push, and CONNECT/Upgrade connections.\n\nThe interface changes from:\n\n```python\ndef request(method, url, headers, stream, timeout):\n    return (http_version, status_code, reason, headers, stream)\n```\n\nTo instead including an optional dictionary of extensions on the request and response:\n\n```python\ndef request(method, url, headers, stream, ext):\n    return (status_code, headers, stream, ext)\n```\n\nHaving an open-ended extensions point will allow us to add later support for various optional features, that wouldn't otherwise be supported without these API changes.\n\nIn particular:\n\n* Trailing headers support.\n* HTTP/2 Server Push\n* sendfile.\n* Exposing raw connection on CONNECT, Upgrade, HTTP/2 bi-di streaming.\n* Exposing debug information out of the API, including template name, template context.\n\nCurrently extensions are limited to:\n\n* request: `timeout` - Optional. Timeout dictionary.\n* response: `http_version` - Optional. Include the HTTP version used on the response.\n* response: `reason` - Optional. Include the reason phrase used on the response. Only valid with HTTP/1.*.\n\nSee https://github.com/encode/httpx/issues/1274#issuecomment-694884553 for the history behind this.\n\nSecondly, the async version of `request` is now namespaced as `arequest`.\n\nThis allows concrete transports to support both sync and async implementations on the same class.\n\n### Added\n\n- Add curio support. (Pull #168)\n- Add anyio support, with `backend=\"anyio\"`. (Pull #169)\n\n### Changed\n\n- Update the Transport API to use 'ext' for optional extensions. (Pull #190)\n- Update the Transport API to use `.request` and `.arequest` so implementations can support both sync and async. (Pull #189)\n\n## 0.10.2 (August 20th, 2020)\n\n### Added\n\n- Added Unix Domain Socket support. (Pull #139)\n\n### Fixed\n\n- Always include the port on proxy CONNECT requests. (Pull #154)\n- Fix `max_keepalive_connections` configuration. (Pull #153)\n- Fixes behaviour in HTTP/1.1 where server disconnects can be used to signal the end of the response body. (Pull #164)\n\n## 0.10.1 (August 7th, 2020)\n\n- Include `max_keepalive_connections` on `AsyncHTTPProxy`/`SyncHTTPProxy` classes.\n\n## 0.10.0 (August 7th, 2020)\n\nThe most notable change in the 0.10.0 release is that HTTP/2 support is now fully optional.\n\nUse either `pip install httpcore` for HTTP/1.1 support only, or `pip install httpcore[http2]` for HTTP/1.1 and HTTP/2 support.\n\n### Added\n\n- HTTP/2 support becomes optional. (Pull #121, #130)\n- Add `local_address=...` support. (Pull #100, #134)\n- Add `PlainByteStream`, `IteratorByteStream`, `AsyncIteratorByteStream`. The `AsyncByteSteam` and `SyncByteStream` classes are now pure interface classes. (#133)\n- Add `LocalProtocolError`, `RemoteProtocolError` exceptions. (Pull #129)\n- Add `UnsupportedProtocol` exception. (Pull #128)\n- Add `.get_connection_info()` method. (Pull #102, #137)\n- Add better TRACE logs. (Pull #101)\n\n### Changed\n\n- `max_keepalive` is deprecated in favour of `max_keepalive_connections`. (Pull #140)\n\n### Fixed\n\n- Improve handling of server disconnects. (Pull #112)\n\n## 0.9.1 (May 27th, 2020)\n\n### Fixed\n\n- Proper host resolution for sync case, including IPv6 support. (Pull #97)\n- Close outstanding connections when connection pool is closed. (Pull #98)\n\n## 0.9.0 (May 21th, 2020)\n\n### Changed\n\n- URL port becomes an `Optional[int]` instead of `int`. (Pull #92)\n\n### Fixed\n\n- Honor HTTP/2 max concurrent streams settings. (Pull #89, #90)\n- Remove incorrect debug log. (Pull #83)\n\n## 0.8.4 (May 11th, 2020)\n\n### Added\n\n- Logging via HTTPCORE_LOG_LEVEL and HTTPX_LOG_LEVEL environment variables\nand TRACE level logging. (Pull #79)\n\n### Fixed\n\n- Reuse of connections on HTTP/2 in close concurrency situations. (Pull #81)\n\n## 0.8.3 (May 6rd, 2020)\n\n### Fixed\n\n- Include `Host` and `Accept` headers on proxy \"CONNECT\" requests.\n- De-duplicate any headers also contained in proxy_headers.\n- HTTP/2 flag not being passed down to proxy connections.\n\n## 0.8.2 (May 3rd, 2020)\n\n### Fixed\n\n- Fix connections using proxy forwarding requests not being added to the\nconnection pool properly. (Pull #70)\n\n## 0.8.1 (April 30th, 2020)\n\n### Changed\n\n- Allow inherintance of both `httpcore.AsyncByteStream`, `httpcore.SyncByteStream` without type conflicts.\n\n## 0.8.0 (April 30th, 2020)\n\n### Fixed\n\n- Fixed tunnel proxy support.\n\n### Added\n\n- New `TimeoutException` base class.\n\n## 0.7.0 (March 5th, 2020)\n\n- First integration with HTTPX.\n\n\n",
          "name": "httpcore",
          "author": [
            {
              "type": "Person",
              "name": "Tom Christie",
              "email": [
                "tom@tomchristie.com"
              ],
              "familyName": [
                "Christie"
              ],
              "givenName": [
                "Tom"
              ]
            }
          ],
          "license": "BSD",
          "version": "==0.12.3",
          "codeRepository": "https://pypi.org/project/httpcore/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python",
          "applicationCategory": [
            "Internet"
          ],
          "applicationSubCategory": [
            "WWW/HTTP"
          ]
        },
        {
          "type": "SoftwarePackage",
          "description": "<p align=\"center\">\n  <a href=\"https://www.python-httpx.org/\"><img width=\"350\" height=\"208\" src=\"https://raw.githubusercontent.com/encode/httpx/master/docs/img/butterfly.png\" alt='HTTPX'></a>\n</p>\n\n<p align=\"center\"><strong>HTTPX</strong> <em>- A next-generation HTTP client for Python.</em></p>\n\n<p align=\"center\">\n<a href=\"https://github.com/encode/httpx/actions\">\n    <img src=\"https://github.com/encode/httpx/workflows/Test%20Suite/badge.svg\" alt=\"Test Suite\">\n</a>\n<a href=\"https://pypi.org/project/httpx/\">\n    <img src=\"https://badge.fury.io/py/httpx.svg\" alt=\"Package version\">\n</a>\n</p>\n\nHTTPX is a fully featured HTTP client for Python 3, which provides sync and async APIs, and support for both HTTP/1.1 and HTTP/2.\n\n**Note**: _HTTPX should be considered in beta. We believe we've got the public API to\na stable point now, but would strongly recommend pinning your dependencies to the `0.18.*`\nrelease, so that you're able to properly review [API changes between package updates](https://github.com/encode/httpx/blob/master/CHANGELOG.md). A 1.0 release is expected to be issued sometime in 2021._\n\n---\n\nLet's get started...\n\n```pycon\n>>> import httpx\n>>> r = httpx.get('https://www.example.org/')\n>>> r\n<Response [200 OK]>\n>>> r.status_code\n200\n>>> r.headers['content-type']\n'text/html; charset=UTF-8'\n>>> r.text\n'<!doctype html>\\n<html>\\n<head>\\n<title>Example Domain</title>...'\n```\n\nOr, using the async API...\n\n_Use [IPython](https://ipython.readthedocs.io/en/stable/) or Python 3.8+ with `python -m asyncio` to try this code interactively._\n\n```pycon\n>>> import httpx\n>>> async with httpx.AsyncClient() as client:\n...     r = await client.get('https://www.example.org/')\n...\n>>> r\n<Response [200 OK]>\n```\n\n## Features\n\nHTTPX builds on the well-established usability of `requests`, and gives you:\n\n* A broadly [requests-compatible API](https://www.python-httpx.org/compatibility/).\n* Standard synchronous interface, but with [async support if you need it](https://www.python-httpx.org/async/).\n* HTTP/1.1 [and HTTP/2 support](https://www.python-httpx.org/http2/).\n* Ability to make requests directly to [WSGI applications](https://www.python-httpx.org/advanced/#calling-into-python-web-apps) or [ASGI applications](https://www.python-httpx.org/async/#calling-into-python-web-apps).\n* Strict timeouts everywhere.\n* Fully type annotated.\n* 100% test coverage.\n\nPlus all the standard features of `requests`...\n\n* International Domains and URLs\n* Keep-Alive & Connection Pooling\n* Sessions with Cookie Persistence\n* Browser-style SSL Verification\n* Basic/Digest Authentication\n* Elegant Key/Value Cookies\n* Automatic Decompression\n* Automatic Content Decoding\n* Unicode Response Bodies\n* Multipart File Uploads\n* HTTP(S) Proxy Support\n* Connection Timeouts\n* Streaming Downloads\n* .netrc Support\n* Chunked Requests\n\n## Installation\n\nInstall with pip:\n\n```shell\n$ pip install httpx\n```\n\nOr, to include the optional HTTP/2 support, use:\n\n```shell\n$ pip install httpx[http2]\n```\n\nHTTPX requires Python 3.6+.\n\n## Documentation\n\nProject documentation is available at [https://www.python-httpx.org/](https://www.python-httpx.org/).\n\nFor a run-through of all the basics, head over to the [QuickStart](https://www.python-httpx.org/quickstart/).\n\nFor more advanced topics, see the [Advanced Usage](https://www.python-httpx.org/advanced/) section, the [async support](https://www.python-httpx.org/async/) section, or the [HTTP/2](https://www.python-httpx.org/http2/) section.\n\nThe [Developer Interface](https://www.python-httpx.org/api/) provides a comprehensive API reference.\n\nTo find out about tools that integrate with HTTPX, see [Third Party Packages](https://www.python-httpx.org/third-party-packages/).\n\n## Contribute\n\nIf you want to contribute with HTTPX check out the [Contributing Guide](https://www.python-httpx.org/contributing/) to learn how to start.\n\n## Dependencies\n\nThe HTTPX project relies on these excellent libraries:\n\n* `httpcore` - The underlying transport implementation for `httpx`.\n  * `h11` - HTTP/1.1 support.\n  * `h2` - HTTP/2 support. *(Optional)*\n* `certifi` - SSL certificates.\n* `rfc3986` - URL parsing & normalization.\n  * `idna` - Internationalized domain name support.\n* `sniffio` - Async library autodetection.\n* `async_generator` - Backport support for `contextlib.asynccontextmanager`. *(Only required for Python 3.6)*\n* `brotlicffi` - Decoding for \"brotli\" compressed responses. *(Optional)*\n\nA huge amount of credit is due to `requests` for the API layout that\nmuch of this work follows, as well as to `urllib3` for plenty of design\ninspiration around the lower-level networking details.\n\n<p align=\"center\">&mdash; ⭐️ &mdash;</p>\n<p align=\"center\"><i>HTTPX is <a href=\"https://github.com/encode/httpx/blob/master/LICENSE.md\">BSD licensed</a> code. Designed & built in Brighton, England.</i></p>\n\n\n# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/).\n\n## 0.18.1 (29th April, 2021)\n\n### Changed\n\n* Update brotli support to use the `brotlicffi` package (Pull #1605)\n* Ensure that `Request(..., stream=...)` does not auto-generate any headers on the request instance. (Pull #1607)\n\n### Fixed\n\n* Pass through `timeout=...` in top-level httpx.stream() function. (Pull #1613)\n* Map httpcore transport close exceptions to httpx exceptions. (Pull #1606)\n\n## 0.18.0 (27th April, 2021)\n\nThe 0.18.x release series formalises our low-level Transport API, introducing the base classes `httpx.BaseTransport` and `httpx.AsyncBaseTransport`.\n\nSee the \"[Writing custom transports](https://www.python-httpx.org/advanced/#writing-custom-transports)\" documentation and the [`httpx.BaseTransport.handle_request()`](https://github.com/encode/httpx/blob/397aad98fdc8b7580a5fc3e88f1578b4302c6382/httpx/_transports/base.py#L77-L147) docstring for more complete details on implementing custom transports.\n\nPull request #1522 includes a checklist of differences from the previous `httpcore` transport API, for developers implementing custom transports.\n\nThe following API changes have been issuing deprecation warnings since 0.17.0 onwards, and are now fully deprecated...\n\n* You should now use httpx.codes consistently instead of httpx.StatusCodes.\n* Use limits=... instead of pool_limits=....\n* Use proxies={\"http://\": ...} instead of proxies={\"http\": ...} for scheme-specific mounting.\n\n### Changed\n\n* Transport instances now inherit from `httpx.BaseTransport` or `httpx.AsyncBaseTransport`,\n  and should implement either the `handle_request` method or `handle_async_request` method. (Pull #1522, #1550)\n* The `response.ext` property and `Response(ext=...)` argument are now named `extensions`. (Pull #1522)\n* The recommendation to not use `data=<bytes|str|bytes (a)iterator>` in favour of `content=<bytes|str|bytes (a)iterator>` has now been escalated to a deprecation warning. (Pull #1573)\n* Drop `Response(on_close=...)` from API, since it was a bit of leaking implementation detail. (Pull #1572)\n* When using a client instance, cookies should always be set on the client, rather than on a per-request basis. We prefer enforcing a stricter API here because it provides clearer expectations around cookie persistence, particularly when redirects occur. (Pull #1574)\n* The runtime exception `httpx.ResponseClosed` is now named `httpx.StreamClosed`. (#1584)\n* The `httpx.QueryParams` model now presents an immutable interface. There is a discussion on [the design and motivation here](https://github.com/encode/httpx/discussions/1599). Use `client.params = client.params.merge(...)` instead of `client.params.update(...)`. The basic query manipulation methods are `query.set(...)`, `query.add(...)`, and `query.remove()`. (#1600)\n\n### Added\n\n* The `Request` and `Response` classes can now be serialized using pickle. (#1579)\n* Handle `data={\"key\": [None|int|float|bool]}` cases. (Pull #1539)\n* Support `httpx.URL(**kwargs)`, for example `httpx.URL(scheme=\"https\", host=\"www.example.com\", path=\"/')`, or `httpx.URL(\"https://www.example.com/\", username=\"tom@gmail.com\", password=\"123 456\")`. (Pull #1601)\n* Support `url.copy_with(params=...)`. (Pull #1601)\n* Add `url.params` parameter, returning an immutable `QueryParams` instance. (Pull #1601)\n* Support query manipulation methods on the URL class. These are `url.copy_set_param()`, `url.copy_add_param()`, `url.copy_remove_param()`, `url.copy_merge_params()`. (Pull #1601)\n* The `httpx.URL` class now performs port normalization, so `:80` ports are stripped from `http` URLs and `:443` ports are stripped from `https` URLs. (Pull #1603)\n* The `URL.host` property returns unicode strings for internationalized domain names. The `URL.raw_host` property returns byte strings with IDNA escaping applied. (Pull #1590)\n\n### Fixed\n\n* Fix Content-Length for cases of `files=...` where unicode string is used as the file content. (Pull #1537)\n* Fix some cases of merging relative URLs against `Client(base_url=...)`. (Pull #1532)\n* The `request.content` attribute is now always available except for streaming content, which requires an explicit `.read()`. (Pull #1583)\n\n## 0.17.1 (March 15th, 2021)\n\n### Fixed\n\n* Type annotation on `CertTypes` allows `keyfile` and `password` to be optional. (Pull #1503)\n* Fix httpcore pinned version. (Pull #1495)\n\n## 0.17.0 (February 28th, 2021)\n\n### Added\n\n* Add `httpx.MockTransport()`, allowing to mock out a transport using pre-determined responses. (Pull #1401, Pull #1449)\n* Add `httpx.HTTPTransport()` and `httpx.AsyncHTTPTransport()` default transports. (Pull #1399)\n* Add mount API support, using `httpx.Client(mounts=...)`. (Pull #1362)\n* Add `chunk_size` parameter to `iter_raw()`, `iter_bytes()`, `iter_text()`. (Pull #1277)\n* Add `keepalive_expiry` parameter to `httpx.Limits()` configuration. (Pull #1398)\n* Add repr to `httpx.Cookies` to display available cookies. (Pull #1411)\n* Add support for `params=<tuple>` (previously only `params=<list>` was supported). (Pull #1426)\n\n### Fixed\n\n* Add missing `raw_path` to ASGI scope. (Pull #1357)\n* Tweak `create_ssl_context` defaults to use `trust_env=True`. (Pull #1447)\n* Properly URL-escape WSGI `PATH_INFO`. (Pull #1391)\n* Properly set default ports in WSGI transport. (Pull #1469)\n* Properly encode slashes when using `base_url`. (Pull #1407)\n* Properly map exceptions in `request.aclose()`. (Pull #1465)\n\n## 0.16.1 (October 8th, 2020)\n\n### Fixed\n\n* Support literal IPv6 addresses in URLs. (Pull #1349)\n* Force lowercase headers in ASGI scope dictionaries. (Pull #1351)\n\n## 0.16.0 (October 6th, 2020)\n\n### Changed\n\n* Preserve HTTP header casing. (Pull #1338, encode/httpcore#216, python-hyper/h11#104)\n* Drop `response.next()` and `response.anext()` methods in favour of `response.next_request` attribute. (Pull #1339)\n* Closed clients now raise a runtime error if attempting to send a request. (Pull #1346)\n\n### Added\n\n* Add Python 3.9 to officially supported versions.\n* Type annotate `__enter__`/`__exit__`/`__aenter__`/`__aexit__` in a way that supports subclasses of `Client` and `AsyncClient`. (Pull #1336)\n\n## 0.15.5 (October 1st, 2020)\n\n### Added\n\n* Add `response.next_request` (Pull #1334)\n\n## 0.15.4 (September 25th, 2020)\n\n### Added\n\n* Support direct comparisons between `Headers` and dicts or lists of two-tuples. Eg. `assert response.headers == {\"Content-Length\": 24}` (Pull #1326)\n\n### Fixed\n\n* Fix automatic `.read()` when `Response` instances are created with `content=<str>` (Pull #1324)\n\n## 0.15.3 (September 24th, 2020)\n\n### Fixed\n\n* Fixed connection leak in async client due to improper closing of response streams. (Pull #1316)\n\n## 0.15.2 (September 23nd, 2020)\n\n### Fixed\n\n* Fixed `response.elapsed` property. (Pull #1313)\n* Fixed client authentication interaction with `.stream()`. (Pull #1312)\n\n## 0.15.1 (September 23nd, 2020)\n\n### Fixed\n\n* ASGITransport now properly applies URL decoding to the `path` component, as-per the ASGI spec. (Pull #1307)\n\n## 0.15.0 (September 22nd, 2020)\n\n### Added\n\n* Added support for curio. (Pull https://github.com/encode/httpcore/pull/168)\n* Added support for event hooks. (Pull #1246)\n* Added support for authentication flows which require either sync or async I/O. (Pull #1217)\n* Added support for monitoring download progress with `response.num_bytes_downloaded`. (Pull #1268)\n* Added `Request(content=...)` for byte content, instead of overloading `Request(data=...)` (Pull #1266)\n* Added support for all URL components as parameter names when using `url.copy_with(...)`. (Pull #1285)\n* Neater split between automatically populated headers on `Request` instances, vs default `client.headers`. (Pull #1248)\n* Unclosed `AsyncClient` instances will now raise warnings if garbage collected. (Pull #1197)\n* Support `Response(content=..., text=..., html=..., json=...)` for creating usable response instances in code. (Pull #1265, #1297)\n* Support instantiating requests from the low-level transport API. (Pull #1293)\n* Raise errors on invalid URL types. (Pull #1259)\n\n### Changed\n\n* Cleaned up expected behaviour for URL escaping. `url.path` is now URL escaped. (Pull #1285)\n* Cleaned up expected behaviour for bytes vs str in URL components. `url.userinfo` and `url.query` are not URL escaped, and so return bytes. (Pull #1285)\n* Drop `url.authority` property in favour of `url.netloc`, since \"authority\" was semantically incorrect. (Pull #1285)\n* Drop `url.full_path` property in favour of `url.raw_path`, for better consistency with other parts of the API. (Pull #1285)\n* No longer use the `chardet` library for auto-detecting charsets, instead defaulting to a simpler approach when no charset is specified. (#1269)\n\n### Fixed\n\n* Swapped ordering of redirects and authentication flow. (Pull #1267)\n* `.netrc` lookups should use host, not host+port. (Pull #1298)\n\n### Removed\n\n* The `URLLib3Transport` class no longer exists. We've published it instead as an example of [a custom transport class](https://gist.github.com/florimondmanca/d56764d78d748eb9f73165da388e546e). (Pull #1182)\n* Drop `request.timer` attribute, which was being used internally to set `response.elapsed`. (Pull #1249)\n* Drop `response.decoder` attribute, which was being used internally. (Pull #1276)\n* `Request.prepare()` is now a private method. (Pull #1284)\n* The `Headers.getlist()` method had previously been deprecated in favour of `Headers.get_list()`. It is now fully removed.\n* The `QueryParams.getlist()` method had previously been deprecated in favour of `QueryParams.get_list()`. It is now fully removed.\n* The `URL.is_ssl` property had previously been deprecated in favour of `URL.scheme == \"https\"`. It is now fully removed.\n* The `httpx.PoolLimits` class had previously been deprecated in favour of `httpx.Limits`. It is now fully removed.\n* The `max_keepalive` setting had previously been deprecated in favour of the more explicit `max_keepalive_connections`. It is now fully removed.\n* The verbose `httpx.Timeout(5.0, connect_timeout=60.0)` style had previously been deprecated in favour of `httpx.Timeout(5.0, connect=60.0)`. It is now fully removed.\n* Support for instantiating a timeout config missing some defaults, such as `httpx.Timeout(connect=60.0)`, had previously been deprecated in favour of enforcing a more explicit style, such as `httpx.Timeout(5.0, connect=60.0)`. This is now strictly enforced.\n\n## 0.14.3 (September 2nd, 2020)\n\n### Added\n\n* `http.Response()` may now be instantiated without a `request=...` parameter. Useful for some unit testing cases. (Pull #1238)\n* Add `103 Early Hints` and `425 Too Early` status codes. (Pull #1244)\n\n### Fixed\n\n* `DigestAuth` now handles responses that include multiple 'WWW-Authenticate' headers. (Pull #1240)\n* Call into transport `__enter__`/`__exit__` or `__aenter__`/`__aexit__` when client is used in a context manager style. (Pull #1218)\n\n## 0.14.2 (August 24th, 2020)\n\n### Added\n\n* Support `client.get(..., auth=None)` to bypass the default authentication on a clients. (Pull #1115)\n* Support `client.auth = ...` property setter. (Pull #1185)\n* Support `httpx.get(..., proxies=...)` on top-level request functions. (Pull #1198)\n* Display instances with nicer import styles. (Eg. <httpx.ReadTimeout ...>) (Pull #1155)\n* Support `cookies=[(key, value)]` list-of-two-tuples style usage. (Pull #1211)\n\n### Fixed\n\n* Ensure that automatically included headers on a request may be modified. (Pull #1205)\n* Allow explicit `Content-Length` header on streaming requests. (Pull #1170)\n* Handle URL quoted usernames and passwords properly. (Pull #1159)\n* Use more consistent default for `HEAD` requests, setting `allow_redirects=True`. (Pull #1183)\n* If a transport error occurs while streaming the response, raise an `httpx` exception, not the underlying `httpcore` exception. (Pull #1190)\n* Include the underlying `httpcore` traceback, when transport exceptions occur. (Pull #1199)\n\n## 0.14.1 (August 11th, 2020)\n\n### Added\n\n* The `httpx.URL(...)` class now raises `httpx.InvalidURL` on invalid URLs, rather than exposing the underlying `rfc3986` exception. If a redirect response includes an invalid 'Location' header, then a `RemoteProtocolError` exception is raised, which will be associated with the request that caused it. (Pull #1163)\n\n### Fixed\n\n* Handling multiple `Set-Cookie` headers became broken in the 0.14.0 release, and is now resolved. (Pull #1156)\n\n## 0.14.0 (August 7th, 2020)\n\nThe 0.14 release includes a range of improvements to the public API, intended on preparing for our upcoming 1.0 release.\n\n* Our HTTP/2 support is now fully optional. **You now need to use `pip install httpx[http2]` if you want to include the HTTP/2 dependancies.**\n* Our HSTS support has now been removed. Rewriting URLs from `http` to `https` if the host is on the HSTS list can be beneficial in avoiding roundtrips to incorrectly formed URLs, but on balance we've decided to remove this feature, on the principle of least surprise. Most programmatic clients do not include HSTS support, and for now we're opting to remove our support for it.\n* Our exception hierarchy has been overhauled. Most users will want to stick with their existing `httpx.HTTPError` usage, but we've got a clearer overall structure now. See https://www.python-httpx.org/exceptions/ for more details.\n\nWhen upgrading you should be aware of the following public API changes. Note that deprecated usages will currently continue to function, but will issue warnings.\n\n* You should now use `httpx.codes` consistently instead of `httpx.StatusCodes`.\n* Usage of `httpx.Timeout()` should now always include an explicit default. Eg. `httpx.Timeout(None, pool=5.0)`.\n* When using `httpx.Timeout()`, we now have more concisely named keyword arguments. Eg. `read=5.0`, instead of `read_timeout=5.0`.\n* Use `httpx.Limits()` instead of `httpx.PoolLimits()`, and `limits=...` instead of `pool_limits=...`.\n* The `httpx.Limits(max_keepalive=...)` argument is now deprecated in favour of a more explicit `httpx.Limits(max_keepalive_connections=...)`.\n* Keys used with `Client(proxies={...})` should now be in the style of `{\"http://\": ...}`, rather than `{\"http\": ...}`.\n* The multidict methods `Headers.getlist()` and `QueryParams.getlist()` are deprecated in favour of more consistent `.get_list()` variants.\n* The `URL.is_ssl` property is deprecated in favour of `URL.scheme == \"https\"`.\n* The `URL.join(relative_url=...)` method is now `URL.join(url=...)`. This change does not support warnings for the deprecated usage style.\n\nOne notable aspect of the 0.14.0 release is that it tightens up the public API for `httpx`, by ensuring that several internal attributes and methods have now become strictly private.\n\nThe following previously had nominally public names on the client, but were all undocumented and intended solely for internal usage. They are all now replaced with underscored names, and should not be relied on or accessed.\n\nThese changes should not affect users who have been working from the `httpx` documentation.\n\n* `.merge_url()`, `.merge_headers()`, `.merge_cookies()`, `.merge_queryparams()`\n* `.build_auth()`, `.build_redirect_request()`\n* `.redirect_method()`, `.redirect_url()`, `.redirect_headers()`, `.redirect_stream()`\n* `.send_handling_redirects()`, `.send_handling_auth()`, `.send_single_request()`\n* `.init_transport()`, `.init_proxy_transport()`\n* `.proxies`, `.transport`, `.netrc`, `.get_proxy_map()`\n\nSee pull requests #997, #1065, #1071.\n\nSome areas of API which were already on the deprecation path, and were raising warnings or errors in 0.13.x have now been escalated to being fully removed.\n\n* Drop `ASGIDispatch`, `WSGIDispatch`, which have been replaced by `ASGITransport`, `WSGITransport`.\n* Drop `dispatch=...`` on client, which has been replaced by `transport=...``\n* Drop `soft_limit`, `hard_limit`, which have been replaced by `max_keepalive` and `max_connections`.\n* Drop `Response.stream` and` `Response.raw`, which have been replaced by ``.aiter_bytes` and `.aiter_raw`.\n* Drop `proxies=<transport instance>` in favor of `proxies=httpx.Proxy(...)`.\n\nSee pull requests #1057, #1058.\n\n### Added\n\n* Added dedicated exception class `httpx.HTTPStatusError` for `.raise_for_status()` exceptions. (Pull #1072)\n* Added `httpx.create_ssl_context()` helper function. (Pull #996)\n* Support for proxy exlcusions like `proxies={\"https://www.example.com\": None}`. (Pull #1099)\n* Support `QueryParams(None)` and `client.params = None`. (Pull #1060)\n\n### Changed\n\n* Use `httpx.codes` consistently in favour of `httpx.StatusCodes` which is placed into deprecation. (Pull #1088)\n* Usage of `httpx.Timeout()` should now always include an explicit default. Eg. `httpx.Timeout(None, pool=5.0)`. (Pull #1085)\n* Switch to more concise `httpx.Timeout()` keyword arguments. Eg. `read=5.0`, instead of `read_timeout=5.0`. (Pull #1111)\n* Use `httpx.Limits()` instead of `httpx.PoolLimits()`, and `limits=...` instead of `pool_limits=...`. (Pull #1113)\n* Keys used with `Client(proxies={...})` should now be in the style of `{\"http://\": ...}`, rather than `{\"http\": ...}`. (Pull #1127)\n* The multidict methods `Headers.getlist` and `QueryParams.getlist` are deprecated in favour of more consistent `.get_list()` variants. (Pull #1089)\n* `URL.port` becomes `Optional[int]`. Now only returns a port if one is explicitly included in the URL string. (Pull #1080)\n* The `URL(..., allow_relative=[bool])` parameter no longer exists. All URL instances may be relative. (Pull #1073)\n* Drop unnecessary `url.full_path = ...` property setter. (Pull #1069)\n* The `URL.join(relative_url=...)` method is now `URL.join(url=...)`. (Pull #1129)\n* The `URL.is_ssl` property is deprecated in favour of `URL.scheme == \"https\"`. (Pull #1128)\n\n### Fixed\n\n* Add missing `Response.next()` method. (Pull #1055)\n* Ensure all exception classes are exposed as public API. (Pull #1045)\n* Support multiple items with an identical field name in multipart encodings. (Pull #777)\n* Skip HSTS preloading on single-label domains. (Pull #1074)\n* Fixes for `Response.iter_lines()`. (Pull #1033, #1075)\n* Ignore permission errors when accessing `.netrc` files. (Pull #1104)\n* Allow bare hostnames in `HTTP_PROXY` etc... environment variables. (Pull #1120)\n* Settings `app=...` or `transport=...` bypasses any environment based proxy defaults. (Pull #1122)\n* Fix handling of `.base_url` when a path component is included in the base URL. (Pull #1130)\n\n---\n\n## 0.13.3 (May 29th, 2020)\n\n### Fixed\n\n* Include missing keepalive expiry configuration. (Pull #1005)\n* Improved error message when URL redirect has a custom scheme. (Pull #1002)\n\n## 0.13.2 (May 27th, 2020)\n\n### Fixed\n\n* Include explicit \"Content-Length: 0\" on POST, PUT, PATCH if no request body is used. (Pull #995)\n* Add `http2` option to `httpx.Client`. (Pull #982)\n* Tighten up API typing in places. (Pull #992, #999)\n\n## 0.13.1 (May 22nd, 2020)\n\n### Fixed\n\n* Fix pool options deprecation warning. (Pull #980)\n* Include `httpx.URLLib3ProxyTransport` in top-level API. (Pull #979)\n\n## 0.13.0 (May 22nd, 2020)\n\nThis release switches to `httpcore` for all the internal networking, which means:\n\n* We're using the same codebase for both our sync and async clients.\n* HTTP/2 support is now available with the sync client.\n* We no longer have a `urllib3` dependency for our sync client, although there is still an *optional* `URLLib3Transport` class.\n\nIt also means we've had to remove our UDS support, since maintaining that would have meant having to push back our work towards a 1.0 release, which isn't a trade-off we wanted to make.\n\nWe also now have [a public \"Transport API\"](https://www.python-httpx.org/advanced/#custom-transports), which you can use to implement custom transport implementations against. This formalises and replaces our previously private \"Dispatch API\".\n\n### Changed\n\n* Use `httpcore` for underlying HTTP transport. Drop `urllib3` requirement. (Pull #804, #967)\n* Rename pool limit options from `soft_limit`/`hard_limit` to `max_keepalive`/`max_connections`. (Pull #968)\n* The previous private \"Dispatch API\" has now been promoted to a public \"Transport API\". When customizing the transport use `transport=...`. The `ASGIDispatch` and `WSGIDispatch` class naming is deprecated in favour of `ASGITransport` and `WSGITransport`. (Pull #963)\n\n### Added\n\n* Added `URLLib3Transport` class for optional `urllib3` transport support. (Pull #804, #963)\n* Streaming multipart uploads. (Pull #857)\n* Logging via HTTPCORE_LOG_LEVEL and HTTPX_LOG_LEVEL environment variables\nand TRACE level logging. (Pull encode/httpcore#79)\n\n### Fixed\n\n* Performance improvement in brotli decoder. (Pull #906)\n* Proper warning level of deprecation notice in `Response.stream` and `Response.raw`. (Pull #908)\n* Fix support for generator based WSGI apps. (Pull #887)\n* Reuse of connections on HTTP/2 in close concurrency situations. (Pull encode/httpcore#81)\n* Honor HTTP/2 max concurrent streams settings (Pull encode/httpcore#89, encode/httpcore#90)\n* Fix bytes support in multipart uploads. (Pull #974)\n* Improve typing support for `files=...`. (Pull #976)\n\n### Removed\n\n* Dropped support for `Client(uds=...)` (Pull #804)\n\n## 0.13.0.dev2 (May 12th, 2020)\n\nThe 0.13.0.dev2 is a *pre-release* version. To install it, use `pip install httpx --pre`.\n\n### Added\n\n* Logging via HTTPCORE_LOG_LEVEL and HTTPX_LOG_LEVEL environment variables\nand TRACE level logging. (HTTPCore Pull #79)\n\n### Fixed\n\n* Reuse of connections on HTTP/2 in close concurrency situations. (HTTPCore Pull #81)\n* When using an `app=<ASGI app>` observe neater disconnect behaviour instead of sending empty body messages. (Pull #919)\n\n## 0.13.0.dev1 (May 6th, 2020)\n\nThe 0.13.0.dev1 is a *pre-release* version. To install it, use `pip install httpx --pre`.\n\n### Fixed\n\n* Passing `http2` flag to proxy dispatchers. (Pull #934)\n* Use [`httpcore` v0.8.3](https://github.com/encode/httpcore/releases/tag/0.8.3)\nwhich addresses problems in handling of headers when using proxies.\n\n## 0.13.0.dev0 (April 30th, 2020)\n\nThe 0.13.0.dev0 is a *pre-release* version. To install it, use `pip install httpx --pre`.\n\nThis release switches to `httpcore` for all the internal networking, which means:\n\n* We're using the same codebase for both our sync and async clients.\n* HTTP/2 support is now available with the sync client.\n* We no longer have a `urllib3` dependency for our sync client, although there is still an *optional* `URLLib3Dispatcher` class.\n\nIt also means we've had to remove our UDS support, since maintaining that would have meant having to push back our work towards a 1.0 release, which isn't a trade-off we wanted to make.\n\n### Changed\n\n* Use `httpcore` for underlying HTTP transport. Drop `urllib3` requirement. (Pull #804)\n\n### Added\n\n* Added `URLLib3Dispatcher` class for optional `urllib3` transport support. (Pull #804)\n* Streaming multipart uploads. (Pull #857)\n\n### Fixed\n\n* Performance improvement in brotli decoder. (Pull #906)\n* Proper warning level of deprecation notice in `Response.stream` and `Response.raw`. (Pull #908)\n* Fix support for generator based WSGI apps. (Pull #887)\n\n### Removed\n\n* Dropped support for `Client(uds=...)` (Pull #804)\n\n---\n\n## 0.12.1 (March 19th, 2020)\n\n### Fixed\n\n* Resolved packaging issue, where additional files were being included.\n\n## 0.12.0 (March 9th, 2020)\n\nThe 0.12 release tightens up the API expectations for `httpx` by switching to private module names to enforce better clarity around public API.\n\nAll imports of `httpx` should import from the top-level package only, such as `from httpx import Request`, rather than importing from privately namespaced modules such as `from httpx._models import Request`.\n\n### Added\n\n* Support making response body available to auth classes with `.requires_response_body`. (Pull #803)\n* Export `NetworkError` exception. (Pull #814)\n* Add support for `NO_PROXY` environment variable. (Pull #835)\n\n### Changed\n\n* Switched to private module names. (Pull #785)\n* Drop redirect looping detection and the `RedirectLoop` exception, instead using `TooManyRedirects`. (Pull #819)\n* Drop `backend=...` parameter on `AsyncClient`, in favour of always autodetecting `trio`/`asyncio`. (Pull #791)\n\n### Fixed\n\n* Support basic auth credentials in proxy URLs. (Pull #780)\n* Fix `httpx.Proxy(url, mode=\"FORWARD_ONLY\")` configuration. (Pull #788)\n* Fallback to setting headers as UTF-8 if no encoding is specified. (Pull #820)\n* Close proxy dispatches classes on client close. (Pull #826)\n* Support custom `cert` parameters even if `verify=False`. (Pull #796)\n* Don't support invalid dict-of-dicts form data in `data=...`. (Pull #811)\n\n---\n\n## 0.11.1 (January 17th, 2020)\n\n### Fixed\n\n* Fixed usage of `proxies=...` on `Client()`. (Pull #763)\n* Support both `zlib` and `deflate` style encodings on `Content-Encoding: deflate`. (Pull #758)\n* Fix for streaming a redirect response body with `allow_redirects=False`. (Pull #766)\n* Handle redirect with malformed Location headers missing host. (Pull #774)\n\n## 0.11.0 (January 9th, 2020)\n\nThe 0.11 release reintroduces our sync support, so that `httpx` now supports both a standard thread-concurrency API, and an async API.\n\nExisting async `httpx` users that are upgrading to 0.11 should ensure that:\n\n* Async codebases should always use a client instance to make requests, instead of the top-level API.\n* The async client is named as `httpx.AsyncClient()`, instead of `httpx.Client()`.\n* When instantiating proxy configurations use the `httpx.Proxy()` class, instead of the previous `httpx.HTTPProxy()`. This new configuration class works for configuring both sync and async clients.\n\nWe believe the API is now pretty much stable, and are aiming for a 1.0 release sometime on or before April 2020.\n\n### Changed\n\n- Top level API such as `httpx.get(url, ...)`, `httpx.post(url, ...)`, `httpx.request(method, url, ...)` becomes synchronous.\n- Added `httpx.Client()` for synchronous clients, with `httpx.AsyncClient` being used for async clients.\n- Switched to `proxies=httpx.Proxy(...)` for proxy configuration.\n- Network connection errors are wrapped in `httpx.NetworkError`, rather than exposing lower-level exception types directly.\n\n### Removed\n\n- The `request.url.origin` property and `httpx.Origin` class are no longer available.\n- The per-request `cert`, `verify`, and `trust_env` arguments are escalated from raising errors if used, to no longer being available. These arguments should be used on a per-client instance instead, or in the top-level API.\n- The `stream` argument has escalated from raising an error when used, to no longer being available. Use the `client.stream(...)` or `httpx.stream()` streaming API instead.\n\n### Fixed\n\n- Redirect loop detection matches against `(method, url)` rather than `url`. (Pull #734)\n\n---\n\n## 0.10.1 (December 31st, 2019)\n\n### Fixed\n\n- Fix issue with concurrent connection acquiry. (Pull #700)\n- Fix write error on closing HTTP/2 connections. (Pull #699)\n\n## 0.10.0 (December 29th, 2019)\n\nThe 0.10.0 release makes some changes that will allow us to support both sync and async interfaces.\n\nIn particular with streaming responses the `response.read()` method becomes `response.aread()`, and the `response.close()` method becomes `response.aclose()`.\n\nIf following redirects explicitly the `response.next()` method becomes `response.anext()`.\n\n### Fixed\n\n- End HTTP/2 streams immediately on no-body requests, rather than sending an empty body message. (Pull #682)\n- Improve typing for `Response.request`: switch from `Optional[Request]` to `Request`. (Pull #666)\n- `Response.elapsed` now reflects the entire download time. (Pull #687, #692)\n\n### Changed\n\n- Added `AsyncClient` as a synonym for `Client`. (Pull #680)\n- Switch to `response.aread()` for conditionally reading streaming responses. (Pull #674)\n- Switch to `response.aclose()` and `client.aclose()` for explicit closing. (Pull #674, #675)\n- Switch to `response.anext()` for resolving the next redirect response. (Pull #676)\n\n### Removed\n\n- When using a client instance, the per-request usage of `verify`, `cert`, and `trust_env` have now escalated from raising a warning to raising an error. You should set these arguments on the client instead. (Pull #617)\n- Removed the undocumented `request.read()`, since end users should not require it.\n\n---\n\n## 0.9.5 (December 20th, 2019)\n\n### Fixed\n\n- Fix Host header and HSTS rewrites when an explicit `:80` port is included in URL. (Pull #649)\n- Query Params on the URL string are merged with any `params=...` argument. (Pull #653)\n- More robust behavior when closing connections. (Pull #640)\n- More robust behavior when handling HTTP/2 headers with trailing whitespace. (Pull #637)\n- Allow any explicit `Content-Type` header to take precedence over the encoding default. (Pull #633)\n\n## 0.9.4 (December 12th, 2019)\n\n### Fixed\n\n- Added expiry to Keep-Alive connections, resolving issues with acquiring connections. (Pull #627)\n- Increased flow control windows on HTTP/2, resolving download speed issues. (Pull #629)\n\n## 0.9.3 (December 7th, 2019)\n\n### Fixed\n\n- Fixed HTTP/2 with autodetection backend. (Pull #614)\n\n## 0.9.2 (December 7th, 2019)\n\n* Released due to packaging build artifact.\n\n## 0.9.1 (December 6th, 2019)\n\n* Released due to packaging build artifact.\n\n## 0.9.0 (December 6th, 2019)\n\nThe 0.9 releases brings some major new features, including:\n\n* A new streaming API.\n* Autodetection of either asyncio or trio.\n* Nicer timeout configuration.\n* HTTP/2 support off by default, but can be enabled.\n\nWe've also removed all private types from the top-level package export.\n\nIn order to ensure you are only ever working with public API you should make\nsure to only import the top-level package eg. `import httpx`, rather than\nimporting modules within the package.\n\n### Added\n\n- Added concurrency backend autodetection. (Pull #585)\n- Added `Client(backend='trio')` and `Client(backend='asyncio')` API. (Pull #585)\n- Added `response.stream_lines()` API. (Pull #575)\n- Added `response.is_error` API. (Pull #574)\n- Added support for `timeout=Timeout(5.0, connect_timeout=60.0)` styles. (Pull #593)\n\n### Fixed\n\n- Requests or Clients with `timeout=None` now correctly always disable timeouts. (Pull #592)\n- Request 'Authorization' headers now have priority over `.netrc` authentication info. (Commit 095b691)\n- Files without a filename no longer set a Content-Type in multipart data. (Commit ed94950)\n\n### Changed\n\n- Added `httpx.stream()` API. Using `stream=True` now results in a warning. (Pull #600, #610)\n- HTTP/2 support is switched to \"off by default\", but can be enabled explicitly. (Pull #584)\n- Switched to `Client(http2=True)` API from `Client(http_versions=[\"HTTP/1.1\", \"HTTP/2\"])`. (Pull #586)\n- Removed all private types from the top-level package export. (Pull #608)\n- The SSL configuration settings of `verify`, `cert`, and `trust_env` now raise warnings if used per-request when using a Client instance. They should always be set on the Client instance itself. (Pull #597)\n- Use plain strings \"TUNNEL_ONLY\" or \"FORWARD_ONLY\" on the HTTPProxy `proxy_mode` argument. The `HTTPProxyMode` enum still exists, but its usage will raise warnings. (#610)\n- Pool timeouts are now on the timeout configuration, not the pool limits configuration. (Pull #563)\n- The timeout configuration is now named `httpx.Timeout(...)`, not `httpx.TimeoutConfig(...)`. The old version currently remains as a synonym for backwards compatability.  (Pull #591)\n\n---\n\n## 0.8.0 (November 27, 2019)\n\n### Removed\n\n- The synchronous API has been removed, in order to allow us to fundamentally change how we approach supporting both sync and async variants. (See #588 for more details.)\n\n---\n\n## 0.7.8 (November 17, 2019)\n\n### Added\n\n- Add support for proxy tunnels for Python 3.6 + asyncio. (Pull #521)\n\n## 0.7.7 (November 15, 2019)\n\n### Fixed\n\n- Resolve an issue with cookies behavior on redirect requests. (Pull #529)\n\n### Added\n\n- Add request/response DEBUG logs. (Pull #502)\n- Use TRACE log level for low level info. (Pull #500)\n\n## 0.7.6 (November 2, 2019)\n\n### Removed\n\n- Drop `proxies` parameter from the high-level API. (Pull #485)\n\n### Fixed\n\n- Tweak multipart files: omit null filenames, add support for `str` file contents. (Pull #482)\n- Cache NETRC authentication per-client. (Pull #400)\n- Rely on `getproxies` for all proxy environment variables. (Pull #470)\n- Wait for the `asyncio` stream to close when closing a connection. (Pull #494)\n\n## 0.7.5 (October 10, 2019)\n\n### Added\n\n- Allow lists of values to be passed to `params`. (Pull #386)\n- `ASGIDispatch`, `WSGIDispatch` are now available in the `httpx.dispatch` namespace. (Pull #407)\n- `HTTPError` is now available in the `httpx` namespace.  (Pull #421)\n- Add support for `start_tls()` to the Trio concurrency backend. (Pull #467)\n\n### Fixed\n\n- Username and password are no longer included in the `Host` header when basic authentication\n  credentials are supplied via the URL. (Pull #417)\n\n### Removed\n\n- The `.delete()` function no longer has `json`, `data`, or `files` parameters\n  to match the expected semantics of the `DELETE` method. (Pull #408)\n- Removed the `trio` extra. Trio support is detected automatically. (Pull #390)\n\n## 0.7.4 (September 25, 2019)\n\n### Added\n\n- Add Trio concurrency backend. (Pull #276)\n- Add `params` parameter to `Client` for setting default query parameters. (Pull #372)\n- Add support for `SSL_CERT_FILE` and `SSL_CERT_DIR` environment variables. (Pull #307)\n- Add debug logging to calls into ASGI apps. (Pull #371)\n- Add debug logging to SSL configuration. (Pull #378)\n\n### Fixed\n\n- Fix a bug when using `Client` without timeouts in Python 3.6. (Pull #383)\n- Propagate `Client` configuration to HTTP proxies. (Pull #377)\n\n## 0.7.3 (September 20, 2019)\n\n### Added\n\n- HTTP Proxy support. (Pulls #259, #353)\n- Add Digest authentication. (Pull #332)\n- Add `.build_request()` method to `Client` and `AsyncClient`. (Pull #319)\n- Add `.elapsed` property on responses. (Pull #351)\n- Add support for `SSLKEYLOGFILE` in Python 3.8b4+. (Pull #301)\n\n### Removed\n\n- Drop NPN support for HTTP version negotiation. (Pull #314)\n\n### Fixed\n\n- Fix distribution of type annotations for mypy (Pull #361).\n- Set `Host` header when redirecting cross-origin. (Pull #321)\n- Drop `Content-Length` headers on `GET` redirects. (Pull #310)\n- Raise `KeyError` if header isn't found in `Headers`. (Pull #324)\n- Raise `NotRedirectResponse` in `response.next()` if there is no redirection to perform. (Pull #297)\n- Fix bug in calculating the HTTP/2 maximum frame size. (Pull #153)\n\n## 0.7.2 (August 28, 2019)\n\n- Enforce using `httpx.AsyncioBackend` for the synchronous client. (Pull #232)\n- `httpx.ConnectionPool` will properly release a dropped connection. (Pull #230)\n- Remove the `raise_app_exceptions` argument from `Client`. (Pull #238)\n- `DecodeError` will no longer be raised for an empty body encoded with Brotli. (Pull #237)\n- Added `http_versions` parameter to `Client`. (Pull #250)\n- Only use HTTP/1.1 on short-lived connections like `httpx.get()`. (Pull #284)\n- Convert `Client.cookies` and `Client.headers` when set as a property. (Pull #274)\n- Setting `HTTPX_DEBUG=1` enables debug logging on all requests. (Pull #277)\n\n## 0.7.1 (August 18, 2019)\n\n- Include files with source distribution to be installable. (Pull #233)\n\n## 0.7.0 (August 17, 2019)\n\n- Add the `trust_env` property to `BaseClient`. (Pull #187)\n- Add the `links` property to `BaseResponse`. (Pull #211)\n- Accept `ssl.SSLContext` instances into `SSLConfig(verify=...)`. (Pull #215)\n- Add `Response.stream_text()` with incremental encoding detection. (Pull #183)\n- Properly updated the `Host` header when a redirect changes the origin. (Pull #199)\n- Ignore invalid `Content-Encoding` headers. (Pull #196)\n- Use `~/.netrc` and `~/_netrc` files by default when `trust_env=True`. (Pull #189)\n- Create exception base class `HTTPError` with `request` and `response` properties. (Pull #162)\n- Add HSTS preload list checking within `BaseClient` to upgrade HTTP URLs to HTTPS. (Pull #184)\n- Switch IDNA encoding from IDNA 2003 to IDNA 2008. (Pull #161)\n- Expose base classes for alternate concurrency backends. (Pull #178)\n- Improve Multipart parameter encoding. (Pull #167)\n- Add the `headers` proeprty to `BaseClient`. (Pull #159)\n- Add support for Google's `brotli` library. (Pull #156)\n- Remove deprecated TLS versions (TLSv1 and TLSv1.1) from default `SSLConfig`. (Pull #155)\n- Fix `URL.join(...)` to work similarly to RFC 3986 URL joining. (Pull #144)\n\n---\n\n## 0.6.8 (July 25, 2019)\n\n- Check for disconnections when searching for an available\n  connection in `ConnectionPool.keepalive_connections` (Pull #145)\n- Allow string comparison for `URL` objects (Pull #139)\n- Add HTTP status codes 418 and 451 (Pull #135)\n- Add support for client certificate passwords (Pull #118)\n- Enable post-handshake client cert authentication for TLSv1.3 (Pull #118)\n- Disable using `commonName` for hostname checking for OpenSSL 1.1.0+ (Pull #118)\n- Detect encoding for `Response.json()` (Pull #116)\n\n## 0.6.7 (July 8, 2019)\n\n- Check for connection aliveness on re-acquiry (Pull #111)\n\n## 0.6.6 (July 3, 2019)\n\n- Improve `USER_AGENT` (Pull #110)\n- Add `Connection: keep-alive` by default to HTTP/1.1 connections. (Pull #110)\n\n## 0.6.5 (June 27, 2019)\n\n- Include `Host` header by default. (Pull #109)\n- Improve HTTP protocol detection. (Pull #107)\n\n## 0.6.4 (June 25, 2019)\n\n- Implement read and write timeouts (Pull #104)\n\n## 0.6.3 (June 24, 2019)\n\n- Handle early connection closes (Pull #103)\n\n## 0.6.2 (June 23, 2019)\n\n- Use urllib3's `DEFAULT_CIPHERS` for the `SSLConfig` object. (Pull #100)\n\n## 0.6.1 (June 21, 2019)\n\n- Add support for setting a `base_url` on the `Client`.\n\n## 0.6.0 (June 21, 2019)\n\n- Honor `local_flow_control_window` for HTTP/2 connections (Pull #98)\n\n\n",
          "name": "httpx",
          "author": [
            {
              "type": "Person",
              "name": "Tom Christie",
              "email": [
                "tom@tomchristie.com"
              ],
              "familyName": [
                "Christie"
              ],
              "givenName": [
                "Tom"
              ]
            }
          ],
          "license": "BSD",
          "version": "==0.17.1",
          "codeRepository": "https://pypi.org/project/httpx/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python",
          "applicationCategory": [
            "Internet"
          ],
          "applicationSubCategory": [
            "WWW/HTTP"
          ]
        },
        {
          "type": "SoftwarePackage",
          "description": "Internationalized Domain Names in Applications (IDNA)\n=====================================================\n\nSupport for the Internationalised Domain Names in Applications\n(IDNA) protocol as specified in `RFC 5891 <https://tools.ietf.org/html/rfc5891>`_.\nThis is the latest version of the protocol and is sometimes referred to as\n“IDNA 2008”.\n\nThis library also provides support for Unicode Technical Standard 46,\n`Unicode IDNA Compatibility Processing <https://unicode.org/reports/tr46/>`_.\n\nThis acts as a suitable replacement for the “encodings.idna” module that\ncomes with the Python standard library, but which only supports the\nold, deprecated IDNA specification (`RFC 3490 <https://tools.ietf.org/html/rfc3490>`_).\n\nBasic functions are simply executed:\n\n.. code-block:: pycon\n\n    >>> import idna\n    >>> idna.encode('ドメイン.テスト')\n    b'xn--eckwd4c7c.xn--zckzah'\n    >>> print(idna.decode('xn--eckwd4c7c.xn--zckzah'))\n    ドメイン.テスト\n\nPackages\n--------\n\nThe latest tagged release version is published in the PyPI repository:\n\n.. image:: https://badge.fury.io/py/idna.svg\n   :target: https://badge.fury.io/py/idna\n\n\nInstallation\n------------\n\nTo install this library, you can use pip:\n\n.. code-block:: bash\n\n    $ pip install idna\n\nAlternatively, you can install the package using the bundled setup script:\n\n.. code-block:: bash\n\n    $ python setup.py install\n\nThis library works with Python 3.4 or later. Earlier versions of this\nlibrary support Python 2 - use \"idna<3\" in your requirements file if\nyou need this library for a Python 2 application.\n\n\nUsage\n-----\n\nFor typical usage, the ``encode`` and ``decode`` functions will take a domain\nname argument and perform a conversion to A-labels or U-labels respectively.\n\n.. code-block:: pycon\n\n    >>> import idna\n    >>> idna.encode('ドメイン.テスト')\n    b'xn--eckwd4c7c.xn--zckzah'\n    >>> print(idna.decode('xn--eckwd4c7c.xn--zckzah'))\n    ドメイン.テスト\n\nYou may use the codec encoding and decoding methods using the\n``idna.codec`` module:\n\n.. code-block:: pycon\n\n    >>> import idna.codec\n    >>> print('домена.испытание'.encode('idna'))\n    b'xn--80ahd1agd.xn--80akhbyknj4f'\n    >>> print(b'xn--80ahd1agd.xn--80akhbyknj4f'.decode('idna'))\n    домена.испытание\n\nConversions can be applied at a per-label basis using the ``ulabel`` or ``alabel``\nfunctions if necessary:\n\n.. code-block:: pycon\n\n    >>> idna.alabel('测试')\n    b'xn--0zwm56d'\n\nCompatibility Mapping (UTS #46)\n+++++++++++++++++++++++++++++++\n\nAs described in `RFC 5895 <https://tools.ietf.org/html/rfc5895>`_, the IDNA\nspecification does not normalize input from different potential ways a user\nmay input a domain name. This functionality, known as a “mapping”, is \nconsidered by the specification to be a local user-interface issue distinct\nfrom IDNA conversion functionality.\n\nThis library provides one such mapping, that was developed by the Unicode\nConsortium. Known as `Unicode IDNA Compatibility Processing <https://unicode.org/reports/tr46/>`_,\nit provides for both a regular mapping for typical applications, as well as\na transitional mapping to help migrate from older IDNA 2003 applications.\n\nFor example, “Königsgäßchen” is not a permissible label as *LATIN CAPITAL\nLETTER K* is not allowed (nor are capital letters in general). UTS 46 will\nconvert this into lower case prior to applying the IDNA conversion.\n\n.. code-block:: pycon\n\n    >>> import idna\n    >>> idna.encode('Königsgäßchen')\n    ...\n    idna.core.InvalidCodepoint: Codepoint U+004B at position 1 of 'Königsgäßchen' not allowed\n    >>> idna.encode('Königsgäßchen', uts46=True)\n    b'xn--knigsgchen-b4a3dun'\n    >>> print(idna.decode('xn--knigsgchen-b4a3dun'))\n    königsgäßchen\n\nTransitional processing provides conversions to help transition from the older\n2003 standard to the current standard. For example, in the original IDNA\nspecification, the *LATIN SMALL LETTER SHARP S* (ß) was converted into two\n*LATIN SMALL LETTER S* (ss), whereas in the current IDNA specification this\nconversion is not performed.\n\n.. code-block:: pycon\n\n    >>> idna.encode('Königsgäßchen', uts46=True, transitional=True)\n    'xn--knigsgsschen-lcb0w'\n\nImplementors should use transitional processing with caution, only in rare\ncases where conversion from legacy labels to current labels must be performed\n(i.e. IDNA implementations that pre-date 2008). For typical applications\nthat just need to convert labels, transitional processing is unlikely to be\nbeneficial and could produce unexpected incompatible results.\n\n``encodings.idna`` Compatibility\n++++++++++++++++++++++++++++++++\n\nFunction calls from the Python built-in ``encodings.idna`` module are\nmapped to their IDNA 2008 equivalents using the ``idna.compat`` module.\nSimply substitute the ``import`` clause in your code to refer to the\nnew module name.\n\nExceptions\n----------\n\nAll errors raised during the conversion following the specification should\nraise an exception derived from the ``idna.IDNAError`` base class.\n\nMore specific exceptions that may be generated as ``idna.IDNABidiError``\nwhen the error reflects an illegal combination of left-to-right and\nright-to-left characters in a label; ``idna.InvalidCodepoint`` when\na specific codepoint is an illegal character in an IDN label (i.e.\nINVALID); and ``idna.InvalidCodepointContext`` when the codepoint is\nillegal based on its positional context (i.e. it is CONTEXTO or CONTEXTJ\nbut the contextual requirements are not satisfied.)\n\nBuilding and Diagnostics\n------------------------\n\nThe IDNA and UTS 46 functionality relies upon pre-calculated lookup\ntables for performance. These tables are derived from computing against\neligibility criteria in the respective standards. These tables are\ncomputed using the command-line script ``tools/idna-data``.\n\nThis tool will fetch relevant codepoint data from the Unicode repository \nand perform the required calculations to identify eligibility. There are \nthree main modes:\n\n* ``idna-data make-libdata``. Generates ``idnadata.py`` and ``uts46data.py``,\n  the pre-calculated lookup tables using for IDNA and UTS 46 conversions. Implementors\n  who wish to track this library against a different Unicode version may use this tool\n  to manually generate a different version of the ``idnadata.py`` and ``uts46data.py``\n  files.\n\n* ``idna-data make-table``. Generate a table of the IDNA disposition\n  (e.g. PVALID, CONTEXTJ, CONTEXTO) in the format found in Appendix B.1 of RFC\n  5892 and the pre-computed tables published by `IANA <https://www.iana.org/>`_.\n\n* ``idna-data U+0061``. Prints debugging output on the various properties\n  associated with an individual Unicode codepoint (in this case, U+0061), that are\n  used to assess the IDNA and UTS 46 status of a codepoint. This is helpful in debugging\n  or analysis.\n\nThe tool accepts a number of arguments, described using ``idna-data -h``. Most notably,\nthe ``--version`` argument allows the specification of the version of Unicode to use\nin computing the table data. For example, ``idna-data --version 9.0.0 make-libdata``\nwill generate library data against Unicode 9.0.0.\n\n\nTesting\n-------\n\nThe library has a test suite based on each rule of the IDNA specification, as\nwell as tests that are provided as part of the Unicode Technical Standard 46,\n`Unicode IDNA Compatibility Processing <https://unicode.org/reports/tr46/>`_.\n\n\n",
          "name": "idna",
          "author": [
            {
              "type": "Person",
              "name": "Kim Davies",
              "email": [
                "kim@cynosure.com.au"
              ],
              "familyName": [
                "Davies"
              ],
              "givenName": [
                "Kim"
              ]
            }
          ],
          "license": "BSD-3-Clause",
          "version": "==3.1",
          "codeRepository": "https://pypi.org/project/idna/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python",
          "applicationCategory": [
            "Internet",
            "Software Development",
            "Utilities"
          ],
          "applicationSubCategory": [
            "Name Service (DNS)",
            "Libraries"
          ]
        },
        {
          "type": "SoftwarePackage",
          "description": ".. image:: https://img.shields.io/pypi/v/importlib_resources.svg\n   :target: `PyPI link`_\n\n.. image:: https://img.shields.io/pypi/pyversions/importlib_resources.svg\n   :target: `PyPI link`_\n\n.. _PyPI link: https://pypi.org/project/importlib_resources\n\n.. image:: https://github.com/python/importlib_resources/workflows/tests/badge.svg\n   :target: https://github.com/python/importlib_resources/actions?query=workflow%3A%22tests%22\n   :alt: tests\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n   :target: https://github.com/psf/black\n   :alt: Code style: Black\n\n.. image:: https://readthedocs.org/projects/importlib-resources/badge/?version=latest\n   :target: https://importlib-resources.readthedocs.io/en/latest/?badge=latest\n\n.. image:: https://img.shields.io/badge/skeleton-2021-informational\n   :target: https://blog.jaraco.com/skeleton\n\n``importlib_resources`` is a backport of Python standard library\n`importlib.resources\n<https://docs.python.org/3/library/importlib.html#module-importlib.resources>`_\nmodule for older Pythons.  Users of Python 3.9 and beyond\nshould use the standard library module, since for these versions,\n``importlib_resources`` just delegates to that module.\n\nThe key goal of this module is to replace parts of `pkg_resources\n<https://setuptools.readthedocs.io/en/latest/pkg_resources.html>`_ with a\nsolution in Python's stdlib that relies on well-defined APIs.  This makes\nreading resources included in packages easier, with more stable and consistent\nsemantics.\n\n\n",
          "name": "importlib-resources",
          "author": [
            {
              "type": "Person",
              "name": "Barry Warsaw",
              "email": [
                "barry@python.org"
              ],
              "familyName": [
                "Warsaw"
              ],
              "givenName": [
                "Barry"
              ]
            }
          ],
          "license": "Apache2",
          "version": "==5.1.2",
          "codeRepository": "https://pypi.org/project/importlib-resources/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python"
        },
        {
          "type": "SoftwarePackage",
          "description": "The IPython kernel for Jupyter\n\n\n",
          "name": "ipykernel",
          "author": [
            {
              "type": "Person",
              "name": "IPython Development",
              "familyName": [
                "Development"
              ],
              "givenName": [
                "IPython"
              ]
            }
          ],
          "keywords": "Interactive,Interpreter,Shell,Web",
          "license": "BSD",
          "codeRepository": "https://pypi.org/project/ipykernel/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python"
        },
        {
          "type": "SoftwarePackage",
          "description": "\nIPython provides a rich toolkit to help you make the most out of using Python\ninteractively.  Its main components are:\n\n* A powerful interactive Python shell\n* A `Jupyter <https://jupyter.org/>`_ kernel to work with Python code in Jupyter\n  notebooks and other interactive frontends.\n\nThe enhanced interactive Python shells have the following main features:\n\n* Comprehensive object introspection.\n\n* Input history, persistent across sessions.\n\n* Caching of output results during a session with automatically generated\n  references.\n\n* Extensible tab completion, with support by default for completion of python\n  variables and keywords, filenames and function keywords.\n\n* Extensible system of 'magic' commands for controlling the environment and\n  performing many tasks related either to IPython or the operating system.\n\n* A rich configuration system with easy switching between different setups\n  (simpler than changing $PYTHONSTARTUP environment variables every time).\n\n* Session logging and reloading.\n\n* Extensible syntax processing for special purpose situations.\n\n* Access to the system shell with user-extensible alias system.\n\n* Easily embeddable in other Python programs and GUIs.\n\n* Integrated access to the pdb debugger and the Python profiler.\n\nThe latest development version is always available from IPython's `GitHub\nsite <http://github.com/ipython>`_.\n\n\n",
          "name": "ipython",
          "author": [
            {
              "type": "Person",
              "name": "The IPython",
              "familyName": [
                "IPython"
              ],
              "givenName": [
                "The"
              ]
            }
          ],
          "keywords": "Interactive,Interpreter,Shell,Embedding",
          "license": "BSD",
          "codeRepository": "https://pypi.org/project/ipython/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python",
          "applicationCategory": [
            "System"
          ],
          "applicationSubCategory": [
            "Shells"
          ]
        },
        {
          "type": "SoftwarePackage",
          "description": "Pretend this doesn't exist. Nobody should use it.\n\n\n",
          "name": "ipython-genutils",
          "author": [
            {
              "type": "Person",
              "name": "IPython Development",
              "familyName": [
                "Development"
              ],
              "givenName": [
                "IPython"
              ]
            }
          ],
          "keywords": "Interactive,Interpreter,Shell,Web",
          "license": "BSD",
          "version": "==0.2.0",
          "codeRepository": "https://pypi.org/project/ipython_genutils/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python"
        },
        {
          "type": "SoftwarePackage",
          "description": "\n.. image:: https://img.shields.io/pypi/v/ipywidgets.svg\n   :target: https://pypi.python.org/pypi/ipywidgets/\n   :alt: Version Number\n\n.. image:: https://img.shields.io/pypi/dm/ipywidgets.svg\n   :target: https://pypi.python.org/pypi/ipywidgets/\n   :alt: Number of PyPI downloads\n\nInteractive HTML Widgets\n========================\n\nInteractive HTML widgets for Jupyter notebooks and the IPython kernel.\n\nUsage\n=====\n\n.. code-block:: python\n\n    from ipywidgets import IntSlider\n    IntSlider()\n\n\n",
          "name": "ipywidgets",
          "author": [
            {
              "type": "Person",
              "name": "IPython Development",
              "familyName": [
                "Development"
              ],
              "givenName": [
                "IPython"
              ]
            }
          ],
          "keywords": "Interactive,Interpreter,Shell,Web",
          "license": "BSD",
          "version": "==7.6.3",
          "codeRepository": "https://pypi.org/project/ipywidgets/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python"
        },
        {
          "type": "SoftwarePackage",
          "description": "####################################################################################\nJedi - an awesome autocompletion, static analysis and refactoring library for Python\n####################################################################################\n\n.. image:: http://isitmaintained.com/badge/open/davidhalter/jedi.svg\n    :target: https://github.com/davidhalter/jedi/issues\n    :alt: The percentage of open issues and pull requests\n\n.. image:: http://isitmaintained.com/badge/resolution/davidhalter/jedi.svg\n    :target: https://github.com/davidhalter/jedi/issues\n    :alt: The resolution time is the median time an issue or pull request stays open.\n\n.. image:: https://travis-ci.org/davidhalter/jedi.svg?branch=master\n    :target: https://travis-ci.org/davidhalter/jedi\n    :alt: Linux Tests\n\n.. image:: https://ci.appveyor.com/api/projects/status/mgva3bbawyma1new/branch/master?svg=true\n    :target: https://ci.appveyor.com/project/davidhalter/jedi/branch/master\n    :alt: Windows Tests\n\n.. image:: https://coveralls.io/repos/davidhalter/jedi/badge.svg?branch=master\n    :target: https://coveralls.io/r/davidhalter/jedi\n    :alt: Coverage status\n\n.. image:: https://pepy.tech/badge/jedi\n    :target: https://pepy.tech/project/jedi\n    :alt: PyPI Downloads\n\n\nJedi is a static analysis tool for Python that is typically used in\nIDEs/editors plugins. Jedi has a focus on autocompletion and goto\nfunctionality. Other features include refactoring, code search and finding\nreferences.\n\nJedi has a simple API to work with. There is a reference implementation as a\n`VIM-Plugin <https://github.com/davidhalter/jedi-vim>`_. Autocompletion in your\nREPL is also possible, IPython uses it natively and for the CPython REPL you\ncan install it. Jedi is well tested and bugs should be rare.\n\nJedi can currently be used with the following editors/projects:\n\n- Vim (jedi-vim_, YouCompleteMe_, deoplete-jedi_, completor.vim_)\n- `Visual Studio Code`_ (via `Python Extension <https://marketplace.visualstudio.com/items?itemName=ms-python.python>`_)\n- Emacs (Jedi.el_, company-mode_, elpy_, anaconda-mode_, ycmd_)\n- Sublime Text (SublimeJEDI_ [ST2 + ST3], anaconda_ [only ST3])\n- TextMate_ (Not sure if it's actually working)\n- Kate_ version 4.13+ supports it natively, you have to enable it, though.  [`see\n  <https://projects.kde.org/projects/kde/applications/kate/repository/show?rev=KDE%2F4.13>`_]\n- Atom_ (autocomplete-python-jedi_)\n- `GNOME Builder`_ (with support for GObject Introspection)\n- Gedit (gedi_)\n- wdb_ - Web Debugger\n- `Eric IDE`_ (Available as a plugin)\n- `IPython 6.0.0+ <https://ipython.readthedocs.io/en/stable/whatsnew/version6.html>`_\n- `xonsh shell <https://xon.sh/contents.html>`_ has `jedi extension <https://xon.sh/xontribs.html#jedi>`_\n\nand many more!\n\nThere are a few language servers that use Jedi:\n\n- `jedi-language-server <https://github.com/pappasam/jedi-language-server>`_\n- `python-language-server <https://github.com/palantir/python-language-server>`_\n- `anakin-language-server <https://github.com/muffinmad/anakin-language-server>`_\n\nHere are some pictures taken from jedi-vim_:\n\n.. image:: https://github.com/davidhalter/jedi/raw/master/docs/_screenshots/screenshot_complete.png\n\nCompletion for almost anything:\n\n.. image:: https://github.com/davidhalter/jedi/raw/master/docs/_screenshots/screenshot_function.png\n\nDocumentation:\n\n.. image:: https://github.com/davidhalter/jedi/raw/master/docs/_screenshots/screenshot_pydoc.png\n\n\nGet the latest version from `github <https://github.com/davidhalter/jedi>`_\n(master branch should always be kind of stable/working).\n\nDocs are available at `https://jedi.readthedocs.org/en/latest/\n<https://jedi.readthedocs.org/en/latest/>`_. Pull requests with enhancements\nand/or fixes are awesome and most welcome. Jedi uses `semantic versioning\n<https://semver.org/>`_.\n\nIf you want to stay **up-to-date** with releases, please **subscribe** to this\nmailing list: https://groups.google.com/g/jedi-announce. To subscribe you can\nsimply send an empty email to ``jedi-announce+subscribe@googlegroups.com``.\n\nIssues & Questions\n==================\n\nYou can file issues and questions in the `issue tracker\n<https://github.com/davidhalter/jedi/>`. Alternatively you can also ask on\n`Stack Overflow <https://stackoverflow.com/questions/tagged/python-jedi>`_ with\nthe label ``python-jedi``.\n\nInstallation\n============\n\n`Check out the docs <https://jedi.readthedocs.org/en/latest/docs/installation.html>`_.\n\nFeatures and Limitations\n========================\n\nJedi's features are listed here:\n`Features <https://jedi.readthedocs.org/en/latest/docs/features.html>`_.\n\nYou can run Jedi on Python 3.6+ but it should also\nunderstand code that is older than those versions. Additionally you should be\nable to use `Virtualenvs <https://jedi.readthedocs.org/en/latest/docs/api.html#environments>`_\nvery well.\n\nTips on how to use Jedi efficiently can be found `here\n<https://jedi.readthedocs.org/en/latest/docs/features.html#recipes>`_.\n\nAPI\n---\n\nYou can find a comprehensive documentation for the\n`API here <https://jedi.readthedocs.org/en/latest/docs/api.html>`_.\n\nAutocompletion / Goto / Documentation\n-------------------------------------\n\nThere are the following commands:\n\n- ``jedi.Script.goto``\n- ``jedi.Script.infer``\n- ``jedi.Script.help``\n- ``jedi.Script.complete``\n- ``jedi.Script.get_references``\n- ``jedi.Script.get_signatures``\n- ``jedi.Script.get_context``\n\nThe returned objects are very powerful and are really all you might need.\n\nAutocompletion in your REPL (IPython, etc.)\n-------------------------------------------\n\nJedi is a dependency of IPython. Autocompletion in IPython with Jedi is\ntherefore possible without additional configuration.\n\nHere is an `example video <https://vimeo.com/122332037>`_ how REPL completion\ncan look like.\nFor the ``python`` shell you can enable tab completion in a `REPL\n<https://jedi.readthedocs.org/en/latest/docs/usage.html#tab-completion-in-the-python-shell>`_.\n\nStatic Analysis\n---------------\n\nFor a lot of forms of static analysis, you can try to use\n``jedi.Script(...).get_names``. It will return a list of names that you can\nthen filter and work with. There is also a way to list the syntax errors in a\nfile: ``jedi.Script.get_syntax_errors``.\n\n\nRefactoring\n-----------\n\nJedi supports the following refactorings:\n\n- ``jedi.Script.inline``\n- ``jedi.Script.rename``\n- ``jedi.Script.extract_function``\n- ``jedi.Script.extract_variable``\n\nCode Search\n-----------\n\nThere is support for module search with ``jedi.Script.search``, and project\nsearch for ``jedi.Project.search``. The way to search is either by providing a\nname like ``foo`` or by using dotted syntax like ``foo.bar``. Additionally you\ncan provide the API type like ``class foo.bar.Bar``. There are also the\nfunctions ``jedi.Script.complete_search`` and ``jedi.Project.complete_search``.\n\nDevelopment\n===========\n\nThere's a pretty good and extensive `development documentation\n<https://jedi.readthedocs.org/en/latest/docs/development.html>`_.\n\nTesting\n=======\n\nThe test suite uses ``pytest``::\n\n    pip install pytest\n\nIf you want to test only a specific Python version (e.g. Python 3.8), it is as\neasy as::\n\n    python3.8 -m pytest\n\nFor more detailed information visit the `testing documentation\n<https://jedi.readthedocs.org/en/latest/docs/testing.html>`_.\n\nAcknowledgements\n================\n\nThanks a lot to all the\n`contributors <https://jedi.readthedocs.org/en/latest/docs/acknowledgements.html>`_!\n\n\n.. _jedi-vim: https://github.com/davidhalter/jedi-vim\n.. _youcompleteme: https://github.com/ycm-core/YouCompleteMe\n.. _deoplete-jedi: https://github.com/zchee/deoplete-jedi\n.. _completor.vim: https://github.com/maralla/completor.vim\n.. _Jedi.el: https://github.com/tkf/emacs-jedi\n.. _company-mode: https://github.com/syohex/emacs-company-jedi\n.. _elpy: https://github.com/jorgenschaefer/elpy\n.. _anaconda-mode: https://github.com/proofit404/anaconda-mode\n.. _ycmd: https://github.com/abingham/emacs-ycmd\n.. _sublimejedi: https://github.com/srusskih/SublimeJEDI\n.. _anaconda: https://github.com/DamnWidget/anaconda\n.. _wdb: https://github.com/Kozea/wdb\n.. _TextMate: https://github.com/lawrenceakka/python-jedi.tmbundle\n.. _Kate: https://kate-editor.org\n.. _Atom: https://atom.io/\n.. _autocomplete-python-jedi: https://atom.io/packages/autocomplete-python-jedi\n.. _GNOME Builder: https://wiki.gnome.org/Apps/Builder\n.. _Visual Studio Code: https://code.visualstudio.com/\n.. _gedi: https://github.com/isamert/gedi\n.. _Eric IDE: https://eric-ide.python-projects.org\n\n\n.. :changelog:\n\nChangelog\n---------\n\nUnreleased\n++++++++++\n\n0.18.0 (2020-12-25)\n+++++++++++++++++++\n\n- Dropped Python 2 and Python 3.5\n- Using ``pathlib.Path()`` as an output instead of ``str`` in most places:\n  - ``Project.path``\n  - ``Script.path``\n  - ``Definition.module_path``\n  - ``Refactoring.get_renames``\n  - ``Refactoring.get_changed_files``\n- Functions with ``@property`` now return ``property`` instead of ``function``\n  in ``Name().type``\n- Started using annotations\n- Better support for the walrus operator\n- Project attributes are now read accessible\n- Removed all deprecations\n\nThis is likely going to be the last minor release before 1.0.\n\n0.17.2 (2020-07-17)\n+++++++++++++++++++\n\n- Added an option to pass environment variables to ``Environment``\n- ``Project(...).path`` exists now\n- Support for Python 3.9\n- A few bugfixes\n\nThis will be the last release that supports Python 2 and Python 3.5.\n``0.18.0`` will be Python 3.6+.\n\n0.17.1 (2020-06-20)\n+++++++++++++++++++\n\n- Django ``Model`` meta class support\n- Django Manager support (completion on Managers/QuerySets)\n- Added Django Stubs to Jedi, thanks to all contributors of the\n  `Django Stubs <https://github.com/typeddjango/django-stubs>`_ project\n- Added ``SyntaxError.get_message``\n- Python 3.9 support\n- Bugfixes (mostly towards Generics)\n\n0.17.0 (2020-04-14)\n+++++++++++++++++++\n\n- Added ``Project`` support. This allows a user to specify which folders Jedi\n  should work with.\n- Added support for Refactoring. The following refactorings have been\n  implemented: ``Script.rename``, ``Script.inline``,\n  ``Script.extract_variable`` and ``Script.extract_function``.\n- Added ``Script.get_syntax_errors`` to display syntax errors in the current\n  script.\n- Added code search capabilities both for individual files and projects. The\n  new functions are ``Project.search``, ``Project.complete_search``,\n  ``Script.search`` and ``Script.complete_search``.\n- Added ``Script.help`` to make it easier to display a help window to people.\n  Now returns pydoc information as well for Python keywords/operators.  This\n  means that on the class keyword it will now return the docstring of Python's\n  builtin function ``help('class')``.\n- The API documentation is now way more readable and complete. Check it out\n  under https://jedi.readthedocs.io. A lot of it has been rewritten.\n- Removed Python 3.4 support\n- Many bugfixes\n\nThis is likely going to be the last minor version that supports Python 2 and\nPython3.5. Bugfixes will be provided in 0.17.1+. The next minor/major version\nwill probably be Jedi 1.0.0.\n\n0.16.0 (2020-01-26)\n+++++++++++++++++++\n\n- **Added** ``Script.get_context`` to get information where you currently are.\n- Completions/type inference of **Pytest fixtures**.\n- Tensorflow, Numpy and Pandas completions should now be about **4-10x faster**\n  after the first time they are used.\n- Dict key completions are working now. e.g. ``d = {1000: 3}; d[10`` will\n  expand to ``1000``.\n- Completion for \"proxies\" works now. These are classes that have a\n  ``__getattr__(self, name)`` method that does a ``return getattr(x, name)``.\n  after loading them initially.\n- Goto on a function/attribute in a class now goes to the definition in its\n  super class.\n- Big **Script API Changes**:\n    - The line and column parameters of ``jedi.Script`` are now deprecated\n    - ``completions`` deprecated, use ``complete`` instead\n    - ``goto_assignments`` deprecated, use ``goto`` instead\n    - ``goto_definitions`` deprecated, use ``infer`` instead\n    - ``call_signatures`` deprecated, use ``get_signatures`` instead\n    - ``usages`` deprecated, use ``get_references`` instead\n    - ``jedi.names`` deprecated, use ``jedi.Script(...).get_names()``\n- ``BaseName.goto_assignments`` renamed to ``BaseName.goto``\n- Add follow_imports to ``Name.goto``. Now its signature matches\n  ``Script.goto``.\n- **Python 2 support deprecated**. For this release it is best effort. Python 2\n  has reached the end of its life and now it's just about a smooth transition.\n  Bugs for Python 2 will not be fixed anymore and a third of the tests are\n  already skipped.\n- Removed ``settings.no_completion_duplicates``. It wasn't tested and nobody\n  was probably using it anyway.\n- Removed ``settings.use_filesystem_cache`` and\n  ``settings.additional_dynamic_modules``, they have no usage anymore. Pretty\n  much nobody was probably using them.\n\n0.15.2 (2019-12-20)\n+++++++++++++++++++\n\n- Signatures are now detected a lot better\n- Add fuzzy completions with ``Script(...).completions(fuzzy=True)``\n- Files bigger than one MB (about 20kLOC) get cropped to avoid getting\n  stuck completely.\n- Many small Bugfixes\n- A big refactoring around contexts/values\n\n0.15.1 (2019-08-13)\n+++++++++++++++++++\n\n- Small bugfix and removal of a print statement\n\n0.15.0 (2019-08-11)\n+++++++++++++++++++\n\n- Added file path completions, there's a **new** ``Completion.type`` now:\n  ``path``. Example: ``'/ho`` -> ``'/home/``\n- ``*args``/``**kwargs`` resolving. If possible Jedi replaces the parameters\n  with the actual alternatives.\n- Better support for enums/dataclasses\n- When using Interpreter, properties are now executed, since a lot of people\n  have complained about this. Discussion in #1299, #1347.\n\nNew APIs:\n\n- ``Name.get_signatures() -> List[Signature]``. Signatures are similar to\n  ``CallSignature``. ``Name.params`` is therefore deprecated.\n- ``Signature.to_string()`` to format signatures.\n- ``Signature.params -> List[ParamName]``, ParamName has the\n  following additional attributes ``infer_default()``, ``infer_annotation()``,\n  ``to_string()``, and ``kind``.\n- ``Name.execute() -> List[Name]``, makes it possible to infer\n  return values of functions.\n\n\n0.14.1 (2019-07-13)\n+++++++++++++++++++\n\n- CallSignature.index should now be working a lot better\n- A couple of smaller bugfixes\n\n0.14.0 (2019-06-20)\n+++++++++++++++++++\n\n- Added ``goto_*(prefer_stubs=True)`` as well as ``goto_*(prefer_stubs=True)``\n- Stubs are used now for type inference\n- Typeshed is used for better type inference\n- Reworked Name.full_name, should have more correct return values\n\n0.13.3 (2019-02-24)\n+++++++++++++++++++\n\n- Fixed an issue with embedded Python, see https://github.com/davidhalter/jedi-vim/issues/870\n\n0.13.2 (2018-12-15)\n+++++++++++++++++++\n\n- Fixed a bug that led to Jedi spawning a lot of subprocesses.\n\n0.13.1 (2018-10-02)\n+++++++++++++++++++\n\n- Bugfixes, because tensorflow completions were still slow.\n\n0.13.0 (2018-10-02)\n+++++++++++++++++++\n\n- A small release. Some bug fixes.\n- Remove Python 3.3 support. Python 3.3 support has been dropped by the Python\n  foundation.\n- Default environments are now using the same Python version as the Python\n  process. In 0.12.x, we used to load the latest Python version on the system.\n- Added ``include_builtins`` as a parameter to usages.\n- ``goto_assignments`` has a new ``follow_builtin_imports`` parameter that\n  changes the previous behavior slightly.\n\n0.12.1 (2018-06-30)\n+++++++++++++++++++\n\n- This release forces you to upgrade parso. If you don't, nothing will work\n  anymore. Otherwise changes should be limited to bug fixes. Unfortunately Jedi\n  still uses a few internals of parso that make it hard to keep compatibility\n  over multiple releases. Parso >=0.3.0 is going to be needed.\n\n0.12.0 (2018-04-15)\n+++++++++++++++++++\n\n- Virtualenv/Environment support\n- F-String Completion/Goto Support\n- Cannot crash with segfaults anymore\n- Cleaned up import logic\n- Understand async/await and autocomplete it (including async generators)\n- Better namespace completions\n- Passing tests for Windows (including CI for Windows)\n- Remove Python 2.6 support\n\n0.11.1 (2017-12-14)\n+++++++++++++++++++\n\n- Parso update - the caching layer was broken\n- Better usages - a lot of internal code was ripped out and improved.\n\n0.11.0 (2017-09-20)\n+++++++++++++++++++\n\n- Split Jedi's parser into a separate project called ``parso``.\n- Avoiding side effects in REPL completion.\n- Numpy docstring support should be much better.\n- Moved the `settings.*recursion*` away, they are no longer usable.\n\n0.10.2 (2017-04-05)\n+++++++++++++++++++\n\n- Python Packaging sucks. Some files were not included in 0.10.1.\n\n0.10.1 (2017-04-05)\n+++++++++++++++++++\n\n- Fixed a few very annoying bugs.\n- Prepared the parser to be factored out of Jedi.\n\n0.10.0 (2017-02-03)\n+++++++++++++++++++\n\n- Actual semantic completions for the complete Python syntax.\n- Basic type inference for ``yield from`` PEP 380.\n- PEP 484 support (most of the important features of it). Thanks Claude! (@reinhrst)\n- Added ``get_line_code`` to ``Name`` and ``Completion`` objects.\n- Completely rewritten the type inference engine.\n- A new and better parser for (fast) parsing diffs of Python code.\n\n0.9.0 (2015-04-10)\n++++++++++++++++++\n\n- The import logic has been rewritten to look more like Python's. There is now\n  an ``InferState.modules`` import cache, which resembles ``sys.modules``.\n- Integrated the parser of 2to3. This will make refactoring possible. It will\n  also be possible to check for error messages (like compiling an AST would give)\n  in the future.\n- With the new parser, the type inference also completely changed. It's now\n  simpler and more readable.\n- Completely rewritten REPL completion.\n- Added ``jedi.names``, a command to do static analysis. Thanks to that\n  sourcegraph guys for sponsoring this!\n- Alpha version of the linter.\n\n\n0.8.1 (2014-07-23)\n+++++++++++++++++++\n\n- Bugfix release, the last release forgot to include files that improve\n  autocompletion for builtin libraries. Fixed.\n\n0.8.0 (2014-05-05)\n+++++++++++++++++++\n\n- Memory Consumption for compiled modules (e.g. builtins, sys) has been reduced\n  drastically. Loading times are down as well (it takes basically as long as an\n  import).\n- REPL completion is starting to become usable.\n- Various small API changes. Generally this release focuses on stability and\n  refactoring of internal APIs.\n- Introducing operator precedence, which makes calculating correct Array\n  indices and ``__getattr__`` strings possible.\n\n0.7.0 (2013-08-09)\n++++++++++++++++++\n\n- Switched from LGPL to MIT license.\n- Added an Interpreter class to the API to make autocompletion in REPL\n  possible.\n- Added autocompletion support for namespace packages.\n- Add sith.py, a new random testing method.\n\n0.6.0 (2013-05-14)\n++++++++++++++++++\n\n- Much faster parser with builtin part caching.\n- A test suite, thanks @tkf.\n\n0.5 versions (2012)\n+++++++++++++++++++\n\n- Initial development.\n\n\n",
          "name": "jedi",
          "author": [
            {
              "type": "Person",
              "name": "David Halter",
              "email": [
                "davidhalter88@gmail.com"
              ],
              "familyName": [
                "Halter"
              ],
              "givenName": [
                "David"
              ]
            }
          ],
          "keywords": "python completion refactoring vim",
          "license": "MIT",
          "codeRepository": "https://pypi.org/project/jedi/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python",
          "applicationCategory": [
            "Software Development",
            "Text Editors",
            "Utilities"
          ],
          "applicationSubCategory": [
            "Libraries",
            "Integrated Development Environments (IDE)"
          ]
        },
        {
          "type": "SoftwarePackage",
          "description": "Jinja\n=====\n\nJinja is a fast, expressive, extensible templating engine. Special\nplaceholders in the template allow writing code similar to Python\nsyntax. Then the template is passed data to render the final document.\n\nIt includes:\n\n-   Template inheritance and inclusion.\n-   Define and import macros within templates.\n-   HTML templates can use autoescaping to prevent XSS from untrusted\n    user input.\n-   A sandboxed environment can safely render untrusted templates.\n-   AsyncIO support for generating templates and calling async\n    functions.\n-   I18N support with Babel.\n-   Templates are compiled to optimized Python code just-in-time and\n    cached, or can be compiled ahead-of-time.\n-   Exceptions point to the correct line in templates to make debugging\n    easier.\n-   Extensible filters, tests, functions, and even syntax.\n\nJinja's philosophy is that while application logic belongs in Python if\npossible, it shouldn't make the template designer's job difficult by\nrestricting functionality too much.\n\n\nInstalling\n----------\n\nInstall and update using `pip`_:\n\n.. code-block:: text\n\n    $ pip install -U Jinja2\n\n.. _pip: https://pip.pypa.io/en/stable/quickstart/\n\n\nIn A Nutshell\n-------------\n\n.. code-block:: jinja\n\n    {% extends \"base.html\" %}\n    {% block title %}Members{% endblock %}\n    {% block content %}\n      <ul>\n      {% for user in users %}\n        <li><a href=\"{{ user.url }}\">{{ user.username }}</a></li>\n      {% endfor %}\n      </ul>\n    {% endblock %}\n\n\nDonate\n------\n\nThe Pallets organization develops and supports Jinja and other popular\npackages. In order to grow the community of contributors and users, and\nallow the maintainers to devote more time to the projects, `please\ndonate today`_.\n\n.. _please donate today: https://palletsprojects.com/donate\n\n\nLinks\n-----\n\n-   Documentation: https://jinja.palletsprojects.com/\n-   Changes: https://jinja.palletsprojects.com/changes/\n-   PyPI Releases: https://pypi.org/project/Jinja2/\n-   Source Code: https://github.com/pallets/jinja/\n-   Issue Tracker: https://github.com/pallets/jinja/issues/\n-   Website: https://palletsprojects.com/p/jinja/\n-   Twitter: https://twitter.com/PalletsTeam\n-   Chat: https://discord.gg/pallets\n\n\n",
          "name": "Jinja2",
          "author": [
            {
              "type": "Person",
              "name": "Armin Ronacher",
              "email": [
                "armin.ronacher@active-4.com"
              ],
              "familyName": [
                "Ronacher"
              ],
              "givenName": [
                "Armin"
              ]
            }
          ],
          "license": "BSD-3-Clause",
          "version": "==2.11.3",
          "codeRepository": "https://pypi.org/project/Jinja2/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python",
          "applicationCategory": [
            "Internet",
            "Text Processing"
          ],
          "applicationSubCategory": [
            "WWW/HTTP",
            "Markup"
          ]
        },
        {
          "type": "SoftwarePackage",
          "description": "==========\njsonschema\n==========\n\n|PyPI| |Pythons| |Travis| |AppVeyor| |Codecov| |ReadTheDocs|\n\n.. |PyPI| image:: https://img.shields.io/pypi/v/jsonschema.svg\n   :alt: PyPI version\n   :target: https://pypi.org/project/jsonschema/\n\n.. |Pythons| image:: https://img.shields.io/pypi/pyversions/jsonschema.svg\n   :alt: Supported Python versions\n   :target: https://pypi.org/project/jsonschema/\n\n.. |Travis| image:: https://travis-ci.com/Julian/jsonschema.svg?branch=master\n   :alt: Travis build status\n   :target: https://travis-ci.com/Julian/jsonschema\n\n.. |AppVeyor| image:: https://ci.appveyor.com/api/projects/status/adtt0aiaihy6muyn/branch/master?svg=true\n   :alt: AppVeyor build status\n   :target: https://ci.appveyor.com/project/Julian/jsonschema\n\n.. |Codecov| image:: https://codecov.io/gh/Julian/jsonschema/branch/master/graph/badge.svg\n   :alt: Codecov Code coverage\n   :target: https://codecov.io/gh/Julian/jsonschema\n\n.. |ReadTheDocs| image:: https://readthedocs.org/projects/python-jsonschema/badge/?version=stable&style=flat\n   :alt: ReadTheDocs status\n   :target: https://python-jsonschema.readthedocs.io/en/stable/\n\n\n``jsonschema`` is an implementation of `JSON Schema <https://json-schema.org>`_\nfor Python (supporting 2.7+ including Python 3).\n\n.. code-block:: python\n\n    >>> from jsonschema import validate\n\n    >>> # A sample schema, like what we'd get from json.load()\n    >>> schema = {\n    ...     \"type\" : \"object\",\n    ...     \"properties\" : {\n    ...         \"price\" : {\"type\" : \"number\"},\n    ...         \"name\" : {\"type\" : \"string\"},\n    ...     },\n    ... }\n\n    >>> # If no exception is raised by validate(), the instance is valid.\n    >>> validate(instance={\"name\" : \"Eggs\", \"price\" : 34.99}, schema=schema)\n\n    >>> validate(\n    ...     instance={\"name\" : \"Eggs\", \"price\" : \"Invalid\"}, schema=schema,\n    ... )                                   # doctest: +IGNORE_EXCEPTION_DETAIL\n    Traceback (most recent call last):\n        ...\n    ValidationError: 'Invalid' is not of type 'number'\n\nIt can also be used from console:\n\n.. code-block:: bash\n\n    $ jsonschema -i sample.json sample.schema\n\nFeatures\n--------\n\n* Full support for\n  `Draft 7 <https://python-jsonschema.readthedocs.io/en/latest/validate/#jsonschema.Draft7Validator>`_,\n  `Draft 6 <https://python-jsonschema.readthedocs.io/en/latest/validate/#jsonschema.Draft6Validator>`_,\n  `Draft 4 <https://python-jsonschema.readthedocs.io/en/latest/validate/#jsonschema.Draft4Validator>`_\n  and\n  `Draft 3 <https://python-jsonschema.readthedocs.io/en/latest/validate/#jsonschema.Draft3Validator>`_\n\n* `Lazy validation <https://python-jsonschema.readthedocs.io/en/latest/validate/#jsonschema.IValidator.iter_errors>`_\n  that can iteratively report *all* validation errors.\n\n* `Programmatic querying <https://python-jsonschema.readthedocs.io/en/latest/errors/>`_\n  of which properties or items failed validation.\n\n\nInstallation\n------------\n\n``jsonschema`` is available on `PyPI <https://pypi.org/project/jsonschema/>`_. You can install using `pip <https://pip.pypa.io/en/stable/>`_:\n\n.. code-block:: bash\n\n    $ pip install jsonschema\n\n\nDemo\n----\n\nTry ``jsonschema`` interactively in this online demo:\n\n.. image:: https://user-images.githubusercontent.com/1155573/56745335-8b158a00-6750-11e9-8776-83fa675939c4.png\n    :target: https://notebooks.ai/demo/gh/Julian/jsonschema\n    :alt: Open Live Demo\n\n\nOnline demo Notebook will look similar to this:\n\n\n.. image:: https://user-images.githubusercontent.com/1155573/56820861-5c1c1880-6823-11e9-802a-ce01c5ec574f.gif\n    :alt: Open Live Demo\n    :width: 480 px\n\n\nRelease Notes\n-------------\n\nv3.1 brings support for ECMA 262 dialect regular expressions\nthroughout schemas, as recommended by the specification. Big\nthanks to @Zac-HD for authoring support in a new `js-regex\n<https://pypi.org/project/js-regex/>`_ library.\n\n\nRunning the Test Suite\n----------------------\n\nIf you have ``tox`` installed (perhaps via ``pip install tox`` or your\npackage manager), running ``tox`` in the directory of your source\ncheckout will run ``jsonschema``'s test suite on all of the versions\nof Python ``jsonschema`` supports. If you don't have all of the\nversions that ``jsonschema`` is tested under, you'll likely want to run\nusing ``tox``'s ``--skip-missing-interpreters`` option.\n\nOf course you're also free to just run the tests on a single version with your\nfavorite test runner. The tests live in the ``jsonschema.tests`` package.\n\n\nBenchmarks\n----------\n\n``jsonschema``'s benchmarks make use of `pyperf\n<https://pyperf.readthedocs.io>`_.\n\nRunning them can be done via ``tox -e perf``, or by invoking the ``pyperf``\ncommands externally (after ensuring that both it and ``jsonschema`` itself are\ninstalled)::\n\n    $ python -m pyperf jsonschema/benchmarks/test_suite.py --hist --output results.json\n\nTo compare to a previous run, use::\n\n    $ python -m pyperf compare_to --table reference.json results.json\n\nSee the ``pyperf`` documentation for more details.\n\n\nCommunity\n---------\n\nThere's a `mailing list <https://groups.google.com/forum/#!forum/jsonschema>`_\nfor this implementation on Google Groups.\n\nPlease join, and feel free to send questions there.\n\n\nContributing\n------------\n\nI'm Julian Berman.\n\n``jsonschema`` is on `GitHub <https://github.com/Julian/jsonschema>`_.\n\nGet in touch, via GitHub or otherwise, if you've got something to contribute,\nit'd be most welcome!\n\nYou can also generally find me on Freenode (nick: ``tos9``) in various\nchannels, including ``#python``.\n\nIf you feel overwhelmingly grateful, you can also woo me with beer money\nvia Google Pay with the email in my GitHub profile.\n\nAnd for companies who appreciate ``jsonschema`` and its continued support\nand growth, ``jsonschema`` is also now supportable via `TideLift\n<https://tidelift.com/subscription/pkg/pypi-jsonschema?utm_source=pypi-j\nsonschema&utm_medium=referral&utm_campaign=readme>`_.\n\n\n",
          "name": "jsonschema",
          "author": [
            {
              "type": "Person",
              "name": "Julian Berman",
              "email": [
                "Julian@GrayVines.com"
              ],
              "familyName": [
                "Berman"
              ],
              "givenName": [
                "Julian"
              ]
            }
          ],
          "version": "==3.2.0",
          "codeRepository": "https://pypi.org/project/jsonschema/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python"
        },
        {
          "type": "SoftwarePackage",
          "description": "# Jupyter Client\n\n[![Build Status](https://github.com/jupyter/jupyter_client/workflows/CI/badge.svg)](https://github.com/jupyter/jupyter_client/actions)\n[![Code Health](https://landscape.io/github/jupyter/jupyter_client/master/landscape.svg?style=flat)](https://landscape.io/github/jupyter/jupyter_client/master)\n\n\n`jupyter_client` contains the reference implementation of the [Jupyter protocol][].\nIt also provides client and kernel management APIs for working with kernels.\n\nIt also provides the `jupyter kernelspec` entrypoint\nfor installing kernelspecs for use with Jupyter frontends.\n\n[Jupyter protocol]: https://jupyter-client.readthedocs.io/en/latest/messaging.html\n\n\n# Development Setup\n\nThe [Jupyter Contributor Guides](http://jupyter.readthedocs.io/en/latest/contributor/content-contributor.html) provide extensive information on contributing code or documentation to Jupyter projects. The limited instructions below for setting up a development environment are for your convenience.\n\n## Coding\n\nYou'll need Python and `pip` on the search path. Clone the Jupyter Client git repository to your computer, for example in `/my/project/jupyter_client`.\nNow create an [editable install](https://pip.pypa.io/en/stable/reference/pip_install/#editable-installs)\nand download the dependencies of code and test suite by executing:\n\n    cd /my/projects/jupyter_client/\n    pip install -e .[test]\n    py.test\n\nThe last command runs the test suite to verify the setup. During development, you can pass filenames to `py.test`, and it will execute only those tests.\n\n## Documentation\n\nThe documentation of Jupyter Client is generated from the files in `docs/` using Sphinx. Instructions for setting up Sphinx with a selection of optional modules are in the [Documentation Guide](https://jupyter.readthedocs.io/en/latest/contributing/docs-contributions/index.html). You'll also need the `make` command.\nFor a minimal Sphinx installation to process the Jupyter Client docs, execute:\n\n    pip install ipykernel sphinx sphinx_rtd_theme\n\nThe following commands build the documentation in HTML format and check for broken links:\n\n    cd /my/projects/jupyter_client/docs/\n    make html linkcheck\n\nPoint your browser to the following URL to access the generated documentation:\n\n_file:///my/projects/jupyter\\_client/docs/\\_build/html/index.html_\n\n\n\n",
          "name": "jupyter-client",
          "author": [
            {
              "type": "Person",
              "name": "Jupyter Development",
              "familyName": [
                "Development"
              ],
              "givenName": [
                "Jupyter"
              ]
            }
          ],
          "keywords": "Interactive,Interpreter,Shell,Web",
          "license": "BSD",
          "codeRepository": "https://pypi.org/project/jupyter-client/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python"
        },
        {
          "type": "SoftwarePackage",
          "description": "There is no reason to install this package on its own.\n\n\n",
          "name": "jupyter-core",
          "author": [
            {
              "type": "Person",
              "name": "Jupyter Development",
              "familyName": [
                "Development"
              ],
              "givenName": [
                "Jupyter"
              ]
            }
          ],
          "license": "BSD",
          "codeRepository": "https://pypi.org/project/jupyter-core/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python"
        },
        {
          "type": "SoftwarePackage",
          "name": "jupyterlab-pygments",
          "author": [
            {
              "type": "Person",
              "name": "Jupyter Development",
              "familyName": [
                "Development"
              ],
              "givenName": [
                "Jupyter"
              ]
            }
          ],
          "keywords": "jupyterlab,pygments",
          "license": "BSD",
          "version": "==0.1.2",
          "codeRepository": "https://pypi.org/project/jupyterlab-pygments/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python"
        },
        {
          "type": "SoftwarePackage",
          "description": "Jupyter Widgets JupyterLab Extension\n====================================\n\nA JupyterLab 3.0 extension for Jupyter/IPython widgets.\n\n## Installation\n\nTo enable ipywidgets support in JupyterLab 3.x:\n\n```bash\npip install jupyterlab_widgets\n```\n\n### Version compatibility\n\nPrior to JupyterLab 3.0, use the appropriate command from the following list\nto install a compatible JupyterLab extension.\n\n* For JupyterLab 0.30, use `jupyter labextension install @jupyter-widgets/jupyterlab-manager@0.31`\n* For JupyterLab 0.31rc1, use `jupyter labextension install @jupyter-widgets/jupyterlab-manager@0.32`\n* For JupyterLab 0.31rc2, use `jupyter labextension install @jupyter-widgets/jupyterlab-manager@0.33`\n* For JupyterLab 0.31.x, use `jupyter labextension install @jupyter-widgets/jupyterlab-manager@0.34`\n* For JupyterLab 0.32.x, use `jupyter labextension install @jupyter-widgets/jupyterlab-manager@0.35`\n* For JupyterLab 0.33.x, use `jupyter labextension install @jupyter-widgets/jupyterlab-manager@0.36`\n* For JupyterLab 0.34.x, use `jupyter labextension install @jupyter-widgets/jupyterlab-manager@0.37`\n* For JupyterLab 0.35.x, use `jupyter labextension install @jupyter-widgets/jupyterlab-manager@0.38`\n* For JupyterLab 1.0.x and 1.1.x, use `jupyter labextension install @jupyter-widgets/jupyterlab-manager@1.0`\n* For JupyterLab 1.2.x, use `jupyter labextension install @jupyter-widgets/jupyterlab-manager@1.1`\n* For JupyterLab 2.x, use `jupyter labextension install @jupyter-widgets/jupyterlab-manager@2`\n\n\n\n## Contributing\n\n### Development install\n\nNote: You will need Node.js to build the extension package.\n\nThe `jlpm` command is JupyterLab's pinned version of\n[yarn](https://yarnpkg.com/) that is installed with JupyterLab. You may use\n`yarn` or `npm` in lieu of `jlpm` below.\n\n```bash\n# Clone the repo to your local environment\n# Change directory to the jupyterlab_widgets directory\n# Install package in development mode\npip install -e .\n# Link your development version of the extension with JupyterLab\njupyter labextension develop . --overwrite\n# Rebuild extension Typescript source after making changes\njlpm run build\n```\n\nYou can watch the source directory and run JupyterLab at the same time in different terminals to watch for changes in the extension's source and automatically rebuild the extension.\n\n```bash\n# Watch the source directory in one terminal, automatically rebuilding when needed\njlpm run watch\n# Run JupyterLab in another terminal\njupyter lab\n```\n\nWith the watch command running, every saved change will immediately be built locally and available in your running JupyterLab. Refresh JupyterLab to load the change in your browser (you may need to wait several seconds for the extension to be rebuilt).\n\n### Uninstall\n\n```bash\npip uninstall jupyterlab_widgets\n```\n\n\n",
          "name": "jupyterlab-widgets",
          "author": [
            {
              "type": "Person",
              "name": "Jupyter Development",
              "familyName": [
                "Development"
              ],
              "givenName": [
                "Jupyter"
              ]
            }
          ],
          "keywords": "Jupyter,JupyterLab,JupyterLab3",
          "license": "BSD-3-Clause",
          "version": "==1.0.0",
          "codeRepository": "https://pypi.org/project/jupyterlab-widgets/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python"
        },
        {
          "type": "SoftwarePackage",
          "description": "Welcome to Kiwi\n===============\n\n.. image:: https://travis-ci.org/nucleic/kiwi.svg?branch=master\n    :target: https://travis-ci.org/nucleic/kiwi\n.. image:: https://github.com/nucleic/kiwi/workflows/Continuous%20Integration/badge.svg\n    :target: https://github.com/nucleic/kiwi/actions\n.. image:: https://github.com/nucleic/kiwi/workflows/Documentation%20building/badge.svg\n    :target: https://github.com/nucleic/kiwi/actions\n.. image:: https://codecov.io/gh/nucleic/kiwi/branch/master/graph/badge.svg\n  :target: https://codecov.io/gh/nucleic/kiwi\n.. image:: https://readthedocs.org/projects/kiwisolver/badge/?version=latest\n    :target: https://kiwisolver.readthedocs.io/en/latest/?badge=latest\n    :alt: Documentation Status\n\nKiwi is an efficient C++ implementation of the Cassowary constraint solving\nalgorithm. Kiwi is an implementation of the algorithm based on the seminal\nCassowary paper. It is *not* a refactoring of the original C++ solver. Kiwi\nhas been designed from the ground up to be lightweight and fast. Kiwi ranges\nfrom 10x to 500x faster than the original Cassowary solver with typical use\ncases gaining a 40x improvement. Memory savings are consistently > 5x.\n\nIn addition to the C++ solver, Kiwi ships with hand-rolled Python bindings for\nPython 3.6+.\n\n\n",
          "name": "kiwisolver",
          "author": [
            {
              "type": "Person",
              "name": "The Nucleic",
              "familyName": [
                "Nucleic"
              ],
              "givenName": [
                "The"
              ]
            }
          ],
          "license": "BSD",
          "codeRepository": "https://pypi.org/project/kiwisolver/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python"
        },
        {
          "type": "SoftwarePackage",
          "description": "MarkupSafe\n==========\n\nMarkupSafe implements a text object that escapes characters so it is\nsafe to use in HTML and XML. Characters that have special meanings are\nreplaced so that they display as the actual characters. This mitigates\ninjection attacks, meaning untrusted user input can safely be displayed\non a page.\n\n\nInstalling\n----------\n\nInstall and update using `pip`_:\n\n.. code-block:: text\n\n    pip install -U MarkupSafe\n\n.. _pip: https://pip.pypa.io/en/stable/quickstart/\n\n\nExamples\n--------\n\n.. code-block:: pycon\n\n    >>> from markupsafe import Markup, escape\n\n    >>> # escape replaces special characters and wraps in Markup\n    >>> escape(\"<script>alert(document.cookie);</script>\")\n    Markup('&lt;script&gt;alert(document.cookie);&lt;/script&gt;')\n\n    >>> # wrap in Markup to mark text \"safe\" and prevent escaping\n    >>> Markup(\"<strong>Hello</strong>\")\n    Markup('<strong>hello</strong>')\n\n    >>> escape(Markup(\"<strong>Hello</strong>\"))\n    Markup('<strong>hello</strong>')\n\n    >>> # Markup is a str subclass\n    >>> # methods and operators escape their arguments\n    >>> template = Markup(\"Hello <em>{name}</em>\")\n    >>> template.format(name='\"World\"')\n    Markup('Hello <em>&#34;World&#34;</em>')\n\n\nDonate\n------\n\nThe Pallets organization develops and supports MarkupSafe and other\npopular packages. In order to grow the community of contributors and\nusers, and allow the maintainers to devote more time to the projects,\n`please donate today`_.\n\n.. _please donate today: https://palletsprojects.com/donate\n\n\nLinks\n-----\n\n-   Documentation: https://markupsafe.palletsprojects.com/\n-   Changes: https://markupsafe.palletsprojects.com/changes/\n-   PyPI Releases: https://pypi.org/project/MarkupSafe/\n-   Source Code: https://github.com/pallets/markupsafe/\n-   Issue Tracker: https://github.com/pallets/markupsafe/issues/\n-   Website: https://palletsprojects.com/p/markupsafe/\n-   Twitter: https://twitter.com/PalletsTeam\n-   Chat: https://discord.gg/pallets\n\n\n",
          "name": "MarkupSafe",
          "author": [
            {
              "type": "Person",
              "name": "Armin Ronacher",
              "email": [
                "armin.ronacher@active-4.com"
              ],
              "familyName": [
                "Ronacher"
              ],
              "givenName": [
                "Armin"
              ]
            }
          ],
          "license": "BSD-3-Clause",
          "version": "==1.1.1",
          "codeRepository": "https://pypi.org/project/MarkupSafe/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python",
          "applicationCategory": [
            "Internet",
            "Text Processing"
          ],
          "applicationSubCategory": [
            "WWW/HTTP",
            "Markup"
          ]
        },
        {
          "type": "SoftwarePackage",
          "description": "|PyPi|_ |Downloads|_ |NUMFocus|_\n\n|DiscourseBadge|_ |Gitter|_ |GitHubIssues|_ |GitTutorial|_\n\n|GitHubActions|_ |AzurePipelines|_ |AppVeyor|_ |Codecov|_ |LGTM|_\n\n.. |GitHubActions| image:: https://github.com/matplotlib/matplotlib/workflows/Tests/badge.svg\n.. _GitHubActions: https://github.com/matplotlib/matplotlib/actions?query=workflow%3ATests\n\n.. |AzurePipelines| image:: https://dev.azure.com/matplotlib/matplotlib/_apis/build/status/matplotlib.matplotlib?branchName=master\n.. _AzurePipelines: https://dev.azure.com/matplotlib/matplotlib/_build/latest?definitionId=1&branchName=master\n\n.. |AppVeyor| image:: https://ci.appveyor.com/api/projects/status/github/matplotlib/matplotlib?branch=master&svg=true\n.. _AppVeyor: https://ci.appveyor.com/project/matplotlib/matplotlib\n\n.. |Codecov| image:: https://codecov.io/github/matplotlib/matplotlib/badge.svg?branch=master&service=github\n.. _Codecov: https://codecov.io/github/matplotlib/matplotlib?branch=master\n\n.. |LGTM| image:: https://img.shields.io/lgtm/grade/python/g/matplotlib/matplotlib.svg?logo=lgtm&logoWidth=18\n.. _LGTM: https://lgtm.com/projects/g/matplotlib/matplotlib\n\n.. |DiscourseBadge| image:: https://img.shields.io/badge/help_forum-discourse-blue.svg\n.. _DiscourseBadge: https://discourse.matplotlib.org\n\n.. |Gitter| image:: https://badges.gitter.im/matplotlib/matplotlib.svg\n.. _Gitter: https://gitter.im/matplotlib/matplotlib\n\n.. |GitHubIssues| image:: https://img.shields.io/badge/issue_tracking-github-blue.svg\n.. _GitHubIssues: https://github.com/matplotlib/matplotlib/issues\n\n.. |GitTutorial| image:: https://img.shields.io/badge/PR-Welcome-%23FF8300.svg?\n.. _GitTutorial: https://git-scm.com/book/en/v2/GitHub-Contributing-to-a-Project\n\n.. |PyPi| image:: https://badge.fury.io/py/matplotlib.svg\n.. _PyPi: https://badge.fury.io/py/matplotlib\n\n.. |Downloads| image:: https://pepy.tech/badge/matplotlib/month\n.. _Downloads: https://pepy.tech/project/matplotlib\n\n.. |NUMFocus| image:: https://img.shields.io/badge/powered%20by-NumFOCUS-orange.svg?style=flat&colorA=E1523D&colorB=007D8A\n.. _NUMFocus: https://numfocus.org\n\n.. image:: https://matplotlib.org/_static/logo2.svg\n\nMatplotlib is a comprehensive library for creating static, animated, and interactive visualizations in Python.\n\nCheck out our `home page <https://matplotlib.org/>`_ for more information.\n\n.. image:: https://matplotlib.org/_static/readme_preview.png\n\nMatplotlib produces publication-quality figures in a variety of hardcopy formats\nand interactive environments across platforms. Matplotlib can be used in Python scripts,\nthe Python and IPython shell, web application servers, and various\ngraphical user interface toolkits.\n\n\nInstall\n=======\n\nFor installation instructions and requirements, see `INSTALL.rst <INSTALL.rst>`_  or the\n`install <https://matplotlib.org/users/installing.html>`_ documentation.\n\nTest\n====\n\nAfter installation, launch the test suite::\n\n  python -m pytest\n\nRead the `testing guide <https://matplotlib.org/devel/testing.html>`_ for more information and alternatives.\n\nContribute\n==========\nYou've discovered a bug or something else you want to change - excellent!\n\nYou've worked out a way to fix it – even better!\n\nYou want to tell us about it – best of all!\n\nStart at the `contributing guide <https://matplotlib.org/devdocs/devel/contributing.html>`_!\n\nContact\n=======\n\n`Discourse <https://discourse.matplotlib.org/>`_ is the discussion forum for general questions and discussions and our recommended starting point.\n\nOur active mailing lists (which are mirrored on Discourse) are:\n\n* `Users <https://mail.python.org/mailman/listinfo/matplotlib-users>`_ mailing list: matplotlib-users@python.org\n* `Announcement  <https://mail.python.org/mailman/listinfo/matplotlib-announce>`_ mailing list: matplotlib-announce@python.org\n* `Development <https://mail.python.org/mailman/listinfo/matplotlib-devel>`_ mailing list: matplotlib-devel@python.org\n\nGitter_ is for coordinating development and asking questions directly related\nto contributing to matplotlib.\n\n\nCiting Matplotlib\n=================\nIf Matplotlib contributes to a project that leads to publication, please\nacknowledge this by citing Matplotlib.\n\n`A ready-made citation entry <https://matplotlib.org/citing.html>`_ is available.",
          "name": "matplotlib",
          "author": [
            {
              "type": "Person",
              "name": "John D.",
              "familyName": [
                "D."
              ],
              "givenName": [
                "John"
              ]
            }
          ],
          "license": "PSF",
          "codeRepository": "https://pypi.org/project/matplotlib/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python",
          "applicationCategory": [
            "Scientific/Engineering"
          ],
          "applicationSubCategory": [
            "Visualization"
          ]
        },
        {
          "type": "SoftwarePackage",
          "description": "Mistune\n=======\n\nThe fastest markdown parser in pure Python with renderer features,\ninspired by marked_.\n\n.. image:: https://img.shields.io/badge/donate-lepture-green.svg\n   :target: https://lepture.com/donate\n   :alt: Donate lepture\n.. image:: https://img.shields.io/pypi/wheel/mistune.svg?style=flat\n   :target: https://pypi.python.org/pypi/mistune/\n   :alt: Wheel Status\n.. image:: https://anaconda.org/conda-forge/mistune/badges/version.svg\n   :target: https://anaconda.org/conda-forge/mistune\n   :alt: Conda Version\n.. image:: https://img.shields.io/pypi/v/mistune.svg\n   :target: https://pypi.python.org/pypi/mistune/\n   :alt: Latest Version\n.. image:: https://travis-ci.org/lepture/mistune.svg?branch=master\n   :target: https://travis-ci.org/lepture/mistune\n   :alt: Travis CI Status\n.. image:: https://coveralls.io/repos/lepture/mistune/badge.svg?branch=master\n   :target: https://coveralls.io/r/lepture/mistune\n   :alt: Coverage Status\n.. image:: https://ci.appveyor.com/api/projects/status/8ai8tfwp75oela17?svg=true\n   :target: https://ci.appveyor.com/project/lepture/mistune\n   :alt: App Veyor CI Status\n\n.. _marked: https://github.com/chjj/marked\n\n\nFeatures\n--------\n\n* **Pure Python**. Tested in Python 2.7, Python 3.5+ and PyPy.\n* **Very Fast**. It is the fastest in all **pure Python** markdown parsers.\n* **More Features**. Table, footnotes, autolink, fenced code etc.\n\nView the `benchmark results <https://github.com/lepture/mistune/issues/1>`_.\n\nInstallation\n------------\n\nInstalling mistune with pip::\n\n    $ pip install mistune\n\n\nMistune can be faster, if you compile with cython::\n\n    $ pip install cython mistune\n\n\nBasic Usage\n-----------\n\nA simple API that render a markdown formatted text:\n\n.. code:: python\n\n    import mistune\n\n    mistune.markdown('I am using **mistune markdown parser**')\n    # output: <p>I am using <strong>mistune markdown parser</strong></p>\n\nIf you care about performance, it is better to re-use the Markdown instance:\n\n.. code:: python\n\n    import mistune\n\n    markdown = mistune.Markdown()\n    markdown('I am using **mistune markdown parser**')\n\nMistune has enabled all features by default. You don't have to configure\nanything. But there are options for you to change the parser behaviors.\n\n\nOptions\n-------\n\nHere is a list of all options that will affect the rendering results,\nconfigure them with ``mistune.Renderer``:\n\n.. code:: python\n\n    renderer = mistune.Renderer(escape=True, hard_wrap=True)\n    # use this renderer instance\n    markdown = mistune.Markdown(renderer=renderer)\n    markdown(text)\n\n* **escape**: if set to *False*, all raw html tags will not be escaped.\n* **hard_wrap**: if set to *True*, it will has GFM line breaks feature.\n  All new lines will be replaced with ``<br>`` tag\n* **use_xhtml**: if set to *True*, all tags will be in xhtml, for example: ``<hr />``.\n* **parse_block_html**: parse text only in block level html.\n* **parse_inline_html**: parse text only in inline level html.\n\nWhen using the default renderer, you can use one of the following shortcuts::\n\n    mistune.markdown(text, escape=True, hard_wrap=True)\n\n    markdown = mistune.Markdown(escape=True, hard_wrap=True)\n    markdown(text)\n\n\nRenderer\n--------\n\nLike misaka/sundown, you can influence the rendering by custom renderers.\nAll you need to do is subclassing a `Renderer` class.\n\nHere is an example of code highlighting:\n\n.. code:: python\n\n    import mistune\n    from pygments import highlight\n    from pygments.lexers import get_lexer_by_name\n    from pygments.formatters import html\n\n    class HighlightRenderer(mistune.Renderer):\n        def block_code(self, code, lang):\n            if not lang:\n                return '\\n<pre><code>%s</code></pre>\\n' % \\\n                    mistune.escape(code)\n            lexer = get_lexer_by_name(lang, stripall=True)\n            formatter = html.HtmlFormatter()\n            return highlight(code, lexer, formatter)\n\n    renderer = HighlightRenderer()\n    markdown = mistune.Markdown(renderer=renderer)\n    print(markdown('```python\\nassert 1 == 1\\n```'))\n\nFind more renderers in `mistune-contrib`_.\n\nBlock Level\n~~~~~~~~~~~\n\nHere is a list of block level renderer API::\n\n    block_code(code, language=None)\n    block_quote(text)\n    block_html(html)\n    header(text, level, raw=None)\n    hrule()\n    list(body, ordered=True)\n    list_item(text)\n    paragraph(text)\n    table(header, body)\n    table_row(content)\n    table_cell(content, **flags)\n\nThe *flags* tells you whether it is header with ``flags['header']``. And it\nalso tells you the align with ``flags['align']``.\n\n\nSpan Level\n~~~~~~~~~~\n\nHere is a list of span level renderer API::\n\n    autolink(link, is_email=False)\n    codespan(text)\n    double_emphasis(text)\n    emphasis(text)\n    image(src, title, alt_text)\n    linebreak()\n    newline()\n    link(link, title, content)\n    strikethrough(text)\n    text(text)\n    inline_html(text)\n\nFootnotes\n~~~~~~~~~\n\nHere is a list of renderers related to footnotes::\n\n    footnote_ref(key, index)\n    footnote_item(key, text)\n    footnotes(text)\n\nLexers\n------\n\nSometimes you want to add your own rules to Markdown, such as GitHub Wiki\nlinks. You can't achieve this goal with renderers. You will need to deal\nwith the lexers, it would be a little difficult for the first time.\n\nWe will take an example for GitHub Wiki links: ``[[Page 2|Page 2]]``.\nIt is an inline grammar, which requires custom ``InlineGrammar`` and\n``InlineLexer``:\n\n.. code:: python\n\n    import copy,re\n    from mistune import Renderer, InlineGrammar, InlineLexer\n\n    class WikiLinkRenderer(Renderer):\n        def wiki_link(self, alt, link):\n            return '<a href=\"%s\">%s</a>' % (link, alt)\n\n    class WikiLinkInlineLexer(InlineLexer):\n        def enable_wiki_link(self):\n            # add wiki_link rules\n            self.rules.wiki_link = re.compile(\n                r'\\[\\['                   # [[\n                r'([\\s\\S]+?\\|[\\s\\S]+?)'   # Page 2|Page 2\n                r'\\]\\](?!\\])'             # ]]\n            )\n\n            # Add wiki_link parser to default rules\n            # you can insert it some place you like\n            # but place matters, maybe 3 is not good\n            self.default_rules.insert(3, 'wiki_link')\n\n        def output_wiki_link(self, m):\n            text = m.group(1)\n            alt, link = text.split('|')\n            # you can create an custom render\n            # you can also return the html if you like\n            return self.renderer.wiki_link(alt, link)\n\nYou should pass the inline lexer to ``Markdown`` parser:\n\n.. code:: python\n\n    renderer = WikiLinkRenderer()\n    inline = WikiLinkInlineLexer(renderer)\n    # enable the feature\n    inline.enable_wiki_link()\n    markdown = Markdown(renderer, inline=inline)\n    markdown('[[Link Text|Wiki Link]]')\n\nIt is the same with block level lexer. It would take a while to understand\nthe whole mechanism. But you won't do the trick a lot.\n\n\nContribution & Extensions\n-------------------------\n\nMistune itself doesn't accept any extension. It will always be a simple one\nfile script.\n\nIf you want to add features, you can head over to `mistune-contrib`_.\n\nHere are some extensions already in `mistune-contrib`_:\n\n* Math/MathJax features\n* Highlight Code Renderer\n* TOC table of content features\n* MultiMarkdown Metadata parser\n\nGet inspired with the contrib repository.\n\n.. _`mistune-contrib`: https://github.com/lepture/mistune-contrib\n\n\n",
          "name": "mistune",
          "author": [
            {
              "type": "Person",
              "name": "Hsiaoming Yang",
              "email": [
                "me@lepture.com"
              ],
              "familyName": [
                "Yang"
              ],
              "givenName": [
                "Hsiaoming"
              ]
            }
          ],
          "license": "BSD",
          "version": "==0.8.4",
          "codeRepository": "https://pypi.org/project/mistune/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python",
          "applicationCategory": [
            "Software Development",
            "Text Processing"
          ],
          "applicationSubCategory": [
            "Libraries",
            "Markup"
          ]
        },
        {
          "type": "SoftwarePackage",
          "description": "==============\nMore Itertools\n==============\n\n.. image:: https://readthedocs.org/projects/more-itertools/badge/?version=latest\n  :target: https://more-itertools.readthedocs.io/en/stable/\n\nPython's ``itertools`` library is a gem - you can compose elegant solutions\nfor a variety of problems with the functions it provides. In ``more-itertools``\nwe collect additional building blocks, recipes, and routines for working with\nPython iterables.\n\n+------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| Grouping               | `chunked <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.chunked>`_,                                                                                                                        |\n|                        | `ichunked <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.ichunked>`_,                                                                                                                      |\n|                        | `sliced <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.sliced>`_,                                                                                                                          |\n|                        | `distribute <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.distribute>`_,                                                                                                                  |\n|                        | `divide <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.divide>`_,                                                                                                                          |\n|                        | `split_at <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.split_at>`_,                                                                                                                      |\n|                        | `split_before <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.split_before>`_,                                                                                                              |\n|                        | `split_after <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.split_after>`_,                                                                                                                |\n|                        | `split_into <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.split_into>`_,                                                                                                                  |\n|                        | `split_when <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.split_when>`_,                                                                                                                  |\n|                        | `bucket <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.bucket>`_,                                                                                                                          |\n|                        | `unzip <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.unzip>`_,                                                                                                                            |\n|                        | `grouper <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.grouper>`_,                                                                                                                        |\n|                        | `partition <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.partition>`_                                                                                                                     |\n+------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| Lookahead and lookback | `spy <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.spy>`_,                                                                                                                                |\n|                        | `peekable <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.peekable>`_,                                                                                                                      |\n|                        | `seekable <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.seekable>`_                                                                                                                       |\n+------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| Windowing              | `windowed <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.windowed>`_,                                                                                                                      |\n|                        | `substrings <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.substrings>`_,                                                                                                                  |\n|                        | `substrings_indexes <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.substrings_indexes>`_,                                                                                                  |\n|                        | `stagger <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.stagger>`_,                                                                                                                        |\n|                        | `windowed_complete <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.windowed_complete>`_,                                                                                                    |\n|                        | `pairwise <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.pairwise>`_                                                                                                                       |\n+------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| Augmenting             | `count_cycle <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.count_cycle>`_,                                                                                                                |\n|                        | `intersperse <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.intersperse>`_,                                                                                                                |\n|                        | `padded <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.padded>`_,                                                                                                                          |\n|                        | `mark_ends <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.mark_ends>`_,                                                                                                                    |\n|                        | `repeat_last <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.repeat_last>`_,                                                                                                                |\n|                        | `adjacent <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.adjacent>`_,                                                                                                                      |\n|                        | `groupby_transform <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.groupby_transform>`_,                                                                                                    |\n|                        | `padnone <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.padnone>`_,                                                                                                                        |\n|                        | `ncycles <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.ncycles>`_                                                                                                                         |\n+------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| Combining              | `collapse <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.collapse>`_,                                                                                                                      |\n|                        | `sort_together <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.sort_together>`_,                                                                                                            |\n|                        | `interleave <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.interleave>`_,                                                                                                                  |\n|                        | `interleave_longest <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.interleave_longest>`_,                                                                                                  |\n|                        | `zip_offset <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.zip_offset>`_,                                                                                                                  |\n|                        | `zip_equal <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.zip_equal>`_,                                                                                                                    |\n|                        | `dotproduct <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.dotproduct>`_,                                                                                                                  |\n|                        | `convolve <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.convolve>`_,                                                                                                                      |\n|                        | `flatten <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.flatten>`_,                                                                                                                        |\n|                        | `roundrobin <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.roundrobin>`_,                                                                                                                  |\n|                        | `prepend <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.prepend>`_,                                                                                                                        |\n|                        | `value_chain <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.value_chain>`_                                                                                                                 |\n+------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| Summarizing            | `ilen <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.ilen>`_,                                                                                                                              |\n|                        | `unique_to_each <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.unique_to_each>`_,                                                                                                          |\n|                        | `sample <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.sample>`_,                                                                                                                          |\n|                        | `consecutive_groups <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.consecutive_groups>`_,                                                                                                  |\n|                        | `run_length <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.run_length>`_,                                                                                                                  |\n|                        | `map_reduce <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.map_reduce>`_,                                                                                                                  |\n|                        | `exactly_n <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.exactly_n>`_,                                                                                                                    |\n|                        | `is_sorted <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.is_sorted>`_,                                                                                                                    |\n|                        | `all_equal <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.all_equal>`_,                                                                                                                    |\n|                        | `all_unique <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.all_unique>`_,                                                                                                                  |\n|                        | `first_true <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.first_true>`_,                                                                                                                  |\n|                        | `quantify <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.quantify>`_                                                                                                                       |\n+------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| Selecting              | `islice_extended <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.islice_extended>`_,                                                                                                        |\n|                        | `first <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.first>`_,                                                                                                                            |\n|                        | `last <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.last>`_,                                                                                                                              |\n|                        | `one <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.one>`_,                                                                                                                                |\n|                        | `only <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.only>`_,                                                                                                                              |\n|                        | `strip <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.strip>`_,                                                                                                                            |\n|                        | `lstrip <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.lstrip>`_,                                                                                                                          |\n|                        | `rstrip <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.rstrip>`_,                                                                                                                          |\n|                        | `filter_except <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.filter_except>`_                                                                                                             |\n|                        | `map_except <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.map_except>`_                                                                                                                   |\n|                        | `nth_or_last <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.nth_or_last>`_,                                                                                                                |\n|                        | `nth <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.nth>`_,                                                                                                                                |\n|                        | `take <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.take>`_,                                                                                                                              |\n|                        | `tail <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.tail>`_,                                                                                                                              |\n|                        | `unique_everseen <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertoo ls.unique_everseen>`_,                                                                                                       |\n|                        | `unique_justseen <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.unique_justseen>`_                                                                                                         |\n+------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| Combinatorics          | `distinct_permutations <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.distinct_permutations>`_,                                                                                            |\n|                        | `distinct_combinations <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.distinct_combinations>`_,                                                                                            |\n|                        | `circular_shifts <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.circular_shifts>`_,                                                                                                        |\n|                        | `partitions <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.partitions>`_,                                                                                                                  |\n|                        | `set_partitions <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.set_partitions>`_,                                                                                                          |\n|                        | `product_index <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.product_index>`_,                                                                                                            |\n|                        | `combination_index <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.combination_index>`_,                                                                                                    |\n|                        | `permutation_index <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.permutation_index>`_,                                                                                                    |\n|                        | `powerset <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.powerset>`_,                                                                                                                      |\n|                        | `random_product <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.random_product>`_,                                                                                                          |\n|                        | `random_permutation <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.random_permutation>`_,                                                                                                  |\n|                        | `random_combination <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.random_combination>`_,                                                                                                  |\n|                        | `random_combination_with_replacement <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.random_combination_with_replacement>`_,                                                                |\n|                        | `nth_product <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.nth_product>`_                                                                                                                 |\n|                        | `nth_permutation <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.nth_permutation>`_                                                                                                         |\n|                        | `nth_combination <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.nth_combination>`_                                                                                                         |\n+------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| Wrapping               | `always_iterable <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.always_iterable>`_,                                                                                                        |\n|                        | `always_reversible <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.always_reversible>`_,                                                                                                    |\n|                        | `countable <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.countable>`_,                                                                                                                    |\n|                        | `consumer <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.consumer>`_,                                                                                                                      |\n|                        | `with_iter <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.with_iter>`_,                                                                                                                    |\n|                        | `iter_except <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.iter_except>`_                                                                                                                 |\n+------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| Others                 | `locate <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.locate>`_,                                                                                                                          |\n|                        | `rlocate <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.rlocate>`_,                                                                                                                        |\n|                        | `replace <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.replace>`_,                                                                                                                        |\n|                        | `numeric_range <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.numeric_range>`_,                                                                                                            |\n|                        | `side_effect <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.side_effect>`_,                                                                                                                |\n|                        | `iterate <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.iterate>`_,                                                                                                                        |\n|                        | `difference <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.difference>`_,                                                                                                                  |\n|                        | `make_decorator <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.make_decorator>`_,                                                                                                          |\n|                        | `SequenceView <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.SequenceView>`_,                                                                                                              |\n|                        | `time_limited <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.time_limited>`_,                                                                                                              |\n|                        | `consume <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.consume>`_,                                                                                                                        |\n|                        | `tabulate <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.tabulate>`_,                                                                                                                      |\n|                        | `repeatfunc <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.repeatfunc>`_                                                                                                                   |\n+------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n\n\nGetting started\n===============\n\nTo get started, install the library with `pip <https://pip.pypa.io/en/stable/>`_:\n\n.. code-block:: shell\n\n    pip install more-itertools\n\nThe recipes from the `itertools docs <https://docs.python.org/3/library/itertools.html#itertools-recipes>`_\nare included in the top-level package:\n\n.. code-block:: python\n\n    >>> from more_itertools import flatten\n    >>> iterable = [(0, 1), (2, 3)]\n    >>> list(flatten(iterable))\n    [0, 1, 2, 3]\n\nSeveral new recipes are available as well:\n\n.. code-block:: python\n\n    >>> from more_itertools import chunked\n    >>> iterable = [0, 1, 2, 3, 4, 5, 6, 7, 8]\n    >>> list(chunked(iterable, 3))\n    [[0, 1, 2], [3, 4, 5], [6, 7, 8]]\n\n    >>> from more_itertools import spy\n    >>> iterable = (x * x for x in range(1, 6))\n    >>> head, iterable = spy(iterable, n=3)\n    >>> list(head)\n    [1, 4, 9]\n    >>> list(iterable)\n    [1, 4, 9, 16, 25]\n\n\n\nFor the full listing of functions, see the `API documentation <https://more-itertools.readthedocs.io/en/stable/api.html>`_.\n\n\nLinks elsewhere\n===============\n\nBlog posts about ``more-itertools``:\n\n* `Yo, I heard you like decorators <https://www.bbayles.com/index/decorator_factory>`__\n* `Tour of Python Itertools <https://martinheinz.dev/blog/16>`__ (`Alternate <https://dev.to/martinheinz/tour-of-python-itertools-4122>`__)\n\n\nDevelopment\n===========\n\n``more-itertools`` is maintained by `@erikrose <https://github.com/erikrose>`_\nand `@bbayles <https://github.com/bbayles>`_, with help from `many others <https://github.com/more-itertools/more-itertools/graphs/contributors>`_.\nIf you have a problem or suggestion, please file a bug or pull request in this\nrepository. Thanks for contributing!\n\n\nVersion History\n===============\n\n\n   :noindex:\n\n8.8.0\n-----\n\n* New functions\n    * countable (thanks to krzysieq)\n\n* Changes to existing functions\n    * split_before was updated to handle empy collections (thanks to TiunovNN)\n    * unique_everseen got a performance boost (thanks to Numerlor)\n    * The type hint for value_chain was corrected (thanks to vr2262)\n\n8.7.0\n-----\n\n* New functions\n    * convolve (from the Python itertools docs)\n    * product_index, combination_index, and permutation_index (thanks to N8Brooks)\n    * value_chain (thanks to jenstroeger)\n\n* Changes to existing functions\n    * distinct_combinations now uses a non-recursive algorithm (thanks to  knutdrand)\n    * pad_none is now the preferred name for padnone, though the latter remains available.\n    * pairwise will now use the Python standard library implementation on Python 3.10+\n    * sort_together now accepts a ``key`` argument (thanks to brianmaissy)\n    * seekable now has a ``peek`` method, and can indicate whether the iterator it's wrapping is exhausted (thanks to gsakkis)\n    * time_limited can now indicate whether its iterator has expired (thanks to roysmith)\n    * The implementation of unique_everseen was improved (thanks to plammens)\n\n* Other changes:\n    * Various documentation updates (thanks to cthoyt, Evantm, and cyphase)\n\n8.6.0\n-----\n\n* New itertools\n    * all_unique (thanks to brianmaissy)\n    * nth_product and nth_permutation (thanks to N8Brooks)\n\n* Changes to existing itertools\n    * chunked and sliced now accept a ``strict`` parameter (thanks to shlomif and jtwool)\n\n* Other changes\n    * Python 3.5 has reached its end of life and is no longer supported.\n    * Python 3.9 is officially supported.\n    * Various documentation fixes (thanks to timgates42)\n\n8.5.0\n-----\n\n* New itertools\n    * windowed_complete (thanks to MarcinKonowalczyk)\n\n* Changes to existing itertools:\n    * The is_sorted implementation was improved (thanks to cool-RR)\n    * The groupby_transform now accepts a ``reducefunc`` parameter.\n    * The last implementation was improved (thanks to brianmaissy)\n\n* Other changes\n    * Various documentation fixes (thanks to craigrosie, samuelstjean, PiCT0)\n    * The tests for distinct_combinations were improved (thanks to Minabsapi)\n    * Automated tests now run on GitHub Actions. All commits now check:\n        * That unit tests pass\n        * That the examples in docstrings work\n        * That test coverage remains high (using `coverage`)\n        * For linting errors (using `flake8`)\n        * For consistent style (using `black`)\n        * That the type stubs work (using `mypy`)\n        * That the docs build correctly (using `sphinx`)\n        * That packages build correctly (using `twine`)\n\n8.4.0\n-----\n\n* New itertools\n    * mark_ends (thanks to kalekundert)\n    * is_sorted\n\n* Changes to existing itertools:\n    * islice_extended can now be used with real slices (thanks to cool-RR)\n    * The implementations for filter_except and map_except were improved (thanks to SergBobrovsky)\n\n* Other changes\n    * Automated tests now enforce code style (using `black <https://github.com/psf/black>`__)\n    * The various signatures of islice_extended and numeric_range now appear in the docs (thanks to dsfulf)\n    * The test configuration for mypy was updated (thanks to blueyed)\n\n\n8.3.0\n-----\n\n* New itertools\n    * zip_equal (thanks to frankier and alexmojaki)\n\n* Changes to existing itertools:\n    * split_at, split_before, split_after, and split_when all got a ``maxsplit`` paramter (thanks to jferard and ilai-deutel)\n    * split_at now accepts a ``keep_separator`` parameter (thanks to jferard)\n    * distinct_permutations can now generate ``r``-length permutations (thanks to SergBobrovsky and ilai-deutel)\n    * The windowed implementation was improved  (thanks to SergBobrovsky)\n    * The spy implementation was improved (thanks to has2k1)\n\n* Other changes\n    * Type stubs are now tested with ``stubtest`` (thanks to ilai-deutel)\n    * Tests now run with ``python -m unittest`` instead of ``python setup.py test`` (thanks to jdufresne)\n\n8.2.0\n-----\n\n* Bug fixes\n    * The .pyi files for typing were updated. (thanks to blueyed and ilai-deutel)\n\n* Changes to existing itertools:\n    * numeric_range now behaves more like the built-in range. (thanks to jferard)\n    * bucket now allows for enumerating keys. (thanks to alexchandel)\n    * sliced now should now work for numpy arrays. (thanks to sswingle)\n    * seekable now has a ``maxlen`` parameter.\n\n8.1.0\n-----\n\n* Bug fixes\n    * partition works with ``pred=None`` again. (thanks to MSeifert04)\n\n* New itertools\n    * sample (thanks to tommyod)\n    * nth_or_last (thanks to d-ryzhikov)\n\n* Changes to existing itertools:\n    * The implementation for divide was improved. (thanks to jferard)\n\n8.0.2\n-----\n\n* Bug fixes\n    * The type stub files are now part of the wheel distribution (thanks to keisheiled)\n\n8.0.1\n-----\n\n* Bug fixes\n    * The type stub files now work for functions imported from the\n      root package (thanks to keisheiled)\n\n8.0.0\n-----\n\n* New itertools and other additions\n    * This library now ships type hints for use with mypy.\n      (thanks to ilai-deutel for the implementation, and to gabbard and fmagin for assistance)\n    * split_when (thanks to jferard)\n    * repeat_last (thanks to d-ryzhikov)\n\n* Changes to existing itertools:\n    * The implementation for set_partitions was improved. (thanks to jferard)\n    * partition was optimized for expensive predicates. (thanks to stevecj)\n    * unique_everseen and groupby_transform were re-factored. (thanks to SergBobrovsky)\n    * The implementation for difference was improved. (thanks to Jabbey92)\n\n* Other changes\n    * Python 3.4 has reached its end of life and is no longer supported.\n    * Python 3.8 is officially supported. (thanks to jdufresne)\n    * The ``collate`` function has been deprecated.\n      It raises a ``DeprecationWarning`` if used, and will be removed in a future release.\n    * one and only now provide more informative error messages. (thanks to gabbard)\n    * Unit tests were moved outside of the main package (thanks to jdufresne)\n    * Various documentation fixes (thanks to kriomant, gabbard, jdufresne)\n\n\n7.2.0\n-----\n\n* New itertools\n    * distinct_combinations\n    * set_partitions (thanks to kbarrett)\n    * filter_except\n    * map_except\n\n7.1.0\n-----\n\n* New itertools\n    * ichunked (thanks davebelais and youtux)\n    * only (thanks jaraco)\n\n* Changes to existing itertools:\n    * numeric_range now supports ranges specified by\n      ``datetime.datetime`` and ``datetime.timedelta`` objects (thanks to MSeifert04 for tests).\n    * difference now supports an *initial* keyword argument.\n\n\n* Other changes\n    * Various documentation fixes (thanks raimon49, pylang)\n\n7.0.0\n-----\n\n* New itertools:\n    * time_limited\n    * partitions (thanks to rominf and Saluev)\n    * substrings_indexes (thanks to rominf)\n\n* Changes to existing itertools:\n    * collapse now treats ``bytes`` objects the same as ``str`` objects. (thanks to Sweenpet)\n\nThe major version update is due to the change in the default behavior of\ncollapse. It now treats ``bytes`` objects the same as ``str`` objects.\nThis aligns its behavior with always_iterable.\n\n.. code-block:: python\n\n    >>> from more_itertools import collapse\n    >>> iterable = [[1, 2], b'345', [6]]\n    >>> print(list(collapse(iterable)))\n    [1, 2, b'345', 6]\n\n6.0.0\n-----\n\n* Major changes:\n    * Python 2.7 is no longer supported. The 5.0.0 release will be the last\n      version targeting Python 2.7.\n    * All future releases will target the active versions of Python 3.\n      As of 2019, those are Python 3.4 and above.\n    * The ``six`` library is no longer a dependency.\n    * The accumulate function is no longer part of this library. You\n      may import a better version from the standard ``itertools`` module.\n\n* Changes to existing itertools:\n    * The order of the parameters in grouper have changed to match\n      the latest recipe in the itertools documentation. Use of the old order\n      will be supported in this release, but emit a  ``DeprecationWarning``.\n      The legacy behavior will be dropped in a future release. (thanks to jaraco)\n    * distinct_permutations was improved (thanks to jferard - see also `permutations with unique values <https://stackoverflow.com/questions/6284396/permutations-with-unique-values>`_ at StackOverflow.)\n    * An unused parameter was removed from substrings. (thanks to pylang)\n\n* Other changes:\n    * The docs for unique_everseen were improved. (thanks to jferard and MSeifert04)\n    * Several Python 2-isms were removed. (thanks to jaraco, MSeifert04, and hugovk)\n\n\n",
          "name": "more-itertools",
          "author": [
            {
              "type": "Person",
              "name": "Erik Rose",
              "email": [
                "erikrose@grinchcentral.com"
              ],
              "familyName": [
                "Rose"
              ],
              "givenName": [
                "Erik"
              ]
            }
          ],
          "keywords": "itertools,iterator,iteration,filter,peek,peekable,collate,chunk,chunked",
          "license": "MIT",
          "version": "==8.7.0",
          "codeRepository": "https://pypi.org/project/more-itertools/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python",
          "applicationCategory": [
            "Software Development"
          ],
          "applicationSubCategory": [
            "Libraries"
          ]
        },
        {
          "type": "SoftwarePackage",
          "description": "mpmath\n======\n\n|pypi version| |Build status| |Code coverage status| |Zenodo Badge|\n\n.. |pypi version| image:: https://img.shields.io/pypi/v/mpmath.svg\n   :target: https://pypi.python.org/pypi/mpmath\n.. |Build status| image:: https://github.com/fredrik-johansson/mpmath/workflows/test/badge.svg\n   :target: https://github.com/fredrik-johansson/mpmath/actions?workflow=test\n.. |Code coverage status| image:: https://codecov.io/gh/fredrik-johansson/mpmath/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/fredrik-johansson/mpmath\n.. |Zenodo Badge| image:: https://zenodo.org/badge/2934512.svg\n   :target: https://zenodo.org/badge/latestdoi/2934512\n\nA Python library for arbitrary-precision floating-point arithmetic.\n\nWebsite: http://mpmath.org/\nMain author: Fredrik Johansson <fredrik.johansson@gmail.com>\n\nMpmath is free software released under the New BSD License (see the\nLICENSE file for details)\n\n0. History and credits\n----------------------\n\nThe following people (among others) have contributed major patches\nor new features to mpmath:\n\n* Pearu Peterson <pearu.peterson@gmail.com>\n* Mario Pernici <mario.pernici@mi.infn.it>\n* Ondrej Certik <ondrej@certik.cz>\n* Vinzent Steinberg <vinzent.steinberg@gmail.com>\n* Nimish Telang <ntelang@gmail.com>\n* Mike Taschuk <mtaschuk@ece.ualberta.ca>\n* Case Van Horsen <casevh@gmail.com>\n* Jorn Baayen <jorn.baayen@gmail.com>\n* Chris Smith <smichr@gmail.com>\n* Juan Arias de Reyna <arias@us.es>\n* Ioannis Tziakos <itziakos@gmail.com>\n* Aaron Meurer <asmeurer@gmail.com>\n* Stefan Krastanov <krastanov.stefan@gmail.com>\n* Ken Allen <ken.allen@sbcglobal.net>\n* Timo Hartmann <thartmann15@gmail.com>\n* Sergey B Kirpichev <skirpichev@gmail.com>\n* Kris Kuhlman <kristopher.kuhlman@gmail.com>\n* Paul Masson <paulmasson@analyticphysics.com>\n* Michael Kagalenko <michael.kagalenko@gmail.com>\n* Jonathan Warner <warnerjon12@gmail.com>\n* Max Gaukler <max.gaukler@fau.de>\n\nNumerous other people have contributed by reporting bugs,\nrequesting new features, or suggesting improvements to the\ndocumentation.\n\nFor a detailed changelog, including individual contributions,\nsee the CHANGES file.\n\nFredrik's work on mpmath during summer 2008 was sponsored by Google\nas part of the Google Summer of Code program.\n\nFredrik's work on mpmath during summer 2009 was sponsored by the\nAmerican Institute of Mathematics under the support of the National Science\nFoundation Grant No. 0757627 (FRG: L-functions and Modular Forms).\n\nAny opinions, findings, and conclusions or recommendations expressed in this\nmaterial are those of the author(s) and do not necessarily reflect the\nviews of the sponsors.\n\nCredit also goes to:\n\n* The authors of the GMP library and the Python wrapper\n  gmpy, enabling mpmath to become much faster at\n  high precision\n* The authors of MPFR, pari/gp, MPFUN, and other arbitrary-\n  precision libraries, whose documentation has been helpful\n  for implementing many of the algorithms in mpmath\n* Wikipedia contributors; Abramowitz & Stegun; Gradshteyn & Ryzhik;\n  Wolfram Research for MathWorld and the Wolfram Functions site.\n  These are the main references used for special functions\n  implementations.\n* George Brandl for developing the Sphinx documentation tool\n  used to build mpmath's documentation\n\nRelease history:\n\n* Version 1.1.0 released on December 11, 2018\n* Version 1.0.0 released on September 27, 2017\n* Version 0.19 released on June 10, 2014\n* Version 0.18 released on December 31, 2013\n* Version 0.17 released on February 1, 2011\n* Version 0.16 released on September 24, 2010\n* Version 0.15 released on June 6, 2010\n* Version 0.14 released on February 5, 2010\n* Version 0.13 released on August 13, 2009\n* Version 0.12 released on June 9, 2009\n* Version 0.11 released on January 26, 2009\n* Version 0.10 released on October 15, 2008\n* Version 0.9 released on August 23, 2008\n* Version 0.8 released on April 20, 2008\n* Version 0.7 released on March 12, 2008\n* Version 0.6 released on January 13, 2008\n* Version 0.5 released on November 24, 2007\n* Version 0.4 released on November 3, 2007\n* Version 0.3 released on October 5, 2007\n* Version 0.2 released on October 2, 2007\n* Version 0.1 released on September 27, 2007\n\n1. Download & installation\n--------------------------\n\nMpmath requires Python 2.7 or 3.4 (or later versions). It has been tested\nwith CPython 2.7, 3.4 through 3.7 and for PyPy.\n\nThe latest release of mpmath can be downloaded from the mpmath\nwebsite and from https://github.com/fredrik-johansson/mpmath/releases\n\nIt should also be available in the Python Package Index at\nhttps://pypi.python.org/pypi/mpmath\n\nTo install latest release of Mpmath with pip, simply run\n\n``pip install mpmath``\n\nOr unpack the mpmath archive and run\n\n``python setup.py install``\n\nMpmath can also be installed using\n\n``python -m easy_install mpmath``\n\nThe latest development code is available from\nhttps://github.com/fredrik-johansson/mpmath\n\nSee the main documentation for more detailed instructions.\n\n2. Running tests\n----------------\n\nThe unit tests in mpmath/tests/ can be run via the script\nruntests.py, but it is recommended to run them with py.test\n(https://pytest.org/), especially\nto generate more useful reports in case there are failures.\n\nYou may also want to check out the demo scripts in the demo\ndirectory.\n\nThe master branch is automatically tested by Travis CI.\n\n3. Documentation\n----------------\n\nDocumentation in reStructuredText format is available in the\ndoc directory included with the source package. These files\nare human-readable, but can be compiled to prettier HTML using\nthe build.py script (requires Sphinx, http://sphinx.pocoo.org/).\n\nSee setup.txt in the documentation for more information.\n\nThe most recent documentation is also available in HTML format:\n\nhttp://mpmath.org/doc/current/\n\n4. Known problems\n-----------------\n\nMpmath is a work in progress. Major issues include:\n\n* Some functions may return incorrect values when given extremely\n  large arguments or arguments very close to singularities.\n\n* Directed rounding works for arithmetic operations. It is implemented\n  heuristically for other operations, and their results may be off by one\n  or two units in the last place (even if otherwise accurate).\n\n* Some IEEE 754 features are not available. Inifinities and NaN are\n  partially supported; denormal rounding is currently not available\n  at all.\n\n* The interface for switching precision and rounding is not finalized.\n  The current method is not threadsafe.\n\n5. Help and bug reports\n-----------------------\n\nGeneral questions and comments can be sent to the mpmath mailinglist,\nmpmath@googlegroups.com\n\nYou can also report bugs and send patches to the mpmath issue tracker,\nhttps://github.com/fredrik-johansson/mpmath/issues\n\n\n",
          "name": "mpmath",
          "author": [
            {
              "type": "Person",
              "name": "Fredrik Johansson",
              "email": [
                "fredrik.johansson@gmail.com"
              ],
              "familyName": [
                "Johansson"
              ],
              "givenName": [
                "Fredrik"
              ]
            }
          ],
          "license": "BSD",
          "version": "==1.2.1",
          "codeRepository": "https://pypi.org/project/mpmath/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python",
          "applicationCategory": [
            "Scientific/Engineering",
            "Software Development"
          ],
          "applicationSubCategory": [
            "Mathematics",
            "Libraries"
          ]
        },
        {
          "type": "SoftwarePackage",
          "description": "[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/jupyter/nbclient/master?filepath=binder%2Frun_nbclient.ipynb)\n[![Build Status](https://github.com/jupyter/nbclient/workflows/CI/badge.svg)](https://github.com/jupyter/nbclient/actions)\n[![Documentation Status](https://readthedocs.org/projects/nbclient/badge/?version=latest)](https://nbclient.readthedocs.io/en/latest/?badge=latest)\n[![image](https://codecov.io/github/jupyter/nbclient/coverage.svg?branch=master)](https://codecov.io/github/jupyter/nbclient?branch=master)\n[![Python 3.6](https://img.shields.io/badge/python-3.6-blue.svg)](https://www.python.org/downloads/release/python-360/)\n[![Python 3.7](https://img.shields.io/badge/python-3.7-blue.svg)](https://www.python.org/downloads/release/python-370/)\n[![Python 3.8](https://img.shields.io/badge/python-3.8-blue.svg)](https://www.python.org/downloads/release/python-380/)\n[![Python 3.9](https://img.shields.io/badge/python-3.9-blue.svg)](https://www.python.org/downloads/release/python-390/)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)\n\n# nbclient\n\n**NBClient**, a client library for programmatic notebook execution, is a tool for running Jupyter Notebooks in\ndifferent execution contexts. NBClient was spun out of [nbconvert](https://nbconvert.readthedocs.io/en/latest/)'s\nformer `ExecutePreprocessor`.\n\n**NBClient** lets you **execute** notebooks.\n\n## Interactive Demo\n\nTo demo **NBClient** interactively, click this Binder badge to start the demo:\n\n[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/jupyter/nbclient/master?filepath=binder%2Frun_nbclient.ipynb)\n\n## Installation\n\nIn a terminal, run:\n\n    python3 -m pip install nbclient\n\n## Documentation\n\nSee [ReadTheDocs](https://nbclient.readthedocs.io/en/latest/) for more in-depth details about the project and the\n[API Reference](https://nbclient.readthedocs.io/en/latest/reference/index.html).\n\n\n## Python Version Support\n\nThis library currently supports Python 3.6+ versions. As minor Python\nversions are officially sunset by the Python org, nbclient will similarly\ndrop support in the future.\n\n## Origins\n\nThis library used to be part of the [nbconvert](https://nbconvert.readthedocs.io/en/latest/) project. NBClient\nextracted nbconvert's `ExecutePreprocessor`into its own library for easier updating and importing by\ndownstream libraries and applications.\n\n## Relationship to JupyterClient\n\nNBClient and JupyterClient are distinct projects.\n\n`jupyter_client` is a client library for the jupyter protocol. Specifically, `jupyter_client` provides the Python API\nfor starting, managing and communicating with Jupyter kernels.\n\nWhile, nbclient allows notebooks to be run in different execution contexts.\n\n\n",
          "name": "nbclient",
          "author": [
            {
              "type": "Person",
              "name": "Jupyter Development",
              "familyName": [
                "Development"
              ],
              "givenName": [
                "Jupyter"
              ]
            }
          ],
          "keywords": "jupyter,pipeline,notebook,executor",
          "license": "BSD",
          "version": "==0.5.3",
          "codeRepository": "https://pypi.org/project/nbclient/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python"
        },
        {
          "type": "SoftwarePackage",
          "description": "# nbconvert\n### Jupyter Notebook Conversion\n\n[![Google Group](https://img.shields.io/badge/-Google%20Group-lightgrey.svg)](https://groups.google.com/forum/#!forum/jupyter)\n[![Build Status](https://travis-ci.org/jupyter/nbconvert.svg?branch=master)](https://travis-ci.org/jupyter/nbconvert)\n[![Documentation Status](https://readthedocs.org/projects/nbconvert/badge/?version=latest)](https://nbconvert.readthedocs.io/en/latest/?badge=latest)\n[![Documentation Status](https://readthedocs.org/projects/nbconvert/badge/?version=stable)](https://nbconvert.readthedocs.io/en/stable/?badge=stable)\n[![codecov.io](https://codecov.io/github/jupyter/nbconvert/coverage.svg?branch=master)](https://codecov.io/github/jupyter/nbconvert?branch=master)\n[![CircleCI Docs Status](https://circleci.com/gh/jupyter/nbconvert/tree/master.svg?style=svg)](https://circleci.com/gh/jupyter/nbconvert/tree/master)\n\nThe **nbconvert** tool, `jupyter nbconvert`, converts notebooks to various other\nformats via [Jinja][] templates. The nbconvert tool allows you to convert an\n`.ipynb` notebook file into various static formats including:\n\n* HTML\n* LaTeX\n* PDF\n* Reveal JS\n* Markdown (md)\n* ReStructured Text (rst)\n* executable script\n\n## Usage\n\nFrom the command line, use nbconvert to convert a Jupyter notebook (*input*) to a\na different format (*output*). The basic command structure is:\n\n    $ jupyter nbconvert --to <output format> <input notebook>\n\nwhere `<output format>` is the desired output format and `<input notebook>` is the\nfilename of the Jupyter notebook.\n\n### Example: Convert a notebook to HTML\n\nConvert Jupyter notebook file, `mynotebook.ipynb`, to HTML using:\n\n    $ jupyter nbconvert --to html mynotebook.ipynb\n\nThis command creates an HTML output file named `mynotebook.html`.\n\n## Python requirement\n\nNbconvert 6.0 provides limited support for Python 3.6 (3.6.1 or greater), and support will be dropped with nbconvert 6.1. Limited support means we will test and run CI on Python 3.6.12 or higher. Issues that are found only affecting Python 3.6 are not guaranteed to be fixed. We recommend all users of nbconvert use Python 3.7 and higher.\n\n## Dev Install\n\nCheck if pandoc is installed (``pandoc --version``); if needed, install:\n\n```\nsudo apt-get install pandoc\n```\n\nOr\n\n```\nbrew install pandoc\n```\n\nInstall nbconvert for development using:\n\n```\ngit clone https://github.com/jupyter/nbconvert.git\ncd nbconvert\npip install -e .\n```\n\nRunning the tests after a dev install above:\n\n```\npip install nbconvert[test]\npy.test --pyargs nbconvert\n```\n\n## Documentation\n\n- [Documentation for Jupyter nbconvert](https://nbconvert.readthedocs.io/en/latest/)\n  [[PDF](https://media.readthedocs.org/pdf/nbconvert/latest/nbconvert.pdf)]\n- [nbconvert examples on GitHub](https://github.com/jupyter/nbconvert-examples)\n- [Documentation for Project Jupyter](https://jupyter.readthedocs.io/en/latest/index.html)\n  [[PDF](https://media.readthedocs.org/pdf/jupyter/latest/jupyter.pdf)]\n\n## Technical Support\n\n- [Issues and Bug Reports](https://github.com/jupyter/nbconvert/issues): A place to report\n  bugs or regressions found for nbconvert\n- [Community Technical Support and Discussion - Discourse](https://discourse.jupyter.org/): A place for\n  installation, configuration, and troubleshooting assistannce by the Jupyter community.\n  As a non-profit project and maintainers who are primarily volunteers, we encourage you\n  to ask questions and share your knowledge on Discourse.\n\n## Jupyter Resources\n\n- [Jupyter mailing list](https://groups.google.com/forum/#!forum/jupyter)\n- [Project Jupyter website](https://jupyter.org)\n\n[Jinja]: http://jinja.pocoo.org/\n\n\n",
          "name": "nbconvert",
          "author": [
            {
              "type": "Person",
              "name": "Jupyter Development",
              "familyName": [
                "Development"
              ],
              "givenName": [
                "Jupyter"
              ]
            }
          ],
          "keywords": "Interactive,Interpreter,Shell,Web",
          "license": "BSD",
          "version": "==6.0.7",
          "codeRepository": "https://pypi.org/project/nbconvert/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python"
        },
        {
          "type": "SoftwarePackage",
          "description": "\nThis package contains the base implementation of the Jupyter Notebook format,\nand Python APIs for working with notebooks.\n\n\n",
          "name": "nbformat",
          "author": [
            {
              "type": "Person",
              "name": "Jupyter Development",
              "familyName": [
                "Development"
              ],
              "givenName": [
                "Jupyter"
              ]
            }
          ],
          "keywords": "Interactive,Interpreter,Shell,Web",
          "license": "BSD",
          "version": "==5.1.3",
          "codeRepository": "https://pypi.org/project/nbformat/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python"
        },
        {
          "type": "SoftwarePackage",
          "description": "|Build| |Status| |PyPiVersion| |License| |Downloads|\n\nIntroduction\n------------\n\nBy design asyncio `does not allow <https://bugs.python.org/issue22239>`_\nits event loop to be nested. This presents a practical problem:\nWhen in an environment where the event loop is\nalready running it's impossible to run tasks and wait\nfor the result. Trying to do so will give the error\n\"``RuntimeError: This event loop is already running``\".\n\nThe issue pops up in various environments, such as web servers,\nGUI applications and in Jupyter notebooks.\n\nThis module patches asyncio to allow nested use of ``asyncio.run`` and\n``loop.run_until_complete``.\n\nInstallation\n------------\n\n.. code-block::\n\n    pip3 install nest_asyncio\n\nPython 3.5 or higher is required.\n\nUsage\n-----\n\n.. code-block:: python\n\n    import nest_asyncio\n    nest_asyncio.apply()\n\nOptionally the specific loop that needs patching can be given\nas argument to ``apply``, otherwise the current event loop is used.\nAn event loop can be patched whether it is already running\nor not. Only event loops from asyncio can be patched;\nLoops from other projects, such as uvloop or quamash,\ngenerally can't be patched.\n\n\n.. |Build| image:: https://github.com/erdewit/nest_asyncio/workflows/Test/badge.svg?branche=master\n   :alt: Build\n   :target: https://github.com/erdewit/nest_asyncio/actions\n\n.. |PyPiVersion| image:: https://img.shields.io/pypi/v/nest_asyncio.svg\n   :alt: PyPi\n   :target: https://pypi.python.org/pypi/nest_asyncio\n\n.. |Status| image:: https://img.shields.io/badge/status-stable-green.svg\n   :alt:\n\n.. |License| image:: https://img.shields.io/badge/license-BSD-blue.svg\n   :alt:\n\n.. |Downloads| image:: https://pepy.tech/badge/nest-asyncio/month\n   :alt: Number of downloads\n   :target: https://pepy.tech/project/nest-asyncio\n\n\n\n",
          "name": "nest-asyncio",
          "author": [
            {
              "type": "Person",
              "name": "Ewald R.",
              "familyName": [
                "R."
              ],
              "givenName": [
                "Ewald"
              ]
            }
          ],
          "keywords": "asyncio,nested,eventloop",
          "license": "BSD",
          "version": "==1.5.1",
          "codeRepository": "https://pypi.org/project/nest-asyncio/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python"
        },
        {
          "type": "SoftwarePackage",
          "description": "\nThe Jupyter Notebook is a web application that allows you to create and\nshare documents that contain live code, equations, visualizations, and\nexplanatory text. The Notebook has support for multiple programming\nlanguages, sharing, and interactive widgets.\n\nRead `the documentation <https://jupyter-notebook.readthedocs.io>`_\nfor more information.\n\n\n",
          "name": "notebook",
          "author": [
            {
              "type": "Person",
              "name": "Jupyter Development",
              "familyName": [
                "Development"
              ],
              "givenName": [
                "Jupyter"
              ]
            }
          ],
          "keywords": "Interactive,Interpreter,Shell,Web",
          "license": "BSD",
          "version": "==6.3.0",
          "codeRepository": "https://pypi.org/project/notebook/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python"
        },
        {
          "type": "SoftwarePackage",
          "description": "It provides:\n\n- a powerful N-dimensional array object\n- sophisticated (broadcasting) functions\n- tools for integrating C/C++ and Fortran code\n- useful linear algebra, Fourier transform, and random number capabilities\n- and much more\n\nBesides its obvious scientific uses, NumPy can also be used as an efficient\nmulti-dimensional container of generic data. Arbitrary data-types can be\ndefined. This allows NumPy to seamlessly and speedily integrate with a wide\nvariety of databases.\n\nAll NumPy wheels distributed on PyPI are BSD licensed.\n\n\n\n",
          "name": "numpy",
          "author": [
            {
              "type": "Person",
              "name": "Travis E.",
              "familyName": [
                "E."
              ],
              "givenName": [
                "Travis"
              ]
            }
          ],
          "license": "BSD",
          "codeRepository": "https://pypi.org/project/numpy/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python",
          "applicationCategory": [
            "Scientific/Engineering",
            "Software Development"
          ],
          "operatingSystem": [
            {
              "type": "OperatingSystem",
              "name": "macOS"
            },
            {
              "type": "OperatingSystem",
              "name": "Windows"
            },
            {
              "type": "OperatingSystem",
              "name": "Linux"
            },
            {
              "type": "OperatingSystem",
              "name": "Unix"
            }
          ]
        },
        {
          "type": "SoftwarePackage",
          "description": "olefile\n=======\n\n|Build Status TravisCI| |Build Status AppVeyor| |Coverage Status|\n|Documentation Status| |PyPI| |Can I Use Python 3?| |Say Thanks!|\n\n`olefile <https://www.decalage.info/olefile>`__ is a Python package to\nparse, read and write `Microsoft OLE2\nfiles <http://en.wikipedia.org/wiki/Compound_File_Binary_Format>`__\n(also called Structured Storage, Compound File Binary Format or Compound\nDocument File Format), such as Microsoft Office 97-2003 documents,\nvbaProject.bin in MS Office 2007+ files, Image Composer and FlashPix\nfiles, Outlook messages, StickyNotes, several Microscopy file formats,\nMcAfee antivirus quarantine files, etc.\n\n**Quick links:** `Home page <https://www.decalage.info/olefile>`__ -\n`Download/Install <http://olefile.readthedocs.io/en/latest/Install.html>`__\n- `Documentation <http://olefile.readthedocs.io/en/latest>`__ - `Report\nIssues/Suggestions/Questions <https://github.com/decalage2/olefile/issues>`__\n- `Contact the author <https://www.decalage.info/contact>`__ -\n`Repository <https://github.com/decalage2/olefile>`__ - `Updates on\nTwitter <https://twitter.com/decalage2>`__\n\nNews\n----\n\nFollow all updates and news on Twitter: https://twitter.com/decalage2\n\n-  **2018-09-09 v0.46**: OleFileIO can now be used as a context manager\n   (with...as), to close the file automatically (see\n   `doc <https://olefile.readthedocs.io/en/latest/Howto.html#open-an-ole-file-from-disk>`__).\n   Improved handling of malformed files, fixed several bugs.\n-  2018-01-24 v0.45: olefile can now overwrite streams of any size,\n   improved handling of malformed files, fixed several\n   `bugs <https://github.com/decalage2/olefile/milestone/4?closed=1>`__,\n   end of support for Python 2.6 and 3.3.\n-  2017-01-06 v0.44: several bugfixes, removed support for Python 2.5\n   (olefile2), added support for incomplete streams and incorrect\n   directory entries (to read malformed documents), added getclsid,\n   improved `documentation <http://olefile.readthedocs.io/en/latest>`__\n   with API reference.\n-  2017-01-04: moved the documentation to\n   `ReadTheDocs <http://olefile.readthedocs.io/en/latest>`__\n-  2016-05-20: moved olefile repository to\n   `GitHub <https://github.com/decalage2/olefile>`__\n-  2016-02-02 v0.43: fixed issues\n   `#26 <https://github.com/decalage2/olefile/issues/26>`__ and\n   `#27 <https://github.com/decalage2/olefile/issues/27>`__, better\n   handling of malformed files, use python logging.\n-  see\n   `changelog <https://github.com/decalage2/olefile/blob/master/CHANGELOG.md>`__\n   for more detailed information and the latest changes.\n\nDownload/Install\n----------------\n\nIf you have pip or setuptools installed (pip is included in Python\n2.7.9+), you may simply run **pip install olefile** or **easy_install\nolefile** for the first installation.\n\nTo update olefile, run **pip install -U olefile**.\n\nOtherwise, see http://olefile.readthedocs.io/en/latest/Install.html\n\nFeatures\n--------\n\n-  Parse, read and write any OLE file such as Microsoft Office 97-2003\n   legacy document formats (Word .doc, Excel .xls, PowerPoint .ppt,\n   Visio .vsd, Project .mpp), Image Composer and FlashPix files, Outlook\n   messages, StickyNotes, Zeiss AxioVision ZVI files, Olympus FluoView\n   OIB files, etc\n-  List all the streams and storages contained in an OLE file\n-  Open streams as files\n-  Parse and read property streams, containing metadata of the file\n-  Portable, pure Python module, no dependency\n\nolefile can be used as an independent package or with PIL/Pillow.\n\nolefile is mostly meant for developers. If you are looking for tools to\nanalyze OLE files or to extract data (especially for security purposes\nsuch as malware analysis and forensics), then please also check my\n`python-oletools <https://www.decalage.info/python/oletools>`__, which\nare built upon olefile and provide a higher-level interface.\n\nDocumentation\n-------------\n\nPlease see the `online\ndocumentation <http://olefile.readthedocs.io/en/latest>`__ for more\ninformation.\n\nReal-life examples\n------------------\n\nA real-life example: `using OleFileIO_PL for malware analysis and\nforensics <http://blog.gregback.net/2011/03/using-remnux-for-forensic-puzzle-6/>`__.\n\nSee also `this\npaper <https://computer-forensics.sans.org/community/papers/gcfa/grow-forensic-tools-taxonomy-python-libraries-helpful-forensic-analysis_6879>`__\nabout python tools for forensics, which features olefile.\n\nLicense\n-------\n\nolefile (formerly OleFileIO_PL) is copyright (c) 2005-2018 Philippe\nLagadec (https://www.decalage.info)\n\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n-  Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n-  Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS\nIS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED\nTO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\nPARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nHOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\nTO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\nLIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\nNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n--------------\n\nolefile is based on source code from the OleFileIO module of the Python\nImaging Library (PIL) published by Fredrik Lundh under the following\nlicense:\n\nThe Python Imaging Library (PIL) is\n\n-  Copyright (c) 1997-2009 by Secret Labs AB\n-  Copyright (c) 1995-2009 by Fredrik Lundh\n\nBy obtaining, using, and/or copying this software and/or its associated\ndocumentation, you agree that you have read, understood, and will comply\nwith the following terms and conditions:\n\nPermission to use, copy, modify, and distribute this software and its\nassociated documentation for any purpose and without fee is hereby\ngranted, provided that the above copyright notice appears in all copies,\nand that both that copyright notice and this permission notice appear in\nsupporting documentation, and that the name of Secret Labs AB or the\nauthor not be used in advertising or publicity pertaining to\ndistribution of the software without specific, written prior permission.\n\nSECRET LABS AB AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO\nTHIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND\nFITNESS. IN NO EVENT SHALL SECRET LABS AB OR THE AUTHOR BE LIABLE FOR\nANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER\nRESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF\nCONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN\nCONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\n.. |Build Status TravisCI| image:: https://travis-ci.org/decalage2/olefile.svg?branch=master\n   :target: https://travis-ci.org/decalage2/olefile\n.. |Build Status AppVeyor| image:: https://ci.appveyor.com/api/projects/status/github/decalage2/olefile?svg=true\n   :target: https://ci.appveyor.com/project/decalage2/olefile\n.. |Coverage Status| image:: https://coveralls.io/repos/github/decalage2/olefile/badge.svg?branch=master\n   :target: https://coveralls.io/github/decalage2/olefile?branch=master\n.. |Documentation Status| image:: http://readthedocs.org/projects/olefile/badge/?version=latest\n   :target: http://olefile.readthedocs.io/en/latest/?badge=latest\n.. |PyPI| image:: https://img.shields.io/pypi/v/olefile.svg\n   :target: https://pypi.org/project/olefile/\n.. |Can I Use Python 3?| image:: https://caniusepython3.com/project/olefile.svg\n   :target: https://caniusepython3.com/project/olefile\n.. |Say Thanks!| image:: https://img.shields.io/badge/Say%20Thanks-!-1EAEDB.svg\n   :target: https://saythanks.io/to/decalage2",
          "name": "olefile",
          "author": [
            {
              "type": "Person",
              "name": "Philippe Lagadec",
              "email": [
                "nospam@decalage.info"
              ],
              "familyName": [
                "Lagadec"
              ],
              "givenName": [
                "Philippe"
              ]
            }
          ],
          "license": "BSD",
          "codeRepository": "https://pypi.org/project/olefile/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python",
          "applicationCategory": [
            "Software Development"
          ],
          "applicationSubCategory": [
            "Libraries"
          ]
        },
        {
          "type": "SoftwarePackage",
          "description": "optlang\n=======\n\n*Sympy based mathematical programming language*\n\n|PyPI| |Python Versions| |License| |Code of Conduct| |GitHub Actions| |Coverage Status| |Documentation Status| |Gitter| |JOSS| |DOI|\n\nOptlang is a Python package for solving mathematical optimization\nproblems, i.e. maximizing or minimizing an objective function over a set\nof variables subject to a number of constraints. Optlang provides a\ncommon interface to a series of optimization tools, so different solver\nbackends can be changed in a transparent way.\nOptlang's object-oriented API takes advantage of the symbolic math library\n`sympy <http://sympy.org/en/index.html>`__ to allow objective functions\nand constraints to be easily formulated from symbolic expressions of\nvariables (see examples).\n\nShow us some love by staring this repo if you find optlang useful!\n\nAlso, please use the GitHub `issue tracker <https://github.com/biosustain/optlang/issues>`_\nto let us know about bugs or feature requests, or our `gitter channel <https://gitter.im/biosustain/optlang>`_ if you have problems or questions regarding optlang.\n\nInstallation\n~~~~~~~~~~~~\n\nInstall using pip\n\n::\n\n    pip install optlang\n\nThis will also install `swiglpk <https://github.com/biosustain/swiglpk>`_, an interface to the open source (mixed integer) LP solver `GLPK <https://www.gnu.org/software/glpk/>`_.\nQuadratic programming (and MIQP) is supported through additional optional solvers (see below).\n\nDependencies\n~~~~~~~~~~~~\n\nThe following dependencies are needed.\n\n-  `sympy >= 1.0.0 <http://sympy.org/en/index.html>`__\n-  `six >= 1.9.0 <https://pypi.python.org/pypi/six>`__\n-  `swiglpk >= 1.4.3 <https://pypi.python.org/pypi/swiglpk>`__\n\nThe following are optional dependencies that allow other solvers to be used.\n\n-  `cplex <https://www-01.ibm.com/software/commerce/optimization/cplex-optimizer/>`__ (LP, MILP, QP, MIQP)\n-  `gurobipy <http://www.gurobi.com>`__ (LP, MILP, QP, MIQP)\n-  `scipy <http://www.scipy.org>`__ (LP)\n-  `osqp <https://osqp.org/>`__ (LP, QP)\n\n\n\nExample\n~~~~~~~\n\nFormulating and solving the problem is straightforward (example taken\nfrom `GLPK documentation <http://www.gnu.org/software/glpk>`__):\n\n.. code-block:: python\n\n    from __future__ import print_function\n    from optlang import Model, Variable, Constraint, Objective\n\n    # All the (symbolic) variables are declared, with a name and optionally a lower and/or upper bound.\n    x1 = Variable('x1', lb=0)\n    x2 = Variable('x2', lb=0)\n    x3 = Variable('x3', lb=0)\n\n    # A constraint is constructed from an expression of variables and a lower and/or upper bound (lb and ub).\n    c1 = Constraint(x1 + x2 + x3, ub=100)\n    c2 = Constraint(10 * x1 + 4 * x2 + 5 * x3, ub=600)\n    c3 = Constraint(2 * x1 + 2 * x2 + 6 * x3, ub=300)\n\n    # An objective can be formulated\n    obj = Objective(10 * x1 + 6 * x2 + 4 * x3, direction='max')\n\n    # Variables, constraints and objective are combined in a Model object, which can subsequently be optimized.\n    model = Model(name='Simple model')\n    model.objective = obj\n    model.add([c1, c2, c3])\n\n    status = model.optimize()\n\n    print(\"status:\", model.status)\n    print(\"objective value:\", model.objective.value)\n    print(\"----------\")\n    for var_name, var in model.variables.iteritems():\n        print(var_name, \"=\", var.primal)\n\nThe example will produce the following output:\n\n::\n\n    status: optimal\n    objective value: 733.333333333\n    ----------\n    x2 = 66.6666666667\n    x3 = 0.0\n    x1 = 33.3333333333\n\nUsing a particular solver\n-------------------------\nIf you have more than one solver installed, it's also possible to specify which one to use, by importing directly from the\nrespective solver interface, e.g. :code:`from optlang.glpk_interface import Model, Variable, Constraint, Objective`\n\nDocumentation\n~~~~~~~~~~~~~\n\nDocumentation for optlang is provided at\n`readthedocs.org <http://optlang.readthedocs.org/en/latest/>`__.\n\nCitation\n~~~~~~~~\n\nPlease cite |JOSS| if you use optlang in a scientific publication. In case you would like to reference a specific version of of optlang you can also include the respective Zenodo DOI (|DOI| points to the latest version).\n\nContributing\n~~~~~~~~~~~~\n\nPlease read `<CONTRIBUTING.md>`__.\n\nFunding\n~~~~~~~\n\nThe development of optlang was partly support by the Novo Nordisk Foundation.\n\nFuture outlook\n~~~~~~~~~~~~~~\n\n-  `Mosek <http://www.mosek.com/>`__ interface (provides academic\n   licenses)\n-  `GAMS <http://www.gams.com/>`__ output (support non-linear problem\n   formulation)\n-  `DEAP <https://code.google.com/p/deap/>`__ (support for heuristic\n   optimization)\n-  Interface to `NEOS <http://www.neos-server.org/neos/>`__ optimization\n   server (for testing purposes and solver evaluation)\n-  Automatically handle fractional and absolute value problems when\n   dealing with LP/MILP/QP solvers (like GLPK,\n   `CPLEX <http://www-01.ibm.com/software/commerce/optimization/cplex-optimizer/>`__\n   etc.)\n\n.. |PyPI| image:: https://img.shields.io/pypi/v/optlang.svg\n   :target: https://pypi.org/project/optlang/\n   :alt: Current PyPI Version\n.. |Python Versions| image:: https://img.shields.io/pypi/pyversions/optlang.svg\n   :target: https://pypi.org/project/optlang/\n   :alt: Supported Python Versions\n.. |License| image:: https://img.shields.io/pypi/l/optlang.svg\n   :target: https://www.apache.org/licenses/LICENSE-2.0\n   :alt: Apache Software License Version 2.0\n.. |Code of Conduct| image:: https://img.shields.io/badge/Contributor%20Covenant-v2.0%20adopted-ff69b4.svg\n   :target: .github/CODE_OF_CONDUCT.md\n   :alt: Code of Conduct\n.. |GitHub Actions| image:: https://github.com/opencobra/optlang/workflows/CI-CD/badge.svg\n   :target: https://github.com/opencobra/optlang/workflows/CI-CD\n   :alt: GitHub Actions\n.. |Coverage Status| image:: https://codecov.io/gh/opencobra/optlang/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/opencobra/optlang\n   :alt: Codecov\n.. |Documentation Status| image:: https://readthedocs.org/projects/optlang/badge/?version=latest\n   :target: https://readthedocs.org/projects/optlang/?badge=latest\n   :alt: Documentation Status\n.. |JOSS|  image:: http://joss.theoj.org/papers/cd848071a664d696e214a3950c840e15/status.svg\n   :target: http://joss.theoj.org/papers/cd848071a664d696e214a3950c840e15\n   :alt: Publication\n.. |DOI| image:: https://zenodo.org/badge/5031/biosustain/optlang.svg\n   :target: https://zenodo.org/badge/latestdoi/5031/biosustain/optlang\n   :alt: Zenodo Source Code\n.. |Gitter| image:: https://badges.gitter.im/biosustain/optlang.svg\n   :target: https://gitter.im/biosustain/optlang?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge\n   :alt: Join the chat at https://gitter.im/biosustain/optlang\n\n\n\n",
          "name": "optlang",
          "author": [
            {
              "type": "Person",
              "name": "Nikolaus Sonnenschein",
              "email": [
                "niko.sonnenschein@gmail.com"
              ],
              "familyName": [
                "Sonnenschein"
              ],
              "givenName": [
                "Nikolaus"
              ]
            }
          ],
          "keywords": "optimization,mathematical programming,heuristic optimization,sympy",
          "license": "Apache-2.0",
          "version": "==1.4.4",
          "codeRepository": "https://pypi.org/project/optlang/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python",
          "applicationCategory": [
            "Scientific/Engineering"
          ],
          "applicationSubCategory": [
            "Mathematics"
          ]
        },
        {
          "type": "SoftwarePackage",
          "description": "packaging\n=========\n\n.. start-intro\n\nReusable core utilities for various Python Packaging\n`interoperability specifications <https://packaging.python.org/specifications/>`_.\n\nThis library provides utilities that implement the interoperability\nspecifications which have clearly one correct behaviour (eg: :pep:`440`)\nor benefit greatly from having a single shared implementation (eg: :pep:`425`).\n\n.. end-intro\n\nThe ``packaging`` project includes the following: version handling, specifiers,\nmarkers, requirements, tags, utilities.\n\nDocumentation\n-------------\n\nThe `documentation`_ provides information and the API for the following:\n\n- Version Handling\n- Specifiers\n- Markers\n- Requirements\n- Tags\n- Utilities\n\nInstallation\n------------\n\nUse ``pip`` to install these utilities::\n\n    pip install packaging\n\nDiscussion\n----------\n\nIf you run into bugs, you can file them in our `issue tracker`_.\n\nYou can also join ``#pypa`` on Freenode to ask questions or get involved.\n\n\n.. _`documentation`: https://packaging.pypa.io/\n.. _`issue tracker`: https://github.com/pypa/packaging/issues\n\n\nCode of Conduct\n---------------\n\nEveryone interacting in the packaging project's codebases, issue trackers, chat\nrooms, and mailing lists is expected to follow the `PSF Code of Conduct`_.\n\n.. _PSF Code of Conduct: https://github.com/pypa/.github/blob/main/CODE_OF_CONDUCT.md\n\nContributing\n------------\n\nThe ``CONTRIBUTING.rst`` file outlines how to contribute to this project as\nwell as how to report a potential security issue. The documentation for this\nproject also covers information about `project development`_ and `security`_.\n\n.. _`project development`: https://packaging.pypa.io/en/latest/development/\n.. _`security`: https://packaging.pypa.io/en/latest/security/\n\nProject History\n---------------\n\nPlease review the ``CHANGELOG.rst`` file or the `Changelog documentation`_ for\nrecent changes and project history.\n\n.. _`Changelog documentation`: https://packaging.pypa.io/en/latest/changelog/\n\nChangelog\n---------\n\n20.9 - 2021-01-29\n~~~~~~~~~~~~~~~~~\n\n* Run [isort](https://pypi.org/project/isort/) over the code base (`#377 <https://github.com/pypa/packaging/issues/377>`__)\n* Add support for the ``macosx_10_*_universal2`` platform tags (`#379 <https://github.com/pypa/packaging/issues/379>`__)\n* Introduce ``packaging.utils.parse_wheel_filename()`` and ``parse_sdist_filename()``\n  (`#387 <https://github.com/pypa/packaging/issues/387>`__ and `#389 <https://github.com/pypa/packaging/issues/389>`__)\n\n20.8 - 2020-12-11\n~~~~~~~~~~~~~~~~~\n\n* Revert back to setuptools for compatibility purposes for some Linux distros (`#363 <https://github.com/pypa/packaging/issues/363>`__)\n* Do not insert an underscore in wheel tags when the interpreter version number\n  is more than 2 digits (`#372 <https://github.com/pypa/packaging/issues/372>`__)\n\n20.7 - 2020-11-28\n~~~~~~~~~~~~~~~~~\n\nNo unreleased changes.\n\n20.6 - 2020-11-28\n~~~~~~~~~~~~~~~~~\n\n.. note:: This release was subsequently yanked, and these changes were included in 20.7.\n\n* Fix flit configuration, to include LICENSE files (`#357 <https://github.com/pypa/packaging/issues/357>`__)\n* Make `intel` a recognized CPU architecture for the `universal` macOS platform tag (`#361 <https://github.com/pypa/packaging/issues/361>`__)\n* Add some missing type hints to `packaging.requirements` (issue:`350`)\n\n20.5 - 2020-11-27\n~~~~~~~~~~~~~~~~~\n\n* Officially support Python 3.9 (`#343 <https://github.com/pypa/packaging/issues/343>`__)\n* Deprecate the ``LegacyVersion`` and ``LegacySpecifier`` classes (`#321 <https://github.com/pypa/packaging/issues/321>`__)\n* Handle ``OSError`` on non-dynamic executables when attempting to resolve\n  the glibc version string.\n\n20.4 - 2020-05-19\n~~~~~~~~~~~~~~~~~\n\n* Canonicalize version before comparing specifiers. (`#282 <https://github.com/pypa/packaging/issues/282>`__)\n* Change type hint for ``canonicalize_name`` to return\n  ``packaging.utils.NormalizedName``.\n  This enables the use of static typing tools (like mypy) to detect mixing of\n  normalized and un-normalized names.\n\n20.3 - 2020-03-05\n~~~~~~~~~~~~~~~~~\n\n* Fix changelog for 20.2.\n\n20.2 - 2020-03-05\n~~~~~~~~~~~~~~~~~\n\n* Fix a bug that caused a 32-bit OS that runs on a 64-bit ARM CPU (e.g. ARM-v8,\n  aarch64), to report the wrong bitness.\n\n20.1 - 2020-01-24\n~~~~~~~~~~~~~~~~~~~\n\n* Fix a bug caused by reuse of an exhausted iterator. (`#257 <https://github.com/pypa/packaging/issues/257>`__)\n\n20.0 - 2020-01-06\n~~~~~~~~~~~~~~~~~\n\n* Add type hints (`#191 <https://github.com/pypa/packaging/issues/191>`__)\n\n* Add proper trove classifiers for PyPy support (`#198 <https://github.com/pypa/packaging/issues/198>`__)\n\n* Scale back depending on ``ctypes`` for manylinux support detection (`#171 <https://github.com/pypa/packaging/issues/171>`__)\n\n* Use ``sys.implementation.name`` where appropriate for ``packaging.tags`` (`#193 <https://github.com/pypa/packaging/issues/193>`__)\n\n* Expand upon the API provded by ``packaging.tags``: ``interpreter_name()``, ``mac_platforms()``, ``compatible_tags()``, ``cpython_tags()``, ``generic_tags()`` (`#187 <https://github.com/pypa/packaging/issues/187>`__)\n\n* Officially support Python 3.8 (`#232 <https://github.com/pypa/packaging/issues/232>`__)\n\n* Add ``major``, ``minor``, and ``micro`` aliases to ``packaging.version.Version`` (`#226 <https://github.com/pypa/packaging/issues/226>`__)\n\n* Properly mark ``packaging`` has being fully typed by adding a `py.typed` file (`#226 <https://github.com/pypa/packaging/issues/226>`__)\n\n19.2 - 2019-09-18\n~~~~~~~~~~~~~~~~~\n\n* Remove dependency on ``attrs`` (`#178 <https://github.com/pypa/packaging/issues/178>`__, `#179 <https://github.com/pypa/packaging/issues/179>`__)\n\n* Use appropriate fallbacks for CPython ABI tag (`#181 <https://github.com/pypa/packaging/issues/181>`__, `#185 <https://github.com/pypa/packaging/issues/185>`__)\n\n* Add manylinux2014 support (`#186 <https://github.com/pypa/packaging/issues/186>`__)\n\n* Improve ABI detection (`#181 <https://github.com/pypa/packaging/issues/181>`__)\n\n* Properly handle debug wheels for Python 3.8 (`#172 <https://github.com/pypa/packaging/issues/172>`__)\n\n* Improve detection of debug builds on Windows (`#194 <https://github.com/pypa/packaging/issues/194>`__)\n\n19.1 - 2019-07-30\n~~~~~~~~~~~~~~~~~\n\n* Add the ``packaging.tags`` module. (`#156 <https://github.com/pypa/packaging/issues/156>`__)\n\n* Correctly handle two-digit versions in ``python_version`` (`#119 <https://github.com/pypa/packaging/issues/119>`__)\n\n\n19.0 - 2019-01-20\n~~~~~~~~~~~~~~~~~\n\n* Fix string representation of PEP 508 direct URL requirements with markers.\n\n* Better handling of file URLs\n\n  This allows for using ``file:///absolute/path``, which was previously\n  prevented due to the missing ``netloc``.\n\n  This allows for all file URLs that ``urlunparse`` turns back into the\n  original URL to be valid.\n\n\n18.0 - 2018-09-26\n~~~~~~~~~~~~~~~~~\n\n* Improve error messages when invalid requirements are given. (`#129 <https://github.com/pypa/packaging/issues/129>`__)\n\n\n17.1 - 2017-02-28\n~~~~~~~~~~~~~~~~~\n\n* Fix ``utils.canonicalize_version`` when supplying non PEP 440 versions.\n\n\n17.0 - 2017-02-28\n~~~~~~~~~~~~~~~~~\n\n* Drop support for python 2.6, 3.2, and 3.3.\n\n* Define minimal pyparsing version to 2.0.2 (`#91 <https://github.com/pypa/packaging/issues/91>`__).\n\n* Add ``epoch``, ``release``, ``pre``, ``dev``, and ``post`` attributes to\n  ``Version`` and ``LegacyVersion`` (`#34 <https://github.com/pypa/packaging/issues/34>`__).\n\n* Add ``Version().is_devrelease`` and ``LegacyVersion().is_devrelease`` to\n  make it easy to determine if a release is a development release.\n\n* Add ``utils.canonicalize_version`` to canonicalize version strings or\n  ``Version`` instances (`#121 <https://github.com/pypa/packaging/issues/121>`__).\n\n\n16.8 - 2016-10-29\n~~~~~~~~~~~~~~~~~\n\n* Fix markers that utilize ``in`` so that they render correctly.\n\n* Fix an erroneous test on Python RC releases.\n\n\n16.7 - 2016-04-23\n~~~~~~~~~~~~~~~~~\n\n* Add support for the deprecated ``python_implementation`` marker which was\n  an undocumented setuptools marker in addition to the newer markers.\n\n\n16.6 - 2016-03-29\n~~~~~~~~~~~~~~~~~\n\n* Add support for the deprecated, PEP 345 environment markers in addition to\n  the newer markers.\n\n\n16.5 - 2016-02-26\n~~~~~~~~~~~~~~~~~\n\n* Fix a regression in parsing requirements with whitespaces between the comma\n  separators.\n\n\n16.4 - 2016-02-22\n~~~~~~~~~~~~~~~~~\n\n* Fix a regression in parsing requirements like ``foo (==4)``.\n\n\n16.3 - 2016-02-21\n~~~~~~~~~~~~~~~~~\n\n* Fix a bug where ``packaging.requirements:Requirement`` was overly strict when\n  matching legacy requirements.\n\n\n16.2 - 2016-02-09\n~~~~~~~~~~~~~~~~~\n\n* Add a function that implements the name canonicalization from PEP 503.\n\n\n16.1 - 2016-02-07\n~~~~~~~~~~~~~~~~~\n\n* Implement requirement specifiers from PEP 508.\n\n\n16.0 - 2016-01-19\n~~~~~~~~~~~~~~~~~\n\n* Relicense so that packaging is available under *either* the Apache License,\n  Version 2.0 or a 2 Clause BSD license.\n\n* Support installation of packaging when only distutils is available.\n\n* Fix ``==`` comparison when there is a prefix and a local version in play.\n  (`#41 <https://github.com/pypa/packaging/issues/41>`__).\n\n* Implement environment markers from PEP 508.\n\n\n15.3 - 2015-08-01\n~~~~~~~~~~~~~~~~~\n\n* Normalize post-release spellings for rev/r prefixes. `#35 <https://github.com/pypa/packaging/issues/35>`__\n\n\n15.2 - 2015-05-13\n~~~~~~~~~~~~~~~~~\n\n* Fix an error where the arbitary specifier (``===``) was not correctly\n  allowing pre-releases when it was being used.\n\n* Expose the specifier and version parts through properties on the\n  ``Specifier`` classes.\n\n* Allow iterating over the ``SpecifierSet`` to get access to all of the\n  ``Specifier`` instances.\n\n* Allow testing if a version is contained within a specifier via the ``in``\n  operator.\n\n\n15.1 - 2015-04-13\n~~~~~~~~~~~~~~~~~\n\n* Fix a logic error that was causing inconsistent answers about whether or not\n  a pre-release was contained within a ``SpecifierSet`` or not.\n\n\n15.0 - 2015-01-02\n~~~~~~~~~~~~~~~~~\n\n* Add ``Version().is_postrelease`` and ``LegacyVersion().is_postrelease`` to\n  make it easy to determine if a release is a post release.\n\n* Add ``Version().base_version`` and ``LegacyVersion().base_version`` to make\n  it easy to get the public version without any pre or post release markers.\n\n* Support the update to PEP 440 which removed the implied ``!=V.*`` when using\n  either ``>V`` or ``<V`` and which instead special cased the handling of\n  pre-releases, post-releases, and local versions when using ``>V`` or ``<V``.\n\n\n14.5 - 2014-12-17\n~~~~~~~~~~~~~~~~~\n\n* Normalize release candidates as ``rc`` instead of ``c``.\n\n* Expose the ``VERSION_PATTERN`` constant, a regular expression matching\n  a valid version.\n\n\n14.4 - 2014-12-15\n~~~~~~~~~~~~~~~~~\n\n* Ensure that versions are normalized before comparison when used in a\n  specifier with a less than (``<``) or greater than (``>``) operator.\n\n\n14.3 - 2014-11-19\n~~~~~~~~~~~~~~~~~\n\n* **BACKWARDS INCOMPATIBLE** Refactor specifier support so that it can sanely\n  handle legacy specifiers as well as PEP 440 specifiers.\n\n* **BACKWARDS INCOMPATIBLE** Move the specifier support out of\n  ``packaging.version`` into ``packaging.specifiers``.\n\n\n14.2 - 2014-09-10\n~~~~~~~~~~~~~~~~~\n\n* Add prerelease support to ``Specifier``.\n* Remove the ability to do ``item in Specifier()`` and replace it with\n  ``Specifier().contains(item)`` in order to allow flags that signal if a\n  prerelease should be accepted or not.\n* Add a method ``Specifier().filter()`` which will take an iterable and returns\n  an iterable with items that do not match the specifier filtered out.\n\n\n14.1 - 2014-09-08\n~~~~~~~~~~~~~~~~~\n\n* Allow ``LegacyVersion`` and ``Version`` to be sorted together.\n* Add ``packaging.version.parse()`` to enable easily parsing a version string\n  as either a ``Version`` or a ``LegacyVersion`` depending on it's PEP 440\n  validity.\n\n\n14.0 - 2014-09-05\n~~~~~~~~~~~~~~~~~\n\n* Initial release.\n\n\n.. _`master`: https://github.com/pypa/packaging/\n\n\n",
          "name": "packaging",
          "author": [
            {
              "type": "Person",
              "name": "Donald Stufft",
              "familyName": [
                "Stufft"
              ],
              "givenName": [
                "Donald"
              ]
            }
          ],
          "license": "BSD-2-Clause or Apache-2.0",
          "version": "==20.9",
          "codeRepository": "https://pypi.org/project/packaging/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python"
        },
        {
          "type": "SoftwarePackage",
          "description": "\n**pandas** is a Python package that provides fast, flexible, and expressive data\nstructures designed to make working with structured (tabular, multidimensional,\npotentially heterogeneous) and time series data both easy and intuitive. It\naims to be the fundamental high-level building block for doing practical,\n**real world** data analysis in Python. Additionally, it has the broader goal\nof becoming **the most powerful and flexible open source data analysis /\nmanipulation tool available in any language**. It is already well on its way\ntoward this goal.\n\npandas is well suited for many different kinds of data:\n\n  - Tabular data with heterogeneously-typed columns, as in an SQL table or\n    Excel spreadsheet\n  - Ordered and unordered (not necessarily fixed-frequency) time series data.\n  - Arbitrary matrix data (homogeneously typed or heterogeneous) with row and\n    column labels\n  - Any other form of observational / statistical data sets. The data actually\n    need not be labeled at all to be placed into a pandas data structure\n\nThe two primary data structures of pandas, Series (1-dimensional) and DataFrame\n(2-dimensional), handle the vast majority of typical use cases in finance,\nstatistics, social science, and many areas of engineering. For R users,\nDataFrame provides everything that R's ``data.frame`` provides and much\nmore. pandas is built on top of `NumPy <https://www.numpy.org>`__ and is\nintended to integrate well within a scientific computing environment with many\nother 3rd party libraries.\n\nHere are just a few of the things that pandas does well:\n\n  - Easy handling of **missing data** (represented as NaN) in floating point as\n    well as non-floating point data\n  - Size mutability: columns can be **inserted and deleted** from DataFrame and\n    higher dimensional objects\n  - Automatic and explicit **data alignment**: objects can be explicitly\n    aligned to a set of labels, or the user can simply ignore the labels and\n    let `Series`, `DataFrame`, etc. automatically align the data for you in\n    computations\n  - Powerful, flexible **group by** functionality to perform\n    split-apply-combine operations on data sets, for both aggregating and\n    transforming data\n  - Make it **easy to convert** ragged, differently-indexed data in other\n    Python and NumPy data structures into DataFrame objects\n  - Intelligent label-based **slicing**, **fancy indexing**, and **subsetting**\n    of large data sets\n  - Intuitive **merging** and **joining** data sets\n  - Flexible **reshaping** and pivoting of data sets\n  - **Hierarchical** labeling of axes (possible to have multiple labels per\n    tick)\n  - Robust IO tools for loading data from **flat files** (CSV and delimited),\n    Excel files, databases, and saving / loading data from the ultrafast **HDF5\n    format**\n  - **Time series**-specific functionality: date range generation and frequency\n    conversion, moving window statistics, date shifting and lagging.\n\nMany of these principles are here to address the shortcomings frequently\nexperienced using other languages / scientific research environments. For data\nscientists, working with data is typically divided into multiple stages:\nmunging and cleaning data, analyzing / modeling it, then organizing the results\nof the analysis into a form suitable for plotting or tabular display. pandas is\nthe ideal tool for all of these tasks.\n\n\n",
          "name": "pandas",
          "license": "BSD",
          "version": "==1.2.4",
          "codeRepository": "https://pypi.org/project/pandas/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python",
          "applicationCategory": [
            "Scientific/Engineering"
          ]
        },
        {
          "type": "SoftwarePackage",
          "description": "pandocfilters\n=============\n\nA python module for writing `pandoc <http://pandoc.org/>`_ filters\n\nWhat are pandoc filters?\n--------------------------\nPandoc filters\nare pipes that read a JSON serialization of the Pandoc AST\nfrom stdin, transform it in some way, and write it to stdout.\nThey can be used with pandoc (>= 1.12) either using pipes ::\n\n    pandoc -t json -s | ./caps.py | pandoc -f json\n\nor using the ``--filter`` (or ``-F``) command-line option. ::\n\n    pandoc --filter ./caps.py -s\n\nFor more on pandoc filters, see the pandoc documentation under ``--filter``\nand `the tutorial on writing filters`__.\n\n__ http://johnmacfarlane.net/pandoc/scripting.html\n\nFor an alternative library for writing pandoc filters, with\na more \"Pythonic\" design, see `panflute`__.\n\n__ https://github.com/sergiocorreia/panflute\n\nCompatibility\n----------------\nPandoc 1.16 introduced link and image `attributes` to the existing\n`caption` and `target` arguments, requiring a change in pandocfilters\nthat breaks backwards compatibility. Consequently, you should use:\n\n- pandocfilters version <= 1.2.4 for pandoc versions 1.12--1.15, and\n- pandocfilters version >= 1.3.0 for pandoc versions >= 1.16.\n\nPandoc 1.17.3 (pandoc-types 1.17.*) introduced a new JSON format.\npandocfilters 1.4.0 should work with both the old and the new\nformat.\n\nInstalling\n--------------\nRun this inside the present directory::\n\n    python setup.py install\n\nOr install from PyPI::\n\n    pip install pandocfilters\n\nAvailable functions\n----------------------\nThe main functions ``pandocfilters`` exports are\n\n-  ``walk(x, action, format, meta)``\n\n   Walk a tree, applying an action to every object. Returns a modified\n   tree. An action is a function of the form\n   ``action(key, value, format, meta)``, where:\n\n   -  ``key`` is the type of the pandoc object (e.g. 'Str', 'Para')\n   -  ``value`` is the contents of the object (e.g. a string for 'Str', a list of\n      inline elements for 'Para')\n   -  ``format`` is the target output format (as supplied by the\n      ``format`` argument of ``walk``)\n   -  ``meta`` is the document's metadata\n\n   The return of an action is either:\n\n   -  ``None``: this means that the object should remain unchanged\n   -  a pandoc object: this will replace the original object\n   -  a list of pandoc objects: these will replace the original object;\n      the list is merged with the neighbors of the original objects\n      (spliced into the list the original object belongs to); returning\n      an empty list deletes the object\n\n-  ``toJSONFilter(action)``\n\n   Like ``toJSONFilters``, but takes a single action as argument.\n\n-  ``toJSONFilters(actions)``\n\n   Generate a JSON-to-JSON filter from stdin to stdout\n\n   The filter:\n\n   -  reads a JSON-formatted pandoc document from stdin\n   -  transforms it by walking the tree and performing the actions\n   -  returns a new JSON-formatted pandoc document to stdout\n\n   The argument ``actions`` is a list of functions of the form\n   ``action(key, value, format, meta)``, as described in more detail\n   under ``walk``.\n\n   This function calls ``applyJSONFilters``, with the ``format``\n   argument provided by the first command-line argument, if present.\n   (Pandoc sets this by default when calling filters.)\n\n-  ``applyJSONFilters(actions, source, format=\"\")``\n\n   Walk through JSON structure and apply filters\n\n   This:\n\n   -  reads a JSON-formatted pandoc document from a source string\n   -  transforms it by walking the tree and performing the actions\n   -  returns a new JSON-formatted pandoc document as a string\n\n   The ``actions`` argument is a list of functions (see ``walk`` for a\n   full description).\n\n   The argument ``source`` is a string encoded JSON object.\n\n   The argument ``format`` is a string describing the output format.\n\n   Returns a new JSON-formatted pandoc document.\n\n-  ``stringify(x)``\n\n   Walks the tree x and returns concatenated string content, leaving out\n   all formatting.\n\n-  ``attributes(attrs)``\n\n   Returns an attribute list, constructed from the dictionary attrs.\n\nHow to use\n----------\nMost users will only need ``toJSONFilter``.  Here is a simple example\nof its use::\n\n    #!/usr/bin/env python\n\n    \"\"\"\n    Pandoc filter to convert all regular text to uppercase.\n    Code, link URLs, etc. are not affected.\n    \"\"\"\n\n    from pandocfilters import toJSONFilter, Str\n\n    def caps(key, value, format, meta):\n      if key == 'Str':\n        return Str(value.upper())\n\n    if __name__ == \"__main__\":\n      toJSONFilter(caps)\n\nExamples\n--------\n\nThe examples subdirectory in the source repository contains the\nfollowing filters. These filters should provide a useful starting point\nfor developing your own pandocfilters.\n\n``abc.py``\n    Pandoc filter to process code blocks with class ``abc`` containing ABC\n    notation into images. Assumes that abcm2ps and ImageMagick's convert\n    are in the path. Images are put in the abc-images directory.\n\n``caps.py``\n    Pandoc filter to convert all regular text to uppercase. Code, link\n    URLs, etc. are not affected.\n\n``comments.py``\n    Pandoc filter that causes everything between\n    ``<!-- BEGIN COMMENT -->`` and ``<!-- END COMMENT -->`` to be ignored.\n    The comment lines must appear on lines by themselves, with blank\n    lines surrounding\n\n``deemph.py``\n    Pandoc filter that causes emphasized text to be displayed in ALL\n    CAPS.\n\n``deflists.py``\n    Pandoc filter to convert definition lists to bullet lists with the\n    defined terms in strong emphasis (for compatibility with standard\n    markdown).\n\n``gabc.py``\n    Pandoc filter to convert code blocks with class \"gabc\" to LaTeX\n    \\\\gabcsnippet commands in LaTeX output, and to images in HTML output.\n\n``graphviz.py``\n    Pandoc filter to process code blocks with class ``graphviz`` into\n    graphviz-generated images.\n\n``lilypond.py``\n    Pandoc filter to process code blocks with class \"ly\" containing\n    Lilypond notation.\n\n``metavars.py``\n    Pandoc filter to allow interpolation of metadata fields into a\n    document. ``%{fields}`` will be replaced by the field's value, assuming\n    it is of the type ``MetaInlines`` or ``MetaString``.\n\n``myemph.py``\n    Pandoc filter that causes emphasis to be rendered using the custom\n    macro ``\\myemph{...}`` rather than ``\\emph{...}`` in latex. Other output\n    formats are unaffected.\n\n``plantuml.py``\n    Pandoc filter to process code blocks with class ``plantuml`` to images.\n    Needs `plantuml.jar` from http://plantuml.com/.\n\n``theorem.py``\n    Pandoc filter to convert divs with ``class=\"theorem\"`` to LaTeX theorem\n    environments in LaTeX output, and to numbered theorems in HTML\n    output.\n\n``tikz.py``\n    Pandoc filter to process raw latex tikz environments into images.\n    Assumes that pdflatex is in the path, and that the standalone\n    package is available. Also assumes that ImageMagick's convert is in\n    the path. Images are put in the ``tikz-images`` directory.",
          "name": "pandocfilters",
          "author": [
            {
              "type": "Person",
              "name": "John MacFarlane",
              "email": [
                "fiddlosopher@gmail.com"
              ],
              "familyName": [
                "MacFarlane"
              ],
              "givenName": [
                "John"
              ]
            }
          ],
          "keywords": "pandoc",
          "license": "BSD-3-Clause",
          "version": "==1.4.3",
          "codeRepository": "https://pypi.org/project/pandocfilters/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python",
          "applicationCategory": [
            "Text Processing"
          ],
          "applicationSubCategory": [
            "Filters"
          ]
        },
        {
          "type": "SoftwarePackage",
          "description": "###################################################################\nparso - A Python Parser\n###################################################################\n\n\n.. image:: https://travis-ci.org/davidhalter/parso.svg?branch=master\n    :target: https://travis-ci.org/davidhalter/parso\n    :alt: Travis CI build status\n\n.. image:: https://coveralls.io/repos/github/davidhalter/parso/badge.svg?branch=master\n    :target: https://coveralls.io/github/davidhalter/parso?branch=master\n    :alt: Coverage Status\n\n.. image:: https://pepy.tech/badge/parso\n    :target: https://pepy.tech/project/parso\n    :alt: PyPI Downloads\n\n.. image:: https://raw.githubusercontent.com/davidhalter/parso/master/docs/_static/logo_characters.png\n\nParso is a Python parser that supports error recovery and round-trip parsing\nfor different Python versions (in multiple Python versions). Parso is also able\nto list multiple syntax errors in your python file.\n\nParso has been battle-tested by jedi_. It was pulled out of jedi to be useful\nfor other projects as well.\n\nParso consists of a small API to parse Python and analyse the syntax tree.\n\nA simple example:\n\n.. code-block:: python\n\n    >>> import parso\n    >>> module = parso.parse('hello + 1', version=\"3.9\")\n    >>> expr = module.children[0]\n    >>> expr\n    PythonNode(arith_expr, [<Name: hello@1,0>, <Operator: +>, <Number: 1>])\n    >>> print(expr.get_code())\n    hello + 1\n    >>> name = expr.children[0]\n    >>> name\n    <Name: hello@1,0>\n    >>> name.end_pos\n    (1, 5)\n    >>> expr.end_pos\n    (1, 9)\n\nTo list multiple issues:\n\n.. code-block:: python\n\n    >>> grammar = parso.load_grammar()\n    >>> module = grammar.parse('foo +\\nbar\\ncontinue')\n    >>> error1, error2 = grammar.iter_errors(module)\n    >>> error1.message\n    'SyntaxError: invalid syntax'\n    >>> error2.message\n    \"SyntaxError: 'continue' not properly in loop\"\n\nResources\n=========\n\n- `Testing <https://parso.readthedocs.io/en/latest/docs/development.html#testing>`_\n- `PyPI <https://pypi.python.org/pypi/parso>`_\n- `Docs <https://parso.readthedocs.org/en/latest/>`_\n- Uses `semantic versioning <https://semver.org/>`_\n\nInstallation\n============\n\n    pip install parso\n\nFuture\n======\n\n- There will be better support for refactoring and comments. Stay tuned.\n- There's a WIP PEP8 validator. It's however not in a good shape, yet.\n\nKnown Issues\n============\n\n- `async`/`await` are already used as keywords in Python3.6.\n- `from __future__ import print_function` is not ignored.\n\n\nAcknowledgements\n================\n\n- Guido van Rossum (@gvanrossum) for creating the parser generator pgen2\n  (originally used in lib2to3).\n- `Salome Schneider <https://www.crepes-schnaegg.ch/cr%C3%AApes-schn%C3%A4gg/kunst-f%C3%BCrs-cr%C3%AApes-mobil/>`_\n  for the extremely awesome parso logo.\n\n\n.. _jedi: https://github.com/davidhalter/jedi\n\n\n.. :changelog:\n\nChangelog\n---------\n\nUnreleased\n++++++++++\n\n0.8.2 (2021-03-30)\n++++++++++++++++++\n\n- Various small bugfixes\n\n0.8.1 (2020-12-10)\n++++++++++++++++++\n\n- Various small bugfixes\n\n0.8.0 (2020-08-05)\n++++++++++++++++++\n\n- Dropped Support for Python 2.7, 3.4, 3.5\n- It's possible to use ``pathlib.Path`` objects now in the API\n- The stubs are gone, we are now using annotations\n- ``namedexpr_test`` nodes are now a proper class called ``NamedExpr``\n- A lot of smaller refactorings\n\n0.7.1 (2020-07-24)\n++++++++++++++++++\n\n- Fixed a couple of smaller bugs (mostly syntax error detection in\n  ``Grammar.iter_errors``)\n\nThis is going to be the last release that supports Python 2.7, 3.4 and 3.5.\n\n0.7.0 (2020-04-13)\n++++++++++++++++++\n\n- Fix a lot of annoying bugs in the diff parser. The fuzzer did not find\n  issues anymore even after running it for more than 24 hours (500k tests).\n- Small grammar change: suites can now contain newlines even after a newline.\n  This should really not matter if you don't use error recovery. It allows for\n  nicer error recovery.\n\n0.6.2 (2020-02-27)\n++++++++++++++++++\n\n- Bugfixes\n- Add Grammar.refactor (might still be subject to change until 0.7.0)\n\n0.6.1 (2020-02-03)\n++++++++++++++++++\n\n- Add ``parso.normalizer.Issue.end_pos`` to make it possible to know where an\n  issue ends\n\n0.6.0 (2020-01-26)\n++++++++++++++++++\n\n- Dropped Python 2.6/Python 3.3 support\n- del_stmt names are now considered as a definition\n  (for ``name.is_definition()``)\n- Bugfixes\n\n0.5.2 (2019-12-15)\n++++++++++++++++++\n\n- Add include_setitem to get_definition/is_definition and get_defined_names (#66)\n- Fix named expression error listing (#89, #90)\n- Fix some f-string tokenizer issues (#93)\n\n0.5.1 (2019-07-13)\n++++++++++++++++++\n\n- Fix: Some unicode identifiers were not correctly tokenized\n- Fix: Line continuations in f-strings are now working\n\n0.5.0 (2019-06-20)\n++++++++++++++++++\n\n- **Breaking Change** comp_for is now called sync_comp_for for all Python\n  versions to be compatible with the Python 3.8 Grammar\n- Added .pyi stubs for a lot of the parso API\n- Small FileIO changes\n\n0.4.0 (2019-04-05)\n++++++++++++++++++\n\n- Python 3.8 support\n- FileIO support, it's now possible to use abstract file IO, support is alpha\n\n0.3.4 (2019-02-13)\n+++++++++++++++++++\n\n- Fix an f-string tokenizer error\n\n0.3.3 (2019-02-06)\n+++++++++++++++++++\n\n- Fix async errors in the diff parser\n- A fix in iter_errors\n- This is a very small bugfix release\n\n0.3.2 (2019-01-24)\n+++++++++++++++++++\n\n- 20+ bugfixes in the diff parser and 3 in the tokenizer\n- A fuzzer for the diff parser, to give confidence that the diff parser is in a\n  good shape.\n- Some bugfixes for f-string\n\n0.3.1 (2018-07-09)\n+++++++++++++++++++\n\n- Bugfixes in the diff parser and keyword-only arguments\n\n0.3.0 (2018-06-30)\n+++++++++++++++++++\n\n- Rewrote the pgen2 parser generator.\n\n0.2.1 (2018-05-21)\n+++++++++++++++++++\n\n- A bugfix for the diff parser.\n- Grammar files can now be loaded from a specific path.\n\n0.2.0 (2018-04-15)\n+++++++++++++++++++\n\n- f-strings are now parsed as a part of the normal Python grammar. This makes\n  it way easier to deal with them.\n\n0.1.1 (2017-11-05)\n+++++++++++++++++++\n\n- Fixed a few bugs in the caching layer\n- Added support for Python 3.7\n\n0.1.0 (2017-09-04)\n+++++++++++++++++++\n\n- Pulling the library out of Jedi. Some APIs will definitely change.\n\n\n",
          "name": "parso",
          "author": [
            {
              "type": "Person",
              "name": "David Halter",
              "email": [
                "davidhalter88@gmail.com"
              ],
              "familyName": [
                "Halter"
              ],
              "givenName": [
                "David"
              ]
            }
          ],
          "keywords": "python parser parsing",
          "license": "MIT",
          "codeRepository": "https://pypi.org/project/parso/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python",
          "applicationCategory": [
            "Software Development",
            "Text Editors",
            "Utilities"
          ],
          "applicationSubCategory": [
            "Libraries",
            "Integrated Development Environments (IDE)"
          ]
        },
        {
          "type": "SoftwarePackage",
          "description": "Patsy is a Python library for describing statistical models\n(especially linear models, or models that have a linear component) and\nbuilding design matrices. Patsy brings the convenience of `R\n<http://www.r-project.org/>`_ \"formulas\" to Python.\n\n.. image:: https://travis-ci.org/pydata/patsy.png?branch=master\n   :target: https://travis-ci.org/pydata/patsy\n.. image:: https://coveralls.io/repos/pydata/patsy/badge.png?branch=master\n   :target: https://coveralls.io/r/pydata/patsy?branch=master\n\nDocumentation:\n  https://patsy.readthedocs.io/\n\nDownloads:\n  http://pypi.python.org/pypi/patsy/\n\nDependencies:\n  * Python (2.6, 2.7, or 3.3+)\n  * six\n  * numpy\n\nOptional dependencies:\n  * nose: needed to run tests\n  * scipy: needed for spline-related functions like ``bs``\n\nInstall:\n  ``pip install patsy`` (or, for traditionalists: ``python setup.py install``)\n\nCode and bug tracker:\n  https://github.com/pydata/patsy\n\nMailing list:\n  * pydata@googlegroups.com\n  * http://groups.google.com/group/pydata\n  * http://news.gmane.org/gmane.comp.python.pydata\n\nLicense:\n  2-clause BSD, see LICENSE.txt for details.\n\n\n",
          "name": "patsy",
          "author": [
            {
              "type": "Person",
              "name": "Nathaniel J.",
              "familyName": [
                "J."
              ],
              "givenName": [
                "Nathaniel"
              ]
            }
          ],
          "license": "2-clause BSD",
          "version": "==0.5.1",
          "codeRepository": "https://pypi.org/project/patsy/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python",
          "applicationCategory": [
            "Scientific/Engineering"
          ]
        },
        {
          "type": "SoftwarePackage",
          "description": "\nPexpect is a pure Python module for spawning child applications; controlling\nthem; and responding to expected patterns in their output. Pexpect works like\nDon Libes' Expect. Pexpect allows your script to spawn a child application and\ncontrol it as if a human were typing commands.\n\nPexpect can be used for automating interactive applications such as ssh, ftp,\npasswd, telnet, etc. It can be used to a automate setup scripts for duplicating\nsoftware package installations on different servers. It can be used for\nautomated software testing. Pexpect is in the spirit of Don Libes' Expect, but\nPexpect is pure Python.\n\nThe main features of Pexpect require the pty module in the Python standard\nlibrary, which is only available on Unix-like systems. Some features—waiting\nfor patterns from file descriptors or subprocesses—are also available on\nWindows.\n\n\n",
          "name": "pexpect",
          "author": [
            {
              "type": "Person",
              "name": "Noah Spurrier;",
              "familyName": [
                "Spurrier;"
              ],
              "givenName": [
                "Noah"
              ]
            }
          ],
          "license": "ISC license",
          "codeRepository": "https://pypi.org/project/pexpect/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python",
          "applicationCategory": [
            "Software Development",
            "System",
            "Terminals"
          ],
          "applicationSubCategory": [
            "Libraries",
            "Quality Assurance",
            "Testing",
            "Archiving",
            "Installation/Setup",
            "Shells",
            "Software Distribution"
          ],
          "operatingSystem": [
            {
              "type": "OperatingSystem",
              "name": "macOS"
            }
          ]
        },
        {
          "type": "SoftwarePackage",
          "description": "PickleShare - a small 'shelve' like datastore with concurrency support\n\nLike shelve, a PickleShareDB object acts like a normal dictionary. Unlike shelve,\nmany processes can access the database simultaneously. Changing a value in \ndatabase is immediately visible to other processes accessing the same database.\n\nConcurrency is possible because the values are stored in separate files. Hence\nthe \"database\" is a directory where *all* files are governed by PickleShare.\n\nExample usage::\n\n    from pickleshare import *\n    db = PickleShareDB('~/testpickleshare')\n    db.clear()\n    print(\"Should be empty:\",db.items())\n    db['hello'] = 15\n    db['aku ankka'] = [1,2,313]\n    db['paths/are/ok/key'] = [1,(5,46)]\n    print(db.keys())\n\nThis module is certainly not ZODB, but can be used for low-load\n(non-mission-critical) situations where tiny code size trumps the \nadvanced features of a \"real\" object database.\n\nInstallation guide: pip install pickleshare\n\n\n",
          "name": "pickleshare",
          "author": [
            {
              "type": "Person",
              "name": "Ville Vainio",
              "email": [
                "vivainio@gmail.com"
              ],
              "familyName": [
                "Vainio"
              ],
              "givenName": [
                "Ville"
              ]
            }
          ],
          "keywords": "database persistence pickle ipc shelve",
          "license": "MIT",
          "codeRepository": "https://pypi.org/project/pickleshare/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python"
        },
        {
          "type": "SoftwarePackage",
          "description": "<p align=\"center\">\n    <img width=\"248\" height=\"250\" src=\"https://raw.githubusercontent.com/python-pillow/pillow-logo/master/pillow-logo-248x250.png\" alt=\"Pillow logo\">\n</p>\n\n# Pillow\n\n## Python Imaging Library (Fork)\n\nPillow is the friendly PIL fork by [Alex Clark and\nContributors](https://github.com/python-pillow/Pillow/graphs/contributors).\nPIL is the Python Imaging Library by Fredrik Lundh and Contributors.\nAs of 2019, Pillow development is\n[supported by Tidelift](https://tidelift.com/subscription/pkg/pypi-pillow?utm_source=pypi-pillow&utm_medium=readme&utm_campaign=enterprise).\n\n<table>\n    <tr>\n        <th>docs</th>\n        <td>\n            <a href=\"https://pillow.readthedocs.io/?badge=latest\"><img\n                alt=\"Documentation Status\"\n                src=\"https://readthedocs.org/projects/pillow/badge/?version=latest\"></a>\n        </td>\n    </tr>\n    <tr>\n        <th>tests</th>\n        <td>\n            <a href=\"https://github.com/python-pillow/Pillow/actions?query=workflow%3ALint\"><img\n                alt=\"GitHub Actions build status (Lint)\"\n                src=\"https://github.com/python-pillow/Pillow/workflows/Lint/badge.svg\"></a>\n            <a href=\"https://github.com/python-pillow/Pillow/actions?query=workflow%3ATest\"><img\n                alt=\"GitHub Actions build status (Test Linux and macOS)\"\n                src=\"https://github.com/python-pillow/Pillow/workflows/Test/badge.svg\"></a>\n            <a href=\"https://github.com/python-pillow/Pillow/actions?query=workflow%3A%22Test+Windows%22\"><img\n                alt=\"GitHub Actions build status (Test Windows)\"\n                src=\"https://github.com/python-pillow/Pillow/workflows/Test%20Windows/badge.svg\"></a>\n            <a href=\"https://github.com/python-pillow/Pillow/actions?query=workflow%3A%22Test+Docker%22\"><img\n                alt=\"GitHub Actions build status (Test Docker)\"\n                src=\"https://github.com/python-pillow/Pillow/workflows/Test%20Docker/badge.svg\"></a>\n            <a href=\"https://ci.appveyor.com/project/python-pillow/Pillow\"><img\n                alt=\"AppVeyor CI build status (Windows)\"\n                src=\"https://img.shields.io/appveyor/build/python-pillow/Pillow/master.svg?label=Windows%20build\"></a>\n            <a href=\"https://travis-ci.com/github/python-pillow/pillow-wheels\"><img\n                alt=\"Travis CI build status (macOS)\"\n                src=\"https://img.shields.io/travis/com/python-pillow/pillow-wheels/master.svg?label=macOS%20build\"></a>\n            <a href=\"https://codecov.io/gh/python-pillow/Pillow\"><img\n                alt=\"Code coverage\"\n                src=\"https://codecov.io/gh/python-pillow/Pillow/branch/master/graph/badge.svg\"></a>\n        </td>\n    </tr>\n    <tr>\n        <th>package</th>\n        <td>\n            <a href=\"https://zenodo.org/badge/latestdoi/17549/python-pillow/Pillow\"><img\n                alt=\"Zenodo\"\n                src=\"https://zenodo.org/badge/17549/python-pillow/Pillow.svg\"></a>\n            <a href=\"https://tidelift.com/subscription/pkg/pypi-pillow?utm_source=pypi-pillow&utm_medium=badge\"><img\n                alt=\"Tidelift\"\n                src=\"https://tidelift.com/badges/package/pypi/Pillow?style=flat\"></a>\n            <a href=\"https://pypi.org/project/Pillow/\"><img\n                alt=\"Newest PyPI version\"\n                src=\"https://img.shields.io/pypi/v/pillow.svg\"></a>\n            <a href=\"https://pypi.org/project/Pillow/\"><img\n                alt=\"Number of PyPI downloads\"\n                src=\"https://img.shields.io/pypi/dm/pillow.svg\"></a>\n        </td>\n    </tr>\n    <tr>\n        <th>social</th>\n        <td>\n            <a href=\"https://gitter.im/python-pillow/Pillow?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge\"><img\n                alt=\"Join the chat at https://gitter.im/python-pillow/Pillow\"\n                src=\"https://badges.gitter.im/python-pillow/Pillow.svg\"></a>\n            <a href=\"https://twitter.com/PythonPillow\"><img\n                alt=\"Follow on https://twitter.com/PythonPillow\"\n                src=\"https://img.shields.io/badge/tweet-on%20Twitter-00aced.svg\"></a>\n        </td>\n    </tr>\n</table>\n\n## Overview\n\nThe Python Imaging Library adds image processing capabilities to your Python interpreter.\n\nThis library provides extensive file format support, an efficient internal representation, and fairly powerful image processing capabilities.\n\nThe core image library is designed for fast access to data stored in a few basic pixel formats. It should provide a solid foundation for a general image processing tool.\n\n## More Information\n\n- [Documentation](https://pillow.readthedocs.io/)\n  - [Installation](https://pillow.readthedocs.io/en/latest/installation.html)\n  - [Handbook](https://pillow.readthedocs.io/en/latest/handbook/index.html)\n- [Contribute](https://github.com/python-pillow/Pillow/blob/master/.github/CONTRIBUTING.md)\n  - [Issues](https://github.com/python-pillow/Pillow/issues)\n  - [Pull requests](https://github.com/python-pillow/Pillow/pulls)\n- [Release notes](https://pillow.readthedocs.io/en/stable/releasenotes/index.html)\n- [Changelog](https://github.com/python-pillow/Pillow/blob/master/CHANGES.rst)\n  - [Pre-fork](https://github.com/python-pillow/Pillow/blob/master/CHANGES.rst#pre-fork)\n\n## Report a Vulnerability\n\nTo report a security vulnerability, please follow the procedure described in the [Tidelift security policy](https://tidelift.com/docs/security).\n\n\n",
          "name": "Pillow",
          "author": [
            {
              "type": "Person",
              "name": "Alex Clark",
              "url": [
                "PIL Fork Author"
              ],
              "familyName": [
                "Clark"
              ],
              "givenName": [
                "Alex"
              ]
            }
          ],
          "keywords": "Imaging",
          "license": "HPND",
          "codeRepository": "https://pypi.org/project/Pillow/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python",
          "applicationCategory": [
            "Multimedia"
          ],
          "applicationSubCategory": [
            "Graphics"
          ]
        },
        {
          "type": "SoftwarePackage",
          "description": "# plotly.py\n\n<table>\n    <tr>\n        <td>Latest Release</td>\n        <td>\n            <a href=\"https://pypi.org/project/plotly/\"/>\n            <img src=\"https://badge.fury.io/py/plotly.svg\"/>\n        </td>\n    </tr>\n    <tr>\n        <td>User forum</td>\n        <td>\n            <a href=\"https://community.plot.ly\"/>\n            <img src=\"https://img.shields.io/badge/help_forum-discourse-blue.svg\"/>\n        </td>\n    </tr>\n    <tr>\n        <td>PyPI Downloads</td>\n        <td>\n            <a href=\"https://pepy.tech/project/plotly\"/>\n            <img src=\"https://pepy.tech/badge/plotly/month\"/>\n        </td>\n    </tr>\n    <tr>\n        <td>License</td>\n        <td>\n            <a href=\"https://opensource.org/licenses/MIT\"/>\n            <img src=\"https://img.shields.io/badge/License-MIT-yellow.svg\"/>\n        </td>\n    </tr>\n</table>\n\n## Data Science Workspaces\n\nOur recommended IDE for Plotly’s Python graphing library is Dash Enterprise’s [Data Science Workspaces](https://plotly.com/dash/workspaces/), which has both Jupyter notebook and Python code file support.\n\n## Quickstart\n\n`pip install plotly==4.14.3`\n\nInside [Jupyter notebook](https://jupyter.org/install) (installable with `pip install \"notebook>=5.3\" \"ipywidgets>=7.5\"`):\n\n```python\nimport plotly.graph_objects as go\nfig = go.Figure()\nfig.add_trace(go.Scatter(y=[2, 1, 4, 3]))\nfig.add_trace(go.Bar(y=[1, 4, 3, 2]))\nfig.update_layout(title = 'Hello Figure')\nfig.show()\n```\n\nSee the [Python documentation](https://plot.ly/python/) for more examples.\n\nRead about what's new in [plotly.py v4](https://medium.com/plotly/plotly-py-4-0-is-here-offline-only-express-first-displayable-anywhere-fc444e5659ee)\n\n## Overview\n\n[plotly.py](https://plot.ly/python) is an interactive, open-source, and browser-based graphing library for Python :sparkles:\n\nBuilt on top of [plotly.js](https://github.com/plotly/plotly.js), `plotly.py` is a high-level, declarative charting library. plotly.js ships with over 30 chart types, including scientific charts, 3D graphs, statistical charts, SVG maps, financial charts, and more.\n\n`plotly.py` is [MIT Licensed](packages/python/chart-studio/LICENSE.txt). Plotly graphs can be viewed in Jupyter notebooks, standalone HTML files, or hosted online using [Chart Studio Cloud](https://chart-studio.plot.ly/feed/).\n\n[Contact us](https://plot.ly/products/consulting-and-oem/) for consulting, dashboard development, application integration, and feature additions.\n\n<p align=\"center\">\n    <a href=\"https://plot.ly/python\" target=\"_blank\">\n    <img src=\"https://raw.githubusercontent.com/cldougl/plot_images/add_r_img/plotly_2017.png\">\n</a></p>\n\n---\n\n- [Online Documentation](https://plot.ly/python)\n- [Contributing to plotly](contributing.md)\n- [Changelog](CHANGELOG.md)\n- [Code of Conduct](CODE_OF_CONDUCT.md)\n- [Version 4 Migration Guide](https://plot.ly/python/next/v4-migration/)\n- [New! Announcing Dash 1.0](https://medium.com/plotly/welcoming-dash-1-0-0-f3af4b84bae)\n- [Community forum](https://community.plot.ly/c/api/python)\n\n---\n\n## Installation\n\nplotly.py may be installed using pip...\n\n```\npip install plotly==4.14.3\n```\n\nor conda.\n\n```\nconda install -c plotly plotly=4.14.3\n```\n\n### Jupyter Notebook Support\n\nFor use in the Jupyter Notebook, install the `notebook` and `ipywidgets`\npackages using `pip`:\n\n```\npip install \"notebook>=5.3\" \"ipywidgets>=7.5\"\n```\n\nor `conda`:\n\n```\nconda install \"notebook>=5.3\" \"ipywidgets>=7.5\"\n```\n\n### JupyterLab Support\n\nFor use in JupyterLab, install the `jupyterlab` and `ipywidgets`\npackages using `pip`:\n\n```\npip install jupyterlab \"ipywidgets>=7.5\"\n```\n\nor `conda`:\n\n```\nconda install jupyterlab \"ipywidgets>=7.5\"\n```\n\nThen run the following commands to install the required JupyterLab extensions (note that this will require [`node`](https://nodejs.org/) to be installed):\n\n```\n# Basic JupyterLab renderer support\njupyter labextension install jupyterlab-plotly@4.14.3\n\n# OPTIONAL: Jupyter widgets extension for FigureWidget support\njupyter labextension install @jupyter-widgets/jupyterlab-manager plotlywidget@4.14.3\n```\n\nPlease check out our [Troubleshooting guide](https://plotly.com/python/troubleshooting/) if you run into any problems with JupyterLab.\n\n### Static Image Export\n\nplotly.py supports [static image export](https://plotly.com/python/static-image-export/),\nusing either the [`kaleido`](https://github.com/plotly/Kaleido)\npackage (recommended, supported as of `plotly` version 4.9) or the [orca](https://github.com/plotly/orca)\ncommand line utility (legacy as of `plotly` version 4.9).\n\n#### Kaleido\n\nThe [`kaleido`](https://github.com/plotly/Kaleido) package has no dependencies and can be installed\nusing pip...\n\n```\n$ pip install -U kaleido\n```\n\nor conda.\n\n```\n$ conda install -c conda-forge python-kaleido\n```\n\n#### Orca\n\nWhile Kaleido is now the recommended image export approach because it is easier to install\nand more widely compatible, [static image export](https://plotly.com/python/static-image-export/)\ncan also be supported\nby the legacy [orca](https://github.com/plotly/orca) command line utility and the\n [`psutil`](https://github.com/giampaolo/psutil) Python package.\n\nThese dependencies can both be installed using conda:\n\n```\nconda install -c plotly plotly-orca==1.3.1 psutil\n```\n\nOr, `psutil` can be installed using pip...\n\n```\npip install psutil\n```\n\nand orca can be installed according to the instructions in the [orca README](https://github.com/plotly/orca).\n\n\n### Extended Geo Support\n\nSome plotly.py features rely on fairly large geographic shape files. The county\nchoropleth figure factory is one such example. These shape files are distributed as a\nseparate `plotly-geo` package. This package can be installed using pip...\n\n```\npip install plotly-geo==1.0.0\n```\n\nor conda\n\n```\nconda install -c plotly plotly-geo=1.0.0\n```\n\n### Chart Studio support\n\nThe `chart-studio` package can be used to upload plotly figures to Plotly's Chart\nStudio Cloud or On-Prem service. This package can be installed using pip...\n\n```\npip install chart-studio==1.1.0\n```\n\nor conda\n\n```\nconda install -c plotly chart-studio=1.1.0\n```\n\n## Migration\n\nIf you're migrating from plotly.py v3 to v4, please check out the [Version 4 migration guide](https://plot.ly/python/next/v4-migration/)\n\nIf you're migrating from plotly.py v2 to v3, please check out the [Version 3 migration guide](migration-guide.md)\n\n## Copyright and Licenses\n\nCode and documentation copyright 2019 Plotly, Inc.\n\nCode released under the [MIT license](packages/python/chart-studio/LICENSE.txt).\n\nDocs released under the [Creative Commons license](https://github.com/plotly/documentation/blob/source/LICENSE).\n\n\n",
          "name": "plotly",
          "author": [
            {
              "type": "Person",
              "name": "Chris P",
              "email": [
                "chris@plot.ly"
              ],
              "familyName": [
                "P"
              ],
              "givenName": [
                "Chris"
              ]
            }
          ],
          "license": "MIT",
          "codeRepository": "https://pypi.org/project/plotly/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python",
          "applicationCategory": [
            "Scientific/Engineering"
          ],
          "applicationSubCategory": [
            "Visualization"
          ]
        },
        {
          "type": "SoftwarePackage",
          "description": "====================================================\npluggy - A minimalist production ready plugin system\n====================================================\n\n|pypi| |conda-forge| |versions| |travis| |appveyor| |gitter| |black| |codecov|\n\nThis is the core framework used by the `pytest`_, `tox`_, and `devpi`_ projects.\n\nPlease `read the docs`_ to learn more!\n\nA definitive example\n====================\n.. code-block:: python\n\n    import pluggy\n\n    hookspec = pluggy.HookspecMarker(\"myproject\")\n    hookimpl = pluggy.HookimplMarker(\"myproject\")\n\n\n    class MySpec(object):\n        \"\"\"A hook specification namespace.\n        \"\"\"\n\n        @hookspec\n        def myhook(self, arg1, arg2):\n            \"\"\"My special little hook that you can customize.\n            \"\"\"\n\n\n    class Plugin_1(object):\n        \"\"\"A hook implementation namespace.\n        \"\"\"\n\n        @hookimpl\n        def myhook(self, arg1, arg2):\n            print(\"inside Plugin_1.myhook()\")\n            return arg1 + arg2\n\n\n    class Plugin_2(object):\n        \"\"\"A 2nd hook implementation namespace.\n        \"\"\"\n\n        @hookimpl\n        def myhook(self, arg1, arg2):\n            print(\"inside Plugin_2.myhook()\")\n            return arg1 - arg2\n\n\n    # create a manager and add the spec\n    pm = pluggy.PluginManager(\"myproject\")\n    pm.add_hookspecs(MySpec)\n\n    # register plugins\n    pm.register(Plugin_1())\n    pm.register(Plugin_2())\n\n    # call our ``myhook`` hook\n    results = pm.hook.myhook(arg1=1, arg2=2)\n    print(results)\n\n\nRunning this directly gets us::\n\n    $ python docs/examples/toy-example.py\n    inside Plugin_2.myhook()\n    inside Plugin_1.myhook()\n    [-1, 3]\n\n\n.. badges\n\n.. |pypi| image:: https://img.shields.io/pypi/v/pluggy.svg\n    :target: https://pypi.org/pypi/pluggy\n\n.. |versions| image:: https://img.shields.io/pypi/pyversions/pluggy.svg\n    :target: https://pypi.org/pypi/pluggy\n\n.. |travis| image:: https://img.shields.io/travis/pytest-dev/pluggy/master.svg\n    :target: https://travis-ci.org/pytest-dev/pluggy\n\n.. |appveyor| image:: https://img.shields.io/appveyor/ci/pytestbot/pluggy/master.svg\n    :target: https://ci.appveyor.com/project/pytestbot/pluggy\n\n.. |conda-forge| image:: https://img.shields.io/conda/vn/conda-forge/pluggy.svg\n    :target: https://anaconda.org/conda-forge/pytest\n\n.. |gitter| image:: https://badges.gitter.im/pytest-dev/pluggy.svg\n    :alt: Join the chat at https://gitter.im/pytest-dev/pluggy\n    :target: https://gitter.im/pytest-dev/pluggy?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge\n\n.. |black| image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/ambv/black\n\n.. |codecov| image:: https://codecov.io/gh/pytest-dev/pluggy/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/pytest-dev/pluggy\n    :alt: Code coverage Status\n\n.. links\n.. _pytest:\n    http://pytest.org\n.. _tox:\n    https://tox.readthedocs.org\n.. _devpi:\n    http://doc.devpi.net\n.. _read the docs:\n   https://pluggy.readthedocs.io/en/latest/\n\n\n=========\nChangelog\n=========\n\n.. towncrier release notes start\n\npluggy 0.13.1 (2019-11-21)\n==========================\n\nTrivial/Internal Changes\n------------------------\n\n- `#236 <https://github.com/pytest-dev/pluggy/pull/236>`_: Improved documentation, especially with regard to references.\n\n\npluggy 0.13.0 (2019-09-10)\n==========================\n\nTrivial/Internal Changes\n------------------------\n\n- `#222 <https://github.com/pytest-dev/pluggy/issues/222>`_: Replace ``importlib_metadata`` backport with ``importlib.metadata`` from the\n  standard library on Python 3.8+.\n\n\npluggy 0.12.0 (2019-05-27)\n==========================\n\nFeatures\n--------\n\n- `#215 <https://github.com/pytest-dev/pluggy/issues/215>`_: Switch from ``pkg_resources`` to ``importlib-metadata`` for entrypoint detection for improved performance and import time.  This time with ``.egg`` support.\n\n\npluggy 0.11.0 (2019-05-07)\n==========================\n\nBug Fixes\n---------\n\n- `#205 <https://github.com/pytest-dev/pluggy/issues/205>`_: Revert changes made in 0.10.0 release breaking ``.egg`` installs.\n\n\npluggy 0.10.0 (2019-05-07)\n==========================\n\nFeatures\n--------\n\n- `#199 <https://github.com/pytest-dev/pluggy/issues/199>`_: Switch from ``pkg_resources`` to ``importlib-metadata`` for entrypoint detection for improved performance and import time.\n\n\npluggy 0.9.0 (2019-02-21)\n=========================\n\nFeatures\n--------\n\n- `#189 <https://github.com/pytest-dev/pluggy/issues/189>`_: ``PluginManager.load_setuptools_entrypoints`` now accepts a ``name`` parameter that when given will\n  load only entry points with that name.\n\n  ``PluginManager.load_setuptools_entrypoints`` also now returns the number of plugins loaded by the\n  call, as opposed to the number of all plugins loaded by all calls to this method.\n\n\n\nBug Fixes\n---------\n\n- `#187 <https://github.com/pytest-dev/pluggy/issues/187>`_: Fix internal ``varnames`` function for PyPy3.\n\n\npluggy 0.8.1 (2018-11-09)\n=========================\n\nTrivial/Internal Changes\n------------------------\n\n- `#166 <https://github.com/pytest-dev/pluggy/issues/166>`_: Add ``stacklevel=2`` to implprefix warning so that the reported location of warning is the caller of PluginManager.\n\n\npluggy 0.8.0 (2018-10-15)\n=========================\n\nFeatures\n--------\n\n- `#177 <https://github.com/pytest-dev/pluggy/issues/177>`_: Add ``get_hookimpls()`` method to hook callers.\n\n\n\nTrivial/Internal Changes\n------------------------\n\n- `#165 <https://github.com/pytest-dev/pluggy/issues/165>`_: Add changelog in long package description and documentation.\n\n\n- `#172 <https://github.com/pytest-dev/pluggy/issues/172>`_: Add a test exemplifying the opt-in nature of spec defined args.\n\n\n- `#57 <https://github.com/pytest-dev/pluggy/issues/57>`_: Encapsulate hook specifications in a type for easier introspection.\n\n\npluggy 0.7.1 (2018-07-28)\n=========================\n\nDeprecations and Removals\n-------------------------\n\n- `#116 <https://github.com/pytest-dev/pluggy/issues/116>`_: Deprecate the ``implprefix`` kwarg to ``PluginManager`` and instead\n  expect users to start using explicit ``HookimplMarker`` everywhere.\n\n\n\nFeatures\n--------\n\n- `#122 <https://github.com/pytest-dev/pluggy/issues/122>`_: Add ``.plugin`` member to ``PluginValidationError`` to access failing plugin during post-mortem.\n\n\n- `#138 <https://github.com/pytest-dev/pluggy/issues/138>`_: Add per implementation warnings support for hookspecs allowing for both\n  deprecation and future warnings of legacy and (future) experimental hooks\n  respectively.\n\n\n\nBug Fixes\n---------\n\n- `#110 <https://github.com/pytest-dev/pluggy/issues/110>`_: Fix a bug where ``_HookCaller.call_historic()`` would call the ``proc``\n  arg even when the default is ``None`` resulting in a ``TypeError``.\n\n- `#160 <https://github.com/pytest-dev/pluggy/issues/160>`_: Fix problem when handling ``VersionConflict`` errors when loading setuptools plugins.\n\n\n\nImproved Documentation\n----------------------\n\n- `#123 <https://github.com/pytest-dev/pluggy/issues/123>`_: Document how exceptions are handled and how the hook call loop\n  terminates immediately on the first error which is then delivered\n  to any surrounding wrappers.\n\n\n- `#136 <https://github.com/pytest-dev/pluggy/issues/136>`_: Docs rework including a much better introduction and comprehensive example\n  set for new users. A big thanks goes out to @obestwalter for the great work!\n\n\n\nTrivial/Internal Changes\n------------------------\n\n- `#117 <https://github.com/pytest-dev/pluggy/issues/117>`_: Break up the main monolithic package modules into separate modules by concern\n\n\n- `#131 <https://github.com/pytest-dev/pluggy/issues/131>`_: Automate ``setuptools`` wheels building and PyPi upload using TravisCI.\n\n\n- `#153 <https://github.com/pytest-dev/pluggy/issues/153>`_: Reorganize tests more appropriately by modules relating to each\n  internal component/feature. This is in an effort to avoid (future)\n  duplication and better separation of concerns in the test set.\n\n\n- `#156 <https://github.com/pytest-dev/pluggy/issues/156>`_: Add ``HookImpl.__repr__()`` for better debugging.\n\n\n- `#66 <https://github.com/pytest-dev/pluggy/issues/66>`_: Start using ``towncrier`` and a custom ``tox`` environment to prepare releases!\n\n\npluggy 0.7.0 (Unreleased)\n=========================\n\n* `#160 <https://github.com/pytest-dev/pluggy/issues/160>`_: We discovered a deployment issue so this version was never released to PyPI, only the tag exists.\n\npluggy 0.6.0 (2017-11-24)\n=========================\n\n- Add CI testing for the features, release, and master\n  branches of ``pytest`` (PR `#79`_).\n- Document public API for ``_Result`` objects passed to wrappers\n  (PR `#85`_).\n- Document and test hook LIFO ordering (PR `#85`_).\n- Turn warnings into errors in test suite (PR `#89`_).\n- Deprecate ``_Result.result`` (PR `#88`_).\n- Convert ``_Multicall`` to a simple function distinguishing it from\n  the legacy version (PR `#90`_).\n- Resolve E741 errors (PR `#96`_).\n- Test and bug fix for unmarked hook collection (PRs `#97`_ and\n  `#102`_).\n- Drop support for EOL Python 2.6 and 3.3 (PR `#103`_).\n- Fix ``inspect`` based arg introspection on py3.6 (PR `#94`_).\n\n.. _#79: https://github.com/pytest-dev/pluggy/pull/79\n.. _#85: https://github.com/pytest-dev/pluggy/pull/85\n.. _#88: https://github.com/pytest-dev/pluggy/pull/88\n.. _#89: https://github.com/pytest-dev/pluggy/pull/89\n.. _#90: https://github.com/pytest-dev/pluggy/pull/90\n.. _#94: https://github.com/pytest-dev/pluggy/pull/94\n.. _#96: https://github.com/pytest-dev/pluggy/pull/96\n.. _#97: https://github.com/pytest-dev/pluggy/pull/97\n.. _#102: https://github.com/pytest-dev/pluggy/pull/102\n.. _#103: https://github.com/pytest-dev/pluggy/pull/103\n\n\npluggy 0.5.2 (2017-09-06)\n=========================\n\n- fix bug where ``firstresult`` wrappers were being sent an incorrectly configured\n  ``_Result`` (a list was set instead of a single value). Add tests to check for\n  this as well as ``_Result.force_result()`` behaviour. Thanks to `@tgoodlet`_\n  for the PR `#72`_.\n\n- fix incorrect ``getattr``  of ``DeprecationWarning`` from the ``warnings``\n  module. Thanks to `@nicoddemus`_ for the PR `#77`_.\n\n- hide ``pytest`` tracebacks in certain core routines. Thanks to\n  `@nicoddemus`_ for the PR `#80`_.\n\n.. _#72: https://github.com/pytest-dev/pluggy/pull/72\n.. _#77: https://github.com/pytest-dev/pluggy/pull/77\n.. _#80: https://github.com/pytest-dev/pluggy/pull/80\n\n\npluggy 0.5.1 (2017-08-29)\n=========================\n\n- fix a bug and add tests for case where ``firstresult`` hooks return\n  ``None`` results. Thanks to `@RonnyPfannschmidt`_ and `@tgoodlet`_\n  for the issue (`#68`_) and PR (`#69`_) respectively.\n\n.. _#69: https://github.com/pytest-dev/pluggy/pull/69\n.. _#68: https://github.com/pytest-dev/pluggy/issues/68\n\n\npluggy 0.5.0 (2017-08-28)\n=========================\n\n- fix bug where callbacks for historic hooks would not be called for\n  already registered plugins.  Thanks `@vodik`_ for the PR\n  and `@hpk42`_ for further fixes.\n\n- fix `#17`_ by considering only actual functions for hooks\n  this removes the ability to register arbitrary callable objects\n  which at first glance is a reasonable simplification,\n  thanks `@RonnyPfannschmidt`_ for report and pr.\n\n- fix `#19`_: allow registering hookspecs from instances.  The PR from\n  `@tgoodlet`_ also modernized the varnames implementation.\n\n- resolve `#32`_: split up the test set into multiple modules.\n  Thanks to `@RonnyPfannschmidt`_ for the PR and `@tgoodlet`_ for\n  the initial request.\n\n- resolve `#14`_: add full sphinx docs. Thanks to `@tgoodlet`_ for\n  PR `#39`_.\n\n- add hook call mismatch warnings. Thanks to `@tgoodlet`_ for the\n  PR `#42`_.\n\n- resolve `#44`_: move to new-style classes. Thanks to `@MichalTHEDUDE`_\n  for PR `#46`_.\n\n- add baseline benchmarking/speed tests using ``pytest-benchmark``\n  in PR `#54`_.  Thanks to `@tgoodlet`_.\n\n- update the README to showcase the API. Thanks to `@tgoodlet`_ for the\n  issue and PR `#55`_.\n\n- deprecate ``__multicall__`` and add a faster call loop implementation.\n  Thanks to `@tgoodlet`_ for PR `#58`_.\n\n- raise a comprehensible error when a ``hookimpl`` is called with positional\n  args. Thanks to `@RonnyPfannschmidt`_ for the issue and `@tgoodlet`_ for\n  PR `#60`_.\n\n- fix the ``firstresult`` test making it more complete\n  and remove a duplicate of that test. Thanks to `@tgoodlet`_\n  for PR `#62`_.\n\n.. _#62: https://github.com/pytest-dev/pluggy/pull/62\n.. _#60: https://github.com/pytest-dev/pluggy/pull/60\n.. _#58: https://github.com/pytest-dev/pluggy/pull/58\n.. _#55: https://github.com/pytest-dev/pluggy/pull/55\n.. _#54: https://github.com/pytest-dev/pluggy/pull/54\n.. _#46: https://github.com/pytest-dev/pluggy/pull/46\n.. _#44: https://github.com/pytest-dev/pluggy/issues/44\n.. _#42: https://github.com/pytest-dev/pluggy/pull/42\n.. _#39: https://github.com/pytest-dev/pluggy/pull/39\n.. _#32: https://github.com/pytest-dev/pluggy/pull/32\n.. _#19: https://github.com/pytest-dev/pluggy/issues/19\n.. _#17: https://github.com/pytest-dev/pluggy/issues/17\n.. _#14: https://github.com/pytest-dev/pluggy/issues/14\n\n\npluggy 0.4.0 (2016-09-25)\n=========================\n\n- add ``has_plugin(name)`` method to pluginmanager.  thanks `@nicoddemus`_.\n\n- fix `#11`_: make plugin parsing more resilient against exceptions\n  from ``__getattr__`` functions. Thanks `@nicoddemus`_.\n\n- fix issue `#4`_: specific ``HookCallError`` exception for when a hook call\n  provides not enough arguments.\n\n- better error message when loading setuptools entrypoints fails\n  due to a ``VersionConflict``.  Thanks `@blueyed`_.\n\n.. _#11: https://github.com/pytest-dev/pluggy/issues/11\n.. _#4: https://github.com/pytest-dev/pluggy/issues/4\n\n\npluggy 0.3.1 (2015-09-17)\n=========================\n\n- avoid using deprecated-in-python3.5 getargspec method. Thanks\n  `@mdboom`_.\n\n\npluggy 0.3.0 (2015-05-07)\n=========================\n\ninitial release\n\n.. contributors\n.. _@hpk42: https://github.com/hpk42\n.. _@tgoodlet: https://github.com/goodboy\n.. _@MichalTHEDUDE: https://github.com/MichalTHEDUDE\n.. _@vodik: https://github.com/vodik\n.. _@RonnyPfannschmidt: https://github.com/RonnyPfannschmidt\n.. _@blueyed: https://github.com/blueyed\n.. _@nicoddemus: https://github.com/nicoddemus\n.. _@mdboom: https://github.com/mdboom\n\n\n",
          "name": "pluggy",
          "author": [
            {
              "type": "Person",
              "name": "Holger Krekel",
              "email": [
                "holger@merlinux.eu"
              ],
              "familyName": [
                "Krekel"
              ],
              "givenName": [
                "Holger"
              ]
            }
          ],
          "license": "MIT license",
          "version": "==0.13.1",
          "codeRepository": "https://pypi.org/project/pluggy/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python",
          "applicationCategory": [
            "Software Development",
            "Utilities"
          ],
          "applicationSubCategory": [
            "Libraries",
            "Testing"
          ],
          "operatingSystem": [
            {
              "type": "OperatingSystem",
              "name": "macOS"
            },
            {
              "type": "OperatingSystem",
              "name": "Windows"
            }
          ]
        },
        {
          "type": "SoftwarePackage",
          "description": "# Prometheus Python Client\n\nThe official Python 2 and 3 client for [Prometheus](http://prometheus.io).\n\n## Three Step Demo\n\n**One**: Install the client:\n```\npip install prometheus-client\n```\n\n**Two**: Paste the following into a Python interpreter:\n```python\nfrom prometheus_client import start_http_server, Summary\nimport random\nimport time\n\n# Create a metric to track time spent and requests made.\nREQUEST_TIME = Summary('request_processing_seconds', 'Time spent processing request')\n\n# Decorate function with metric.\n@REQUEST_TIME.time()\ndef process_request(t):\n    \"\"\"A dummy function that takes some time.\"\"\"\n    time.sleep(t)\n\nif __name__ == '__main__':\n    # Start up the server to expose the metrics.\n    start_http_server(8000)\n    # Generate some requests.\n    while True:\n        process_request(random.random())\n```\n\n**Three**: Visit [http://localhost:8000/](http://localhost:8000/) to view the metrics.\n\nFrom one easy to use decorator you get:\n  * `request_processing_seconds_count`: Number of times this function was called.\n  * `request_processing_seconds_sum`: Total amount of time spent in this function.\n\nPrometheus's `rate` function allows calculation of both requests per second,\nand latency over time from this data.\n\nIn addition if you're on Linux the `process` metrics expose CPU, memory and\nother information about the process for free!\n\n## Installation\n\n```\npip install prometheus_client\n```\n\nThis package can be found on\n[PyPI](https://pypi.python.org/pypi/prometheus_client).\n\n## Instrumenting\n\nFour types of metric are offered: Counter, Gauge, Summary and Histogram.\nSee the documentation on [metric types](http://prometheus.io/docs/concepts/metric_types/)\nand [instrumentation best practices](https://prometheus.io/docs/practices/instrumentation/#counter-vs-gauge-summary-vs-histogram)\non how to use them.\n\n### Counter\n\nCounters go up, and reset when the process restarts.\n\n\n```python\nfrom prometheus_client import Counter\nc = Counter('my_failures', 'Description of counter')\nc.inc()     # Increment by 1\nc.inc(1.6)  # Increment by given value\n```\n\nIf there is a suffix of `_total` on the metric name, it will be removed. When\nexposing the time series for counter, a `_total` suffix will be added. This is\nfor compatibility between OpenMetrics and the Prometheus text format, as OpenMetrics\nrequires the `_total` suffix.\n\nThere are utilities to count exceptions raised:\n\n```python\n@c.count_exceptions()\ndef f():\n  pass\n\nwith c.count_exceptions():\n  pass\n\n# Count only one type of exception\nwith c.count_exceptions(ValueError):\n  pass\n```\n\n### Gauge\n\nGauges can go up and down.\n\n```python\nfrom prometheus_client import Gauge\ng = Gauge('my_inprogress_requests', 'Description of gauge')\ng.inc()      # Increment by 1\ng.dec(10)    # Decrement by given value\ng.set(4.2)   # Set to a given value\n```\n\nThere are utilities for common use cases:\n\n```python\ng.set_to_current_time()   # Set to current unixtime\n\n# Increment when entered, decrement when exited.\n@g.track_inprogress()\ndef f():\n  pass\n\nwith g.track_inprogress():\n  pass\n```\n\nA Gauge can also take its value from a callback:\n\n```python\nd = Gauge('data_objects', 'Number of objects')\nmy_dict = {}\nd.set_function(lambda: len(my_dict))\n```\n\n### Summary\n\nSummaries track the size and number of events.\n\n```python\nfrom prometheus_client import Summary\ns = Summary('request_latency_seconds', 'Description of summary')\ns.observe(4.7)    # Observe 4.7 (seconds in this case)\n```\n\nThere are utilities for timing code:\n\n```python\n@s.time()\ndef f():\n  pass\n\nwith s.time():\n  pass\n```\n\nThe Python client doesn't store or expose quantile information at this time.\n\n### Histogram\n\nHistograms track the size and number of events in buckets.\nThis allows for aggregatable calculation of quantiles.\n\n```python\nfrom prometheus_client import Histogram\nh = Histogram('request_latency_seconds', 'Description of histogram')\nh.observe(4.7)    # Observe 4.7 (seconds in this case)\n```\n\nThe default buckets are intended to cover a typical web/rpc request from milliseconds to seconds.\nThey can be overridden by passing `buckets` keyword argument to `Histogram`.\n\nThere are utilities for timing code:\n\n```python\n@h.time()\ndef f():\n  pass\n\nwith h.time():\n  pass\n```\n\n### Info\n\nInfo tracks key-value information, usually about a whole target.\n\n```python\nfrom prometheus_client import Info\ni = Info('my_build_version', 'Description of info')\ni.info({'version': '1.2.3', 'buildhost': 'foo@bar'})\n```\n\n### Enum\n\nEnum tracks which of a set of states something is currently in.\n\n```python\nfrom prometheus_client import Enum\ne = Enum('my_task_state', 'Description of enum',\n        states=['starting', 'running', 'stopped'])\ne.state('running')\n```\n\n### Labels\n\nAll metrics can have labels, allowing grouping of related time series.\n\nSee the best practices on [naming](http://prometheus.io/docs/practices/naming/)\nand [labels](http://prometheus.io/docs/practices/instrumentation/#use-labels).\n\nTaking a counter as an example:\n\n```python\nfrom prometheus_client import Counter\nc = Counter('my_requests_total', 'HTTP Failures', ['method', 'endpoint'])\nc.labels('get', '/').inc()\nc.labels('post', '/submit').inc()\n```\n\nLabels can also be passed as keyword-arguments:\n\n```python\nfrom prometheus_client import Counter\nc = Counter('my_requests_total', 'HTTP Failures', ['method', 'endpoint'])\nc.labels(method='get', endpoint='/').inc()\nc.labels(method='post', endpoint='/submit').inc()\n```\n\nMetrics with labels are not initialized when declared, because the client can't\nknow what values the label can have. It is recommended to initialize the label\nvalues by calling the `.labels()` method alone:\n\n```python\nfrom prometheus_client import Counter\nc = Counter('my_requests_total', 'HTTP Failures', ['method', 'endpoint'])\nc.labels('get', '/')\nc.labels('post', '/submit')\n```\n\n### Process Collector\n\nThe Python client automatically exports metrics about process CPU usage, RAM,\nfile descriptors and start time. These all have the prefix `process`, and\nare only currently available on Linux.\n\nThe namespace and pid constructor arguments allows for exporting metrics about\nother processes, for example:\n```\nProcessCollector(namespace='mydaemon', pid=lambda: open('/var/run/daemon.pid').read())\n```\n\n### Platform Collector\n\nThe client also automatically exports some metadata about Python. If using Jython,\nmetadata about the JVM in use is also included. This information is available as \nlabels on the `python_info` metric. The value of the metric is 1, since it is the \nlabels that carry information.\n\n## Exporting\n\nThere are several options for exporting metrics.\n\n### HTTP\n\nMetrics are usually exposed over HTTP, to be read by the Prometheus server.\n\nThe easiest way to do this is via `start_http_server`, which will start a HTTP\nserver in a daemon thread on the given port:\n\n```python\nfrom prometheus_client import start_http_server\n\nstart_http_server(8000)\n```\n\nVisit [http://localhost:8000/](http://localhost:8000/) to view the metrics.\n\nTo add Prometheus exposition to an existing HTTP server, see the `MetricsHandler` class\nwhich provides a `BaseHTTPRequestHandler`. It also serves as a simple example of how\nto write a custom endpoint.\n\n#### Twisted\n\nTo use prometheus with [twisted](https://twistedmatrix.com/), there is `MetricsResource` which exposes metrics as a twisted resource.\n\n```python\nfrom prometheus_client.twisted import MetricsResource\nfrom twisted.web.server import Site\nfrom twisted.web.resource import Resource\nfrom twisted.internet import reactor\n\nroot = Resource()\nroot.putChild(b'metrics', MetricsResource())\n\nfactory = Site(root)\nreactor.listenTCP(8000, factory)\nreactor.run()\n```\n\n#### WSGI\n\nTo use Prometheus with [WSGI](http://wsgi.readthedocs.org/en/latest/), there is\n`make_wsgi_app` which creates a WSGI application.\n\n```python\nfrom prometheus_client import make_wsgi_app\nfrom wsgiref.simple_server import make_server\n\napp = make_wsgi_app()\nhttpd = make_server('', 8000, app)\nhttpd.serve_forever()\n```\n\nSuch an application can be useful when integrating Prometheus metrics with WSGI\napps.\n\nThe method `start_wsgi_server` can be used to serve the metrics through the\nWSGI reference implementation in a new thread.\n\n```python\nfrom prometheus_client import start_wsgi_server\n\nstart_wsgi_server(8000)\n```\n\n#### ASGI\n\nTo use Prometheus with [ASGI](http://asgi.readthedocs.org/en/latest/), there is\n`make_asgi_app` which creates an ASGI application.\n\n```python\nfrom prometheus_client import make_asgi_app\n\napp = make_asgi_app()\n```\nSuch an application can be useful when integrating Prometheus metrics with ASGI\napps.\n\n#### Flask\n\nTo use Prometheus with [Flask](http://flask.pocoo.org/) we need to serve metrics through a Prometheus WSGI application. This can be achieved using [Flask's application dispatching](http://flask.pocoo.org/docs/latest/patterns/appdispatch/). Below is a working example.\n\nSave the snippet below in a `myapp.py` file\n\n```python\nfrom flask import Flask\nfrom werkzeug.middleware.dispatcher import DispatcherMiddleware\nfrom prometheus_client import make_wsgi_app\n\n# Create my app\napp = Flask(__name__)\n\n# Add prometheus wsgi middleware to route /metrics requests\napp.wsgi_app = DispatcherMiddleware(app.wsgi_app, {\n    '/metrics': make_wsgi_app()\n})\n```\n\nRun the example web application like this\n\n```bash\n# Install uwsgi if you do not have it\npip install uwsgi\nuwsgi --http 127.0.0.1:8000 --wsgi-file myapp.py --callable app\n```\n\nVisit http://localhost:8000/metrics to see the metrics\n\n### Node exporter textfile collector\n\nThe [textfile collector](https://github.com/prometheus/node_exporter#textfile-collector)\nallows machine-level statistics to be exported out via the Node exporter.\n\nThis is useful for monitoring cronjobs, or for writing cronjobs to expose metrics\nabout a machine system that the Node exporter does not support or would not make sense\nto perform at every scrape (for example, anything involving subprocesses).\n\n```python\nfrom prometheus_client import CollectorRegistry, Gauge, write_to_textfile\n\nregistry = CollectorRegistry()\ng = Gauge('raid_status', '1 if raid array is okay', registry=registry)\ng.set(1)\nwrite_to_textfile('/configured/textfile/path/raid.prom', registry)\n```\n\nA separate registry is used, as the default registry may contain other metrics\nsuch as those from the Process Collector.\n\n## Exporting to a Pushgateway\n\nThe [Pushgateway](https://github.com/prometheus/pushgateway)\nallows ephemeral and batch jobs to expose their metrics to Prometheus.\n\n```python\nfrom prometheus_client import CollectorRegistry, Gauge, push_to_gateway\n\nregistry = CollectorRegistry()\ng = Gauge('job_last_success_unixtime', 'Last time a batch job successfully finished', registry=registry)\ng.set_to_current_time()\npush_to_gateway('localhost:9091', job='batchA', registry=registry)\n```\n\nA separate registry is used, as the default registry may contain other metrics\nsuch as those from the Process Collector.\n\nPushgateway functions take a grouping key. `push_to_gateway` replaces metrics\nwith the same grouping key, `pushadd_to_gateway` only replaces metrics with the\nsame name and grouping key and `delete_from_gateway` deletes metrics with the\ngiven job and grouping key. See the\n[Pushgateway documentation](https://github.com/prometheus/pushgateway/blob/master/README.md)\nfor more information.\n\n`instance_ip_grouping_key` returns a grouping key with the instance label set\nto the host's IP address.\n\n### Handlers for authentication\n\nIf the push gateway you are connecting to is protected with HTTP Basic Auth,\nyou can use a special handler to set the Authorization header.\n\n```python\nfrom prometheus_client import CollectorRegistry, Gauge, push_to_gateway\nfrom prometheus_client.exposition import basic_auth_handler\n\ndef my_auth_handler(url, method, timeout, headers, data):\n    username = 'foobar'\n    password = 'secret123'\n    return basic_auth_handler(url, method, timeout, headers, data, username, password)\nregistry = CollectorRegistry()\ng = Gauge('job_last_success_unixtime', 'Last time a batch job successfully finished', registry=registry)\ng.set_to_current_time()\npush_to_gateway('localhost:9091', job='batchA', registry=registry, handler=my_auth_handler)\n```\n\n## Bridges\n\nIt is also possible to expose metrics to systems other than Prometheus.\nThis allows you to take advantage of Prometheus instrumentation even\nif you are not quite ready to fully transition to Prometheus yet.\n\n### Graphite\n\nMetrics are pushed over TCP in the Graphite plaintext format.\n\n```python\nfrom prometheus_client.bridge.graphite import GraphiteBridge\n\ngb = GraphiteBridge(('graphite.your.org', 2003))\n# Push once.\ngb.push()\n# Push every 10 seconds in a daemon thread.\ngb.start(10.0)\n```\n\nGraphite [tags](https://grafana.com/blog/2018/01/11/graphite-1.1-teaching-an-old-dog-new-tricks/) are also supported.\n\n```python\nfrom prometheus_client.bridge.graphite import GraphiteBridge\n\ngb = GraphiteBridge(('graphite.your.org', 2003), tags=True)\nc = Counter('my_requests_total', 'HTTP Failures', ['method', 'endpoint'])\nc.labels('get', '/').inc()\ngb.push()\n```\n\n## Custom Collectors\n\nSometimes it is not possible to directly instrument code, as it is not\nin your control. This requires you to proxy metrics from other systems.\n\nTo do so you need to create a custom collector, for example:\n\n```python\nfrom prometheus_client.core import GaugeMetricFamily, CounterMetricFamily, REGISTRY\n\nclass CustomCollector(object):\n    def collect(self):\n        yield GaugeMetricFamily('my_gauge', 'Help text', value=7)\n        c = CounterMetricFamily('my_counter_total', 'Help text', labels=['foo'])\n        c.add_metric(['bar'], 1.7)\n        c.add_metric(['baz'], 3.8)\n        yield c\n\nREGISTRY.register(CustomCollector())\n```\n\n`SummaryMetricFamily`, `HistogramMetricFamily` and `InfoMetricFamily` work similarly.\n\nA collector may implement a `describe` method which returns metrics in the same\nformat as `collect` (though you don't have to include the samples). This is\nused to predetermine the names of time series a `CollectorRegistry` exposes and\nthus to detect collisions and duplicate registrations.\n\nUsually custom collectors do not have to implement `describe`. If `describe` is\nnot implemented and the CollectorRegistry was created with `auto_describe=True`\n(which is the case for the default registry) then `collect` will be called at\nregistration time instead of `describe`. If this could cause problems, either\nimplement a proper `describe`, or if that's not practical have `describe`\nreturn an empty list.\n\n\n## Multiprocess Mode (E.g. Gunicorn)\n\nPrometheus client libraries presume a threaded model, where metrics are shared\nacross workers. This doesn't work so well for languages such as Python where\nit's common to have processes rather than threads to handle large workloads.\n\nTo handle this the client library can be put in multiprocess mode.\nThis comes with a number of limitations:\n\n- Registries can not be used as normal, all instantiated metrics are exported\n  - Registering metrics to a registry later used by a `MultiProcessCollector`\n    may cause duplicate metrics to be exported\n- Custom collectors do not work (e.g. cpu and memory metrics)\n- Info and Enum metrics do not work\n- The pushgateway cannot be used\n- Gauges cannot use the `pid` label\n\nThere's several steps to getting this working:\n\n**1. Deployment**:\n\nThe `PROMETHEUS_MULTIPROC_DIR` environment variable must be set to a directory\nthat the client library can use for metrics. This directory must be wiped\nbetween process/Gunicorn runs (before startup is recommended).\n\nThis environment variable should be set from a start-up shell script,\nand not directly from Python (otherwise it may not propagate to child processes).\n\n**2. Metrics collector**:\n\nThe application must initialize a new `CollectorRegistry`, and store the\nmulti-process collector inside. It is a best practice to create this registry\ninside the context of a request to avoid metrics registering themselves to a\ncollector used by a `MultiProcessCollector`. If a registry with metrics\nregistered is used by a `MultiProcessCollector` duplicate metrics may be\nexported, one for multiprocess, and one for the process serving the request.\n\n```python\nfrom prometheus_client import multiprocess\nfrom prometheus_client import generate_latest, CollectorRegistry, CONTENT_TYPE_LATEST, Counter\n\nMY_COUNTER = Counter('my_counter', 'Description of my counter')\n\n# Expose metrics.\ndef app(environ, start_response):\n    registry = CollectorRegistry()\n    multiprocess.MultiProcessCollector(registry)\n    data = generate_latest(registry)\n    status = '200 OK'\n    response_headers = [\n        ('Content-type', CONTENT_TYPE_LATEST),\n        ('Content-Length', str(len(data)))\n    ]\n    start_response(status, response_headers)\n    return iter([data])\n```\n\n**3. Gunicorn configuration**:\n\nThe `gunicorn` configuration file needs to include the following function:\n\n```python\nfrom prometheus_client import multiprocess\n\ndef child_exit(server, worker):\n    multiprocess.mark_process_dead(worker.pid)\n```\n\n**4. Metrics tuning (Gauge)**:\n\nWhen `Gauge` metrics are used, additional tuning needs to be performed.\nGauges have several modes they can run in, which can be selected with the `multiprocess_mode` parameter.\n\n- 'all': Default. Return a timeseries per process alive or dead.\n- 'liveall': Return a timeseries per process that is still alive.\n- 'livesum': Return a single timeseries that is the sum of the values of alive processes.\n- 'max': Return a single timeseries that is the maximum of the values of all processes, alive or dead.\n- 'min': Return a single timeseries that is the minimum of the values of all processes, alive or dead.\n\n```python\nfrom prometheus_client import Gauge\n\n# Example gauge\nIN_PROGRESS = Gauge(\"inprogress_requests\", \"help\", multiprocess_mode='livesum')\n```\n\n\n## Parser\n\nThe Python client supports parsing the Prometheus text format.\nThis is intended for advanced use cases where you have servers\nexposing Prometheus metrics and need to get them into some other\nsystem.\n\n```python\nfrom prometheus_client.parser import text_string_to_metric_families\nfor family in text_string_to_metric_families(u\"my_gauge 1.0\\n\"):\n  for sample in family.samples:\n    print(\"Name: {0} Labels: {1} Value: {2}\".format(*sample))\n```\n\n## Links\n\n* [Releases](https://github.com/prometheus/client_python/releases): The releases page shows the history of the project and acts as a changelog.\n* [PyPI](https://pypi.python.org/pypi/prometheus_client)\n\n\n",
          "name": "prometheus-client",
          "author": [
            {
              "type": "Person",
              "name": "Brian Brazil",
              "email": [
                "brian.brazil@robustperception.io"
              ],
              "familyName": [
                "Brazil"
              ],
              "givenName": [
                "Brian"
              ]
            }
          ],
          "keywords": "prometheus monitoring instrumentation client",
          "license": "Apache Software License 2.0",
          "version": "==0.10.1",
          "codeRepository": "https://pypi.org/project/prometheus-client/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python",
          "applicationCategory": [
            "System"
          ],
          "applicationSubCategory": [
            "Monitoring"
          ]
        },
        {
          "type": "SoftwarePackage",
          "description": "Python Prompt Toolkit\n=====================\n\n|Build Status|  |AppVeyor|  |PyPI|  |RTD|  |License|  |Codecov|\n\n.. image :: https://github.com/prompt-toolkit/python-prompt-toolkit/raw/master/docs/images/logo_400px.png\n\n``prompt_toolkit`` *is a library for building powerful interactive command line applications in Python.*\n\nRead the `documentation on readthedocs\n<http://python-prompt-toolkit.readthedocs.io/en/stable/>`_.\n\nNOTICE: prompt_toolkit 3.0\n**************************\n\nPlease notice that this branch is the ``prompt_toolkit`` **3.0** branch. For most\nusers, it should be compatible with ``prompt_toolkit`` **2.0**, but it requires at\nleast **Python 3.6**. On the plus side, ``prompt_toolkit`` **3.0** is completely type\nannotated and uses asyncio natively.\n\n\nGallery\n*******\n\n`ptpython <http://github.com/prompt-toolkit/ptpython/>`_ is an interactive\nPython Shell, build on top of ``prompt_toolkit``.\n\n.. image :: https://github.com/prompt-toolkit/python-prompt-toolkit/raw/master/docs/images/ptpython.png\n\n`More examples <https://python-prompt-toolkit.readthedocs.io/en/stable/pages/gallery.html>`_\n\n\nprompt_toolkit features\n***********************\n\n``prompt_toolkit`` could be a replacement for `GNU readline\n<https://tiswww.case.edu/php/chet/readline/rltop.html>`_, but it can be much\nmore than that.\n\nSome features:\n\n- **Pure Python**.\n- Syntax highlighting of the input while typing. (For instance, with a Pygments lexer.)\n- Multi-line input editing.\n- Advanced code completion.\n- Both Emacs and Vi key bindings. (Similar to readline.)\n- Even some advanced Vi functionality, like named registers and digraphs.\n- Reverse and forward incremental search.\n- Works well with Unicode double width characters. (Chinese input.)\n- Selecting text for copy/paste. (Both Emacs and Vi style.)\n- Support for `bracketed paste <https://cirw.in/blog/bracketed-paste>`_.\n- Mouse support for cursor positioning and scrolling.\n- Auto suggestions. (Like `fish shell <http://fishshell.com/>`_.)\n- Multiple input buffers.\n- No global state.\n- Lightweight, the only dependencies are Pygments and wcwidth.\n- Runs on Linux, OS X, FreeBSD, OpenBSD and Windows systems.\n- And much more...\n\nFeel free to create tickets for bugs and feature requests, and create pull\nrequests if you have nice patches that you would like to share with others.\n\n\nInstallation\n************\n\n::\n\n    pip install prompt_toolkit\n\nFor Conda, do:\n\n::\n\n    conda install -c https://conda.anaconda.org/conda-forge prompt_toolkit\n\n\nAbout Windows support\n*********************\n\n``prompt_toolkit`` is cross platform, and everything that you build on top\nshould run fine on both Unix and Windows systems. Windows support is best on\nrecent Windows 10 builds, for which the command line window supports vt100\nescape sequences. (If not supported, we fall back to using Win32 APIs for color\nand cursor movements).\n\nIt's worth noting that the implementation is a \"best effort of what is\npossible\". Both Unix and Windows terminals have their limitations. But in\ngeneral, the Unix experience will still be a little better.\n\nFor Windows, it's recommended to use either `cmder\n<http://cmder.net/>`_ or `conemu <https://conemu.github.io/>`_.\n\nGetting started\n***************\n\nThe most simple example of the library would look like this:\n\n.. code:: python\n\n    from prompt_toolkit import prompt\n\n    if __name__ == '__main__':\n        answer = prompt('Give me some input: ')\n        print('You said: %s' % answer)\n\nFor more complex examples, have a look in the ``examples`` directory. All\nexamples are chosen to demonstrate only one thing. Also, don't be afraid to\nlook at the source code. The implementation of the ``prompt`` function could be\na good start.\n\nPhilosophy\n**********\n\nThe source code of ``prompt_toolkit`` should be **readable**, **concise** and\n**efficient**. We prefer short functions focusing each on one task and for which\nthe input and output types are clearly specified. We mostly prefer composition\nover inheritance, because inheritance can result in too much functionality in\nthe same object. We prefer immutable objects where possible (objects don't\nchange after initialization). Reusability is important. We absolutely refrain\nfrom having a changing global state, it should be possible to have multiple\nindependent instances of the same code in the same process. The architecture\nshould be layered: the lower levels operate on primitive operations and data\nstructures giving -- when correctly combined -- all the possible flexibility;\nwhile at the higher level, there should be a simpler API, ready-to-use and\nsufficient for most use cases. Thinking about algorithms and efficiency is\nimportant, but avoid premature optimization.\n\n\n`Projects using prompt_toolkit <PROJECTS.rst>`_\n***********************************************\n\nSpecial thanks to\n*****************\n\n- `Pygments <http://pygments.org/>`_: Syntax highlighter.\n- `wcwidth <https://github.com/jquast/wcwidth>`_: Determine columns needed for a wide characters.\n\n.. |Build Status| image:: https://api.travis-ci.org/prompt-toolkit/python-prompt-toolkit.svg?branch=master\n    :target: https://travis-ci.org/prompt-toolkit/python-prompt-toolkit#\n\n.. |PyPI| image:: https://img.shields.io/pypi/v/prompt_toolkit.svg\n    :target: https://pypi.python.org/pypi/prompt-toolkit/\n    :alt: Latest Version\n\n.. |AppVeyor| image:: https://ci.appveyor.com/api/projects/status/32r7s2skrgm9ubva?svg=true\n    :target: https://ci.appveyor.com/project/prompt-toolkit/python-prompt-toolkit/\n\n.. |RTD| image:: https://readthedocs.org/projects/python-prompt-toolkit/badge/\n    :target: https://python-prompt-toolkit.readthedocs.io/en/master/\n\n.. |License| image:: https://img.shields.io/github/license/prompt-toolkit/python-prompt-toolkit.svg\n    :target: https://github.com/prompt-toolkit/python-prompt-toolkit/blob/master/LICENSE\n\n.. |Codecov| image:: https://codecov.io/gh/prompt-toolkit/python-prompt-toolkit/branch/master/graphs/badge.svg?style=flat\n    :target: https://codecov.io/gh/prompt-toolkit/python-prompt-toolkit/\n\n\n\n",
          "name": "prompt-toolkit",
          "author": [
            {
              "type": "Person",
              "name": "Jonathan Slenders",
              "familyName": [
                "Slenders"
              ],
              "givenName": [
                "Jonathan"
              ]
            }
          ],
          "codeRepository": "https://pypi.org/project/prompt-toolkit/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python",
          "applicationCategory": [
            "Software Development"
          ]
        },
        {
          "type": "SoftwarePackage",
          "description": "Launch a subprocess in a pseudo terminal (pty), and interact with both the\nprocess and its pty.\n\nSometimes, piping stdin and stdout is not enough. There might be a password\nprompt that doesn't read from stdin, output that changes when it's going to a\npipe rather than a terminal, or curses-style interfaces that rely on a terminal.\nIf you need to automate these things, running the process in a pseudo terminal\n(pty) is the answer.\n\nInterface::\n\n    p = PtyProcessUnicode.spawn(['python'])\n    p.read(20)\n    p.write('6+6\\n')\n    p.read(20)\n",
          "name": "ptyprocess",
          "author": [
            {
              "type": "Person",
              "name": "Thomas Kluyver",
              "email": [
                "thomas@kluyver.me.uk"
              ],
              "familyName": [
                "Kluyver"
              ],
              "givenName": [
                "Thomas"
              ]
            }
          ],
          "codeRepository": "https://pypi.org/project/ptyprocess/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python",
          "applicationCategory": [
            "Terminals"
          ],
          "operatingSystem": [
            {
              "type": "OperatingSystem",
              "name": "macOS"
            }
          ]
        },
        {
          "type": "SoftwarePackage",
          "description": ".. image:: https://img.shields.io/pypi/v/py.svg\n    :target: https://pypi.org/project/py\n\n.. image:: https://img.shields.io/conda/vn/conda-forge/py.svg\n    :target: https://anaconda.org/conda-forge/py\n\n.. image:: https://img.shields.io/pypi/pyversions/py.svg\n  :target: https://pypi.org/project/py\n\n.. image:: https://github.com/pytest-dev/py/workflows/build/badge.svg\n  :target: https://github.com/pytest-dev/py/actions\n\n\n**NOTE**: this library is in **maintenance mode** and should not be used in new code.\n\nThe py lib is a Python development support library featuring\nthe following tools and modules:\n\n* ``py.path``:  uniform local and svn path objects  -> please use pathlib/pathlib2 instead\n* ``py.apipkg``:  explicit API control and lazy-importing -> please use the standalone package instead\n* ``py.iniconfig``:  easy parsing of .ini files -> please use the standalone package instead\n* ``py.code``: dynamic code generation and introspection (deprecated, moved to ``pytest`` as a implementation detail).\n\n**NOTE**: prior to the 1.4 release this distribution used to\ncontain py.test which is now its own package, see https://docs.pytest.org\n\nFor questions and more information please visit https://py.readthedocs.io\n\nBugs and issues: https://github.com/pytest-dev/py\n\nAuthors: Holger Krekel and others, 2004-2017\n\n\n",
          "name": "py",
          "author": [
            {
              "type": "Person",
              "name": "holger krekel,",
              "familyName": [
                "krekel,"
              ],
              "givenName": [
                "holger"
              ]
            }
          ],
          "license": "MIT license",
          "version": "==1.10.0",
          "codeRepository": "https://pypi.org/project/py/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python",
          "applicationCategory": [
            "Software Development",
            "Utilities"
          ],
          "applicationSubCategory": [
            "Libraries",
            "Testing"
          ],
          "operatingSystem": [
            {
              "type": "OperatingSystem",
              "name": "macOS"
            },
            {
              "type": "OperatingSystem",
              "name": "Windows"
            }
          ]
        },
        {
          "type": "SoftwarePackage",
          "description": "\npycparser is a complete parser of the C language, written in\npure Python using the PLY parsing library.\nIt parses C code into an AST and can serve as a front-end for\nC compilers or analysis tools.\n\n\n",
          "name": "pycparser",
          "author": [
            {
              "type": "Person",
              "name": "Eli Bendersky",
              "email": [
                "eliben@gmail.com"
              ],
              "familyName": [
                "Bendersky"
              ],
              "givenName": [
                "Eli"
              ]
            }
          ],
          "license": "BSD",
          "codeRepository": "https://pypi.org/project/pycparser/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python"
        },
        {
          "type": "SoftwarePackage",
          "description": "# pydantic\n\n[![CI](https://github.com/samuelcolvin/pydantic/workflows/CI/badge.svg?event=push)](https://github.com/samuelcolvin/pydantic/actions?query=event%3Apush+branch%3Amaster+workflow%3ACI)\n[![Coverage](https://codecov.io/gh/samuelcolvin/pydantic/branch/master/graph/badge.svg)](https://codecov.io/gh/samuelcolvin/pydantic)\n[![pypi](https://img.shields.io/pypi/v/pydantic.svg)](https://pypi.python.org/pypi/pydantic)\n[![CondaForge](https://img.shields.io/conda/v/conda-forge/pydantic.svg)](https://anaconda.org/conda-forge/pydantic)\n[![downloads](https://img.shields.io/pypi/dm/pydantic.svg)](https://pypistats.org/packages/pydantic)\n[![versions](https://img.shields.io/pypi/pyversions/pydantic.svg)](https://github.com/samuelcolvin/pydantic)\n[![license](https://img.shields.io/github/license/samuelcolvin/pydantic.svg)](https://github.com/samuelcolvin/pydantic/blob/master/LICENSE)\n\nData validation and settings management using Python type hinting.\n\nFast and extensible, *pydantic* plays nicely with your linters/IDE/brain.\nDefine how data should be in pure, canonical Python 3.6+; validate it with *pydantic*.\n\n## Help\n\nSee [documentation](https://pydantic-docs.helpmanual.io/) for more details.\n\n## Installation\n\nInstall using `pip install -U pydantic` or `conda install pydantic -c conda-forge`.\nFor more installation options to make *pydantic* even faster,\nsee the [Install](https://pydantic-docs.helpmanual.io/install/) section in the documentation.\n\n## A Simple Example\n\n```py\nfrom datetime import datetime\nfrom typing import List, Optional\nfrom pydantic import BaseModel\n\nclass User(BaseModel):\n    id: int\n    name = 'John Doe'\n    signup_ts: Optional[datetime] = None\n    friends: List[int] = []\n\nexternal_data = {'id': '123', 'signup_ts': '2017-06-01 12:22', 'friends': [1, '2', b'3']}\nuser = User(**external_data)\nprint(user)\n#> User id=123 name='John Doe' signup_ts=datetime.datetime(2017, 6, 1, 12, 22) friends=[1, 2, 3]\nprint(user.id)\n#> 123\n```\n\n## Contributing\n\nFor guidance on setting up a development environment and how to make a\ncontribution to *pydantic*, see\n[Contributing to Pydantic](https://pydantic-docs.helpmanual.io/contributing/).\n\n## Reporting a Security Vulnerability\n\nSee our [security policy](https://github.com/samuelcolvin/pydantic/security/policy).\n\n\n## v1.8.2 (2021-05-11)\n\n!!! warning\n    A security vulnerability, level \"moderate\" is fixed in v1.8.2. Please upgrade **ASAP**.\n    See security advisory [CVE-2021-29510](https://github.com/samuelcolvin/pydantic/security/advisories/GHSA-5jqp-qgf6-3pvh)\n\n* **Security fix:** Fix `date` and `datetime` parsing so passing either `'infinity'` or `float('inf')` \n  (or their negative values) does not cause an infinite loop, \n  see security advisory [CVE-2021-29510](https://github.com/samuelcolvin/pydantic/security/advisories/GHSA-5jqp-qgf6-3pvh)\n* fix schema generation with Enum by generating a valid name, [#2575](https://github.com/samuelcolvin/pydantic/issues/2575) by [@PrettyWood](https://github.com/PrettyWood)\n* fix JSON schema generation with a `Literal` of an enum member, [#2536](https://github.com/samuelcolvin/pydantic/issues/2536) by [@PrettyWood](https://github.com/PrettyWood)\n* Fix bug with configurations declarations that are passed as\n  keyword arguments during class creation, [#2532](https://github.com/samuelcolvin/pydantic/issues/2532) by [@uriyyo](https://github.com/uriyyo)\n* Allow passing `json_encoders` in class kwargs, [#2521](https://github.com/samuelcolvin/pydantic/issues/2521) by [@layday](https://github.com/layday)\n* support arbitrary types with custom `__eq__`, [#2483](https://github.com/samuelcolvin/pydantic/issues/2483) by [@PrettyWood](https://github.com/PrettyWood)\n* support `Annotated` in `validate_arguments` and in generic models with python 3.9, [#2483](https://github.com/samuelcolvin/pydantic/issues/2483) by [@PrettyWood](https://github.com/PrettyWood)\n* Support user defined generic field types in generic models, [#2465](https://github.com/samuelcolvin/pydantic/issues/2465) by [@daviskirk](https://github.com/daviskirk)\n\n## v1.8.1 (2021-03-03)\n\nBug fixes for regressions and new features from `v1.8` \n\n* allow elements of `Config.field` to update elements of a `Field`, [#2461](https://github.com/samuelcolvin/pydantic/issues/2461) by [@samuelcolvin](https://github.com/samuelcolvin)\n* fix validation with a `BaseModel` field and a custom root type, [#2449](https://github.com/samuelcolvin/pydantic/issues/2449) by [@PrettyWood](https://github.com/PrettyWood)\n* expose `Pattern` encoder to `fastapi`, [#2444](https://github.com/samuelcolvin/pydantic/issues/2444) by [@PrettyWood](https://github.com/PrettyWood)\n* enable the Hypothesis plugin to generate a constrained float when the `multiple_of` argument is specified, [#2442](https://github.com/samuelcolvin/pydantic/issues/2442) by [@tobi-lipede-oodle](https://github.com/tobi-lipede-oodle)\n* Avoid `RecursionError` when using some types like `Enum` or `Literal` with generic models, [#2436](https://github.com/samuelcolvin/pydantic/issues/2436) by [@PrettyWood](https://github.com/PrettyWood)\n* do not overwrite declared `__hash__` in subclasses of a model, [#2422](https://github.com/samuelcolvin/pydantic/issues/2422) by [@PrettyWood](https://github.com/PrettyWood)\n* fix `mypy` complaints on `Path` and `UUID` related custom types, [#2418](https://github.com/samuelcolvin/pydantic/issues/2418) by [@PrettyWood](https://github.com/PrettyWood)\n* Support properly variable length tuples of compound types, [#2416](https://github.com/samuelcolvin/pydantic/issues/2416) by [@PrettyWood](https://github.com/PrettyWood)\n\n## v1.8 (2021-02-26)\n\nThank you to pydantic's sponsors:\n@jorgecarleitao, [@BCarley](https://github.com/BCarley), [@chdsbd](https://github.com/chdsbd), [@tiangolo](https://github.com/tiangolo), [@matin](https://github.com/matin), [@linusg](https://github.com/linusg), [@kevinalh](https://github.com/kevinalh), [@koxudaxi](https://github.com/koxudaxi), [@timdrijvers](https://github.com/timdrijvers), [@mkeen](https://github.com/mkeen), [@meadsteve](https://github.com/meadsteve), \n@ginomempin, [@primer-io](https://github.com/primer-io), [@and-semakin](https://github.com/and-semakin), [@tomthorogood](https://github.com/tomthorogood), [@AjitZK](https://github.com/AjitZK), [@westonsteimel](https://github.com/westonsteimel), [@Mazyod](https://github.com/Mazyod), [@christippett](https://github.com/christippett), [@CarlosDomingues](https://github.com/CarlosDomingues), \n@Kludex, [@r-m-n](https://github.com/r-m-n)\nfor their kind support.\n\n### Highlights\n\n* [Hypothesis plugin](https://pydantic-docs.helpmanual.io/hypothesis_plugin/) for testing, [#2097](https://github.com/samuelcolvin/pydantic/issues/2097) by [@Zac-HD](https://github.com/Zac-HD)\n* support for [`NamedTuple` and `TypedDict`](https://pydantic-docs.helpmanual.io/usage/types/#annotated-types), [#2216](https://github.com/samuelcolvin/pydantic/issues/2216) by [@PrettyWood](https://github.com/PrettyWood)\n* Support [`Annotated` hints on model fields](https://pydantic-docs.helpmanual.io/usage/schema/#typingannotated-fields), [#2147](https://github.com/samuelcolvin/pydantic/issues/2147) by [@JacobHayes](https://github.com/JacobHayes)\n* [`frozen` parameter on `Config`](https://pydantic-docs.helpmanual.io/usage/model_config/) to allow models to be hashed, [#1880](https://github.com/samuelcolvin/pydantic/issues/1880) by [@rhuille](https://github.com/rhuille)\n\n### Changes\n\n* **Breaking Change**, remove old deprecation aliases from v1, [#2415](https://github.com/samuelcolvin/pydantic/issues/2415) by [@samuelcolvin](https://github.com/samuelcolvin):\n  * remove notes on migrating to v1 in docs\n  * remove `Schema` which was replaced by `Field`\n  * remove `Config.case_insensitive` which was replaced by `Config.case_sensitive` (default `False`)\n  * remove `Config.allow_population_by_alias` which was replaced by `Config.allow_population_by_field_name`\n  * remove `model.fields` which was replaced by `model.__fields__`\n  * remove `model.to_string()` which was replaced by `str(model)`\n  * remove `model.__values__` which was replaced by `model.__dict__`\n* **Breaking Change:** always validate only first sublevel items with `each_item`.\n  There were indeed some edge cases with some compound types where the validated items were the last sublevel ones, [#1933](https://github.com/samuelcolvin/pydantic/issues/1933) by [@PrettyWood](https://github.com/PrettyWood)\n* Update docs extensions to fix local syntax highlighting, [#2400](https://github.com/samuelcolvin/pydantic/issues/2400) by [@daviskirk](https://github.com/daviskirk)\n* fix: allow `utils.lenient_issubclass` to handle `typing.GenericAlias` objects like `list[str]` in python >= 3.9, [#2399](https://github.com/samuelcolvin/pydantic/issues/2399) by [@daviskirk](https://github.com/daviskirk)\n* Improve field declaration for _pydantic_ `dataclass` by allowing the usage of _pydantic_ `Field` or `'metadata'` kwarg of `dataclasses.field`, [#2384](https://github.com/samuelcolvin/pydantic/issues/2384) by [@PrettyWood](https://github.com/PrettyWood)\n* Making `typing-extensions` a required dependency, [#2368](https://github.com/samuelcolvin/pydantic/issues/2368) by [@samuelcolvin](https://github.com/samuelcolvin)\n* Make `resolve_annotations` more lenient, allowing for missing modules, [#2363](https://github.com/samuelcolvin/pydantic/issues/2363) by [@samuelcolvin](https://github.com/samuelcolvin)\n* Allow configuring models through class kwargs, [#2356](https://github.com/samuelcolvin/pydantic/issues/2356) by [@MrMrRobat](https://github.com/MrMrRobat)\n* Prevent `Mapping` subclasses from always being coerced to `dict`, [#2325](https://github.com/samuelcolvin/pydantic/issues/2325) by [@ofek](https://github.com/ofek)\n* fix: allow `None` for type `Optional[conset / conlist]`, [#2320](https://github.com/samuelcolvin/pydantic/issues/2320) by [@PrettyWood](https://github.com/PrettyWood)\n* Support empty tuple type, [#2318](https://github.com/samuelcolvin/pydantic/issues/2318) by [@PrettyWood](https://github.com/PrettyWood)\n* fix: `python_requires` metadata to require >=3.6.1, [#2306](https://github.com/samuelcolvin/pydantic/issues/2306) by [@hukkinj1](https://github.com/hukkinj1)\n* Properly encode `Decimal` with, or without any decimal places, [#2293](https://github.com/samuelcolvin/pydantic/issues/2293) by [@hultner](https://github.com/hultner)\n* fix: update `__fields_set__` in `BaseModel.copy(update=…)`, [#2290](https://github.com/samuelcolvin/pydantic/issues/2290) by [@PrettyWood](https://github.com/PrettyWood)\n* fix: keep order of fields with `BaseModel.construct()`, [#2281](https://github.com/samuelcolvin/pydantic/issues/2281) by [@PrettyWood](https://github.com/PrettyWood)\n* Support generating schema for Generic fields, [#2262](https://github.com/samuelcolvin/pydantic/issues/2262) by [@maximberg](https://github.com/maximberg)\n* Fix `validate_decorator` so `**kwargs` doesn't exclude values when the keyword\n  has the same name as the `*args` or `**kwargs` names, [#2251](https://github.com/samuelcolvin/pydantic/issues/2251) by [@cybojenix](https://github.com/cybojenix)\n* Prevent overriding positional arguments with keyword arguments in\n  `validate_arguments`, as per behaviour with native functions, [#2249](https://github.com/samuelcolvin/pydantic/issues/2249) by [@cybojenix](https://github.com/cybojenix)\n* add documentation for `con*` type functions, [#2242](https://github.com/samuelcolvin/pydantic/issues/2242) by [@tayoogunbiyi](https://github.com/tayoogunbiyi)\n* Support custom root type (aka `__root__`) when using `parse_obj()` with nested models, [#2238](https://github.com/samuelcolvin/pydantic/issues/2238) by [@PrettyWood](https://github.com/PrettyWood)\n* Support custom root type (aka `__root__`) with `from_orm()`, [#2237](https://github.com/samuelcolvin/pydantic/issues/2237) by [@PrettyWood](https://github.com/PrettyWood)\n* ensure cythonized functions are left untouched when creating models, based on [#1944](https://github.com/samuelcolvin/pydantic/issues/1944) by [@kollmats](https://github.com/kollmats), [#2228](https://github.com/samuelcolvin/pydantic/issues/2228) by [@samuelcolvin](https://github.com/samuelcolvin)\n* Resolve forward refs for stdlib dataclasses converted into _pydantic_ ones, [#2220](https://github.com/samuelcolvin/pydantic/issues/2220) by [@PrettyWood](https://github.com/PrettyWood)\n* Add support for `NamedTuple` and `TypedDict` types.\n  Those two types are now handled and validated when used inside `BaseModel` or _pydantic_ `dataclass`.\n  Two utils are also added `create_model_from_namedtuple` and `create_model_from_typeddict`, [#2216](https://github.com/samuelcolvin/pydantic/issues/2216) by [@PrettyWood](https://github.com/PrettyWood)\n* Do not ignore annotated fields when type is `Union[Type[...], ...]`, [#2213](https://github.com/samuelcolvin/pydantic/issues/2213) by [@PrettyWood](https://github.com/PrettyWood)\n* Raise a user-friendly `TypeError` when a `root_validator` does not return a `dict` (e.g. `None`), [#2209](https://github.com/samuelcolvin/pydantic/issues/2209) by [@masalim2](https://github.com/masalim2)\n* Add a `FrozenSet[str]` type annotation to the `allowed_schemes` argument on the `strict_url` field type, [#2198](https://github.com/samuelcolvin/pydantic/issues/2198) by [@Midnighter](https://github.com/Midnighter)\n* add `allow_mutation` constraint to `Field`, [#2195](https://github.com/samuelcolvin/pydantic/issues/2195) by [@sblack-usu](https://github.com/sblack-usu)\n* Allow `Field` with a `default_factory` to be used as an argument to a function\n  decorated with `validate_arguments`, [#2176](https://github.com/samuelcolvin/pydantic/issues/2176) by [@thomascobb](https://github.com/thomascobb)\n* Allow non-existent secrets directory by only issuing a warning, [#2175](https://github.com/samuelcolvin/pydantic/issues/2175) by [@davidolrik](https://github.com/davidolrik)\n* fix URL regex to parse fragment without query string, [#2168](https://github.com/samuelcolvin/pydantic/issues/2168) by [@andrewmwhite](https://github.com/andrewmwhite)\n* fix: ensure to always return one of the values in `Literal` field type, [#2166](https://github.com/samuelcolvin/pydantic/issues/2166) by [@PrettyWood](https://github.com/PrettyWood)\n* Support `typing.Annotated` hints on model fields. A `Field` may now be set in the type hint with `Annotated[..., Field(...)`; all other annotations are ignored but still visible with `get_type_hints(..., include_extras=True)`, [#2147](https://github.com/samuelcolvin/pydantic/issues/2147) by [@JacobHayes](https://github.com/JacobHayes)\n* Added `StrictBytes` type as well as `strict=False` option to `ConstrainedBytes`, [#2136](https://github.com/samuelcolvin/pydantic/issues/2136) by [@rlizzo](https://github.com/rlizzo)\n* added `Config.anystr_lower` and `to_lower` kwarg to `constr` and `conbytes`, [#2134](https://github.com/samuelcolvin/pydantic/issues/2134) by [@tayoogunbiyi](https://github.com/tayoogunbiyi)\n* Support plain `typing.Tuple` type, [#2132](https://github.com/samuelcolvin/pydantic/issues/2132) by [@PrettyWood](https://github.com/PrettyWood)\n* Add a bound method `validate` to functions decorated with `validate_arguments`\n  to validate parameters without actually calling the function, [#2127](https://github.com/samuelcolvin/pydantic/issues/2127) by [@PrettyWood](https://github.com/PrettyWood)\n* Add the ability to customize settings sources (add / disable / change priority order), [#2107](https://github.com/samuelcolvin/pydantic/issues/2107) by [@kozlek](https://github.com/kozlek)\n* Fix mypy complaints about most custom _pydantic_ types, [#2098](https://github.com/samuelcolvin/pydantic/issues/2098) by [@PrettyWood](https://github.com/PrettyWood)\n* Add a [Hypothesis](https://hypothesis.readthedocs.io/) plugin for easier [property-based testing](https://increment.com/testing/in-praise-of-property-based-testing/) with Pydantic's custom types - [usage details here](https://pydantic-docs.helpmanual.io/hypothesis_plugin/), [#2097](https://github.com/samuelcolvin/pydantic/issues/2097) by [@Zac-HD](https://github.com/Zac-HD)\n* add validator for `None`, `NoneType` or `Literal[None]`, [#2095](https://github.com/samuelcolvin/pydantic/issues/2095) by [@PrettyWood](https://github.com/PrettyWood)\n* Handle properly fields of type `Callable` with a default value, [#2094](https://github.com/samuelcolvin/pydantic/issues/2094) by [@PrettyWood](https://github.com/PrettyWood)\n* Updated `create_model` return type annotation to return type which inherits from `__base__` argument, [#2071](https://github.com/samuelcolvin/pydantic/issues/2071) by [@uriyyo](https://github.com/uriyyo)\n* Add merged `json_encoders` inheritance, [#2064](https://github.com/samuelcolvin/pydantic/issues/2064) by [@art049](https://github.com/art049)\n* allow overwriting `ClassVar`s in sub-models without having to re-annotate them, [#2061](https://github.com/samuelcolvin/pydantic/issues/2061) by [@layday](https://github.com/layday)\n* add default encoder for `Pattern` type, [#2045](https://github.com/samuelcolvin/pydantic/issues/2045) by [@PrettyWood](https://github.com/PrettyWood)\n* Add `NonNegativeInt`, `NonPositiveInt`, `NonNegativeFloat`, `NonPositiveFloat`, [#1975](https://github.com/samuelcolvin/pydantic/issues/1975) by [@mdavis-xyz](https://github.com/mdavis-xyz)\n* Use % for percentage in string format of colors, [#1960](https://github.com/samuelcolvin/pydantic/issues/1960) by [@EdwardBetts](https://github.com/EdwardBetts)\n* Fixed issue causing `KeyError` to be raised when building schema from multiple `BaseModel` with the same names declared in separate classes, [#1912](https://github.com/samuelcolvin/pydantic/issues/1912) by [@JSextonn](https://github.com/JSextonn)\n* Add `rediss` (Redis over SSL) protocol to `RedisDsn`\n  Allow URLs without `user` part (e.g., `rediss://:pass@localhost`), [#1911](https://github.com/samuelcolvin/pydantic/issues/1911) by [@TrDex](https://github.com/TrDex)\n* Add a new `frozen` boolean parameter to `Config` (default: `False`).\n  Setting `frozen=True` does everything that `allow_mutation=False` does, and also generates a `__hash__()` method for the model. This makes instances of the model potentially hashable if all the attributes are hashable, [#1880](https://github.com/samuelcolvin/pydantic/issues/1880) by [@rhuille](https://github.com/rhuille)\n* fix schema generation with multiple Enums having the same name, [#1857](https://github.com/samuelcolvin/pydantic/issues/1857) by [@PrettyWood](https://github.com/PrettyWood)\n* Added support for 13/19 digits VISA credit cards in `PaymentCardNumber` type, [#1416](https://github.com/samuelcolvin/pydantic/issues/1416) by [@AlexanderSov](https://github.com/AlexanderSov)\n* fix: prevent `RecursionError` while using recursive `GenericModel`s, [#1370](https://github.com/samuelcolvin/pydantic/issues/1370) by [@xppt](https://github.com/xppt)\n* use `enum` for `typing.Literal` in JSON schema, [#1350](https://github.com/samuelcolvin/pydantic/issues/1350) by [@PrettyWood](https://github.com/PrettyWood)\n* Fix: some recursive models did not require `update_forward_refs` and silently behaved incorrectly, [#1201](https://github.com/samuelcolvin/pydantic/issues/1201) by [@PrettyWood](https://github.com/PrettyWood)\n* Fix bug where generic models with fields where the typevar is nested in another type `a: List[T]` are considered to be concrete. This allows these models to be subclassed and composed as expected, [#947](https://github.com/samuelcolvin/pydantic/issues/947) by [@daviskirk](https://github.com/daviskirk)\n* Add `Config.copy_on_model_validation` flag. When set to `False`, _pydantic_ will keep models used as fields\n  untouched on validation instead of reconstructing (copying) them, [#265](https://github.com/samuelcolvin/pydantic/issues/265) by [@PrettyWood](https://github.com/PrettyWood)\n\n## v1.7.4 (2021-05-11)\n\n* **Security fix:** Fix `date` and `datetime` parsing so passing either `'infinity'` or `float('inf')` \n  (or their negative values) does not cause an infinite loop,\n  See security advisory [CVE-2021-29510](https://github.com/samuelcolvin/pydantic/security/advisories/GHSA-5jqp-qgf6-3pvh)\n\n## v1.7.3 (2020-11-30)\n\nThank you to pydantic's sponsors:\n@timdrijvers, [@BCarley](https://github.com/BCarley), [@chdsbd](https://github.com/chdsbd), [@tiangolo](https://github.com/tiangolo), [@matin](https://github.com/matin), [@linusg](https://github.com/linusg), [@kevinalh](https://github.com/kevinalh), [@jorgecarleitao](https://github.com/jorgecarleitao), [@koxudaxi](https://github.com/koxudaxi), [@primer-api](https://github.com/primer-api),\n@mkeen, [@meadsteve](https://github.com/meadsteve) for their kind support.\n\n* fix: set right default value for required (optional) fields, [#2142](https://github.com/samuelcolvin/pydantic/issues/2142) by [@PrettyWood](https://github.com/PrettyWood)\n* fix: support `underscore_attrs_are_private` with generic models, [#2138](https://github.com/samuelcolvin/pydantic/issues/2138) by [@PrettyWood](https://github.com/PrettyWood)\n* fix: update all modified field values in `root_validator` when `validate_assignment` is on, [#2116](https://github.com/samuelcolvin/pydantic/issues/2116) by [@PrettyWood](https://github.com/PrettyWood)\n* Allow pickling of `pydantic.dataclasses.dataclass` dynamically created from a built-in `dataclasses.dataclass`, [#2111](https://github.com/samuelcolvin/pydantic/issues/2111) by [@aimestereo](https://github.com/aimestereo)\n* Fix a regression where Enum fields would not propagate keyword arguments to the schema, [#2109](https://github.com/samuelcolvin/pydantic/issues/2109) by [@bm424](https://github.com/bm424)\n* Ignore `__doc__` as private attribute when `Config.underscore_attrs_are_private` is set, [#2090](https://github.com/samuelcolvin/pydantic/issues/2090) by [@PrettyWood](https://github.com/PrettyWood)\n\n## v1.7.2 (2020-11-01)\n\n* fix slow `GenericModel` concrete model creation, allow `GenericModel` concrete name reusing in module, [#2078](https://github.com/samuelcolvin/pydantic/issues/2078) by [@MrMrRobat](https://github.com/MrMrRobat)\n* keep the order of the fields when `validate_assignment` is set, [#2073](https://github.com/samuelcolvin/pydantic/issues/2073) by [@PrettyWood](https://github.com/PrettyWood)\n* forward all the params of the stdlib `dataclass` when converted into _pydantic_ `dataclass`, [#2065](https://github.com/samuelcolvin/pydantic/issues/2065) by [@PrettyWood](https://github.com/PrettyWood)\n\n## v1.7.1 (2020-10-28)\n\nThank you to pydantic's sponsors:\n@timdrijvers, [@BCarley](https://github.com/BCarley), [@chdsbd](https://github.com/chdsbd), [@tiangolo](https://github.com/tiangolo), [@matin](https://github.com/matin), [@linusg](https://github.com/linusg), [@kevinalh](https://github.com/kevinalh), [@jorgecarleitao](https://github.com/jorgecarleitao), [@koxudaxi](https://github.com/koxudaxi), [@primer-api](https://github.com/primer-api), [@mkeen](https://github.com/mkeen)\nfor their kind support.\n\n* fix annotation of `validate_arguments` when passing configuration as argument, [#2055](https://github.com/samuelcolvin/pydantic/issues/2055) by [@layday](https://github.com/layday)\n* Fix mypy assignment error when using `PrivateAttr`, [#2048](https://github.com/samuelcolvin/pydantic/issues/2048) by [@aphedges](https://github.com/aphedges)\n* fix `underscore_attrs_are_private` causing `TypeError` when overriding `__init__`, [#2047](https://github.com/samuelcolvin/pydantic/issues/2047) by [@samuelcolvin](https://github.com/samuelcolvin)\n* Fixed regression introduced in v1.7 involving exception handling in field validators when `validate_assignment=True`, [#2044](https://github.com/samuelcolvin/pydantic/issues/2044) by [@johnsabath](https://github.com/johnsabath)\n* fix: _pydantic_ `dataclass` can inherit from stdlib `dataclass`\n  and `Config.arbitrary_types_allowed` is supported, [#2042](https://github.com/samuelcolvin/pydantic/issues/2042) by [@PrettyWood](https://github.com/PrettyWood)\n\n## v1.7 (2020-10-26)\n\nThank you to pydantic's sponsors:\n@timdrijvers, [@BCarley](https://github.com/BCarley), [@chdsbd](https://github.com/chdsbd), [@tiangolo](https://github.com/tiangolo), [@matin](https://github.com/matin), [@linusg](https://github.com/linusg), [@kevinalh](https://github.com/kevinalh), [@jorgecarleitao](https://github.com/jorgecarleitao), [@koxudaxi](https://github.com/koxudaxi), [@primer-api](https://github.com/primer-api) \nfor their kind support.\n\n### Highlights\n\n* python 3.9 support, thanks [@PrettyWood](https://github.com/PrettyWood)\n* [Private model attributes](https://pydantic-docs.helpmanual.io/usage/models/#private-model-attributes), thanks [@MrMrRobat](https://github.com/MrMrRobat)\n* [\"secrets files\" support in `BaseSettings`](https://pydantic-docs.helpmanual.io/usage/settings/#secret-support), thanks [@mdgilene](https://github.com/mdgilene)\n* [convert stdlib dataclasses to pydantic dataclasses and use stdlib dataclasses in models](https://pydantic-docs.helpmanual.io/usage/dataclasses/#stdlib-dataclasses-and-pydantic-dataclasses), thanks [@PrettyWood](https://github.com/PrettyWood)\n\n### Changes\n\n* **Breaking Change:** remove `__field_defaults__`, add `default_factory` support with `BaseModel.construct`.\n  Use `.get_default()` method on fields in `__fields__` attribute instead, [#1732](https://github.com/samuelcolvin/pydantic/issues/1732) by [@PrettyWood](https://github.com/PrettyWood)\n* Rearrange CI to run linting as a separate job, split install recipes for different tasks, [#2020](https://github.com/samuelcolvin/pydantic/issues/2020) by [@samuelcolvin](https://github.com/samuelcolvin)\n* Allows subclasses of generic models to make some, or all, of the superclass's type parameters concrete, while \n  also defining new type parameters in the subclass, [#2005](https://github.com/samuelcolvin/pydantic/issues/2005) by [@choogeboom](https://github.com/choogeboom)\n* Call validator with the correct `values` parameter type in `BaseModel.__setattr__`,\n  when `validate_assignment = True` in model config, [#1999](https://github.com/samuelcolvin/pydantic/issues/1999) by [@me-ransh](https://github.com/me-ransh)\n* Force `fields.Undefined` to be a singleton object, fixing inherited generic model schemas, [#1981](https://github.com/samuelcolvin/pydantic/issues/1981) by [@daviskirk](https://github.com/daviskirk)\n* Include tests in source distributions, [#1976](https://github.com/samuelcolvin/pydantic/issues/1976) by [@sbraz](https://github.com/sbraz)\n* Add ability to use `min_length/max_length` constraints with secret types, [#1974](https://github.com/samuelcolvin/pydantic/issues/1974) by [@uriyyo](https://github.com/uriyyo)\n* Also check `root_validators` when `validate_assignment` is on, [#1971](https://github.com/samuelcolvin/pydantic/issues/1971) by [@PrettyWood](https://github.com/PrettyWood)\n* Fix const validators not running when custom validators are present, [#1957](https://github.com/samuelcolvin/pydantic/issues/1957) by [@hmvp](https://github.com/hmvp)\n* add `deque` to field types, [#1935](https://github.com/samuelcolvin/pydantic/issues/1935) by [@wozniakty](https://github.com/wozniakty)\n* add basic support for python 3.9, [#1832](https://github.com/samuelcolvin/pydantic/issues/1832) by [@PrettyWood](https://github.com/PrettyWood)\n* Fix typo in the anchor of exporting_models.md#modelcopy and incorrect description, [#1821](https://github.com/samuelcolvin/pydantic/issues/1821) by [@KimMachineGun](https://github.com/KimMachineGun)\n* Added ability for `BaseSettings` to read \"secret files\", [#1820](https://github.com/samuelcolvin/pydantic/issues/1820) by [@mdgilene](https://github.com/mdgilene)\n* add `parse_raw_as` utility function, [#1812](https://github.com/samuelcolvin/pydantic/issues/1812) by [@PrettyWood](https://github.com/PrettyWood)\n* Support home directory relative paths for `dotenv` files (e.g. `~/.env`), [#1803](https://github.com/samuelcolvin/pydantic/issues/1803) by [@PrettyWood](https://github.com/PrettyWood)\n* Clarify documentation for `parse_file` to show that the argument\n  should be a file *path* not a file-like object, [#1794](https://github.com/samuelcolvin/pydantic/issues/1794) by [@mdavis-xyz](https://github.com/mdavis-xyz)\n* Fix false positive from mypy plugin when a class nested within a `BaseModel` is named `Model`, [#1770](https://github.com/samuelcolvin/pydantic/issues/1770) by [@selimb](https://github.com/selimb)\n* add basic support of Pattern type in schema generation, [#1767](https://github.com/samuelcolvin/pydantic/issues/1767) by [@PrettyWood](https://github.com/PrettyWood)\n* Support custom title, description and default in schema of enums, [#1748](https://github.com/samuelcolvin/pydantic/issues/1748) by [@PrettyWood](https://github.com/PrettyWood)\n* Properly represent `Literal` Enums when `use_enum_values` is True, [#1747](https://github.com/samuelcolvin/pydantic/issues/1747) by [@noelevans](https://github.com/noelevans)\n* Allows timezone information to be added to strings to be formatted as time objects. Permitted formats are `Z` for UTC \n  or an offset for absolute positive or negative time shifts. Or the timezone data can be omitted, [#1744](https://github.com/samuelcolvin/pydantic/issues/1744) by [@noelevans](https://github.com/noelevans)\n* Add stub `__init__` with python 3.6 signature for `ForwardRef`, [#1738](https://github.com/samuelcolvin/pydantic/issues/1738) by [@sirtelemak](https://github.com/sirtelemak)\n* Fix behaviour with forward refs and optional fields in nested models, [#1736](https://github.com/samuelcolvin/pydantic/issues/1736) by [@PrettyWood](https://github.com/PrettyWood)\n* add `Enum` and `IntEnum` as valid types for fields, [#1735](https://github.com/samuelcolvin/pydantic/issues/1735) by [@PrettyWood](https://github.com/PrettyWood)\n* Change default value of `__module__` argument of `create_model` from `None` to `'pydantic.main'`. \n  Set reference of created concrete model to it's module to allow pickling (not applied to models created in \n  functions), [#1686](https://github.com/samuelcolvin/pydantic/issues/1686) by [@MrMrRobat](https://github.com/MrMrRobat)\n* Add private attributes support, [#1679](https://github.com/samuelcolvin/pydantic/issues/1679) by [@MrMrRobat](https://github.com/MrMrRobat)\n* add `config` to `@validate_arguments`, [#1663](https://github.com/samuelcolvin/pydantic/issues/1663) by [@samuelcolvin](https://github.com/samuelcolvin)\n* Allow descendant Settings models to override env variable names for the fields defined in parent Settings models with \n  `env` in their `Config`. Previously only `env_prefix` configuration option was applicable, [#1561](https://github.com/samuelcolvin/pydantic/issues/1561) by [@ojomio](https://github.com/ojomio)\n* Support `ref_template` when creating schema `$ref`s, [#1479](https://github.com/samuelcolvin/pydantic/issues/1479) by [@kilo59](https://github.com/kilo59)\n* Add a `__call__` stub to `PyObject` so that mypy will know that it is callable, [#1352](https://github.com/samuelcolvin/pydantic/issues/1352) by [@brianmaissy](https://github.com/brianmaissy)\n* `pydantic.dataclasses.dataclass` decorator now supports built-in `dataclasses.dataclass`.\n  It is hence possible to convert an existing `dataclass` easily to add *pydantic* validation.\n  Moreover nested dataclasses are also supported, [#744](https://github.com/samuelcolvin/pydantic/issues/744) by [@PrettyWood](https://github.com/PrettyWood)\n\n## v1.6.2 (2021-05-11)\n\n* **Security fix:** Fix `date` and `datetime` parsing so passing either `'infinity'` or `float('inf')` \n  (or their negative values) does not cause an infinite loop,\n  See security advisory [CVE-2021-29510](https://github.com/samuelcolvin/pydantic/security/advisories/GHSA-5jqp-qgf6-3pvh)\n\n## v1.6.1 (2020-07-15)\n\n* fix validation and parsing of nested models with `default_factory`, [#1710](https://github.com/samuelcolvin/pydantic/issues/1710) by [@PrettyWood](https://github.com/PrettyWood)\n\n## v1.6 (2020-07-11)\n\nThank you to pydantic's sponsors: [@matin](https://github.com/matin), [@tiangolo](https://github.com/tiangolo), [@chdsbd](https://github.com/chdsbd), [@jorgecarleitao](https://github.com/jorgecarleitao), and 1 anonymous sponsor for their kind support.\n\n* Modify validators for `conlist` and `conset` to not have `always=True`, [#1682](https://github.com/samuelcolvin/pydantic/issues/1682) by [@samuelcolvin](https://github.com/samuelcolvin)\n* add port check to `AnyUrl` (can't exceed 65536) ports are 16 insigned bits: `0 <= port <= 2**16-1` src: [rfc793 header format](https://tools.ietf.org/html/rfc793#section-3.1), [#1654](https://github.com/samuelcolvin/pydantic/issues/1654) by [@flapili](https://github.com/flapili)\n* Document default `regex` anchoring semantics, [#1648](https://github.com/samuelcolvin/pydantic/issues/1648) by [@yurikhan](https://github.com/yurikhan)\n* Use `chain.from_iterable` in class_validators.py. This is a faster and more idiomatic way of using `itertools.chain`.\n  Instead of computing all the items in the iterable and storing them in memory, they are computed one-by-one and never\n  stored as a huge list. This can save on both runtime and memory space, [#1642](https://github.com/samuelcolvin/pydantic/issues/1642) by [@cool-RR](https://github.com/cool-RR)\n* Add `conset()`, analogous to `conlist()`, [#1623](https://github.com/samuelcolvin/pydantic/issues/1623) by [@patrickkwang](https://github.com/patrickkwang)\n* make *pydantic* errors (un)pickable, [#1616](https://github.com/samuelcolvin/pydantic/issues/1616) by [@PrettyWood](https://github.com/PrettyWood)\n* Allow custom encoding for `dotenv` files, [#1615](https://github.com/samuelcolvin/pydantic/issues/1615) by [@PrettyWood](https://github.com/PrettyWood)\n* Ensure `SchemaExtraCallable` is always defined to get type hints on BaseConfig, [#1614](https://github.com/samuelcolvin/pydantic/issues/1614) by [@PrettyWood](https://github.com/PrettyWood)\n* Update datetime parser to support negative timestamps, [#1600](https://github.com/samuelcolvin/pydantic/issues/1600) by [@mlbiche](https://github.com/mlbiche)\n* Update mypy, remove `AnyType` alias for `Type[Any]`, [#1598](https://github.com/samuelcolvin/pydantic/issues/1598) by [@samuelcolvin](https://github.com/samuelcolvin)\n* Adjust handling of root validators so that errors are aggregated from _all_ failing root validators, instead of reporting on only the first root validator to fail, [#1586](https://github.com/samuelcolvin/pydantic/issues/1586) by [@beezee](https://github.com/beezee)\n* Make `__modify_schema__` on Enums apply to the enum schema rather than fields that use the enum, [#1581](https://github.com/samuelcolvin/pydantic/issues/1581) by [@therefromhere](https://github.com/therefromhere)\n* Fix behavior of `__all__` key when used in conjunction with index keys in advanced include/exclude of fields that are sequences, [#1579](https://github.com/samuelcolvin/pydantic/issues/1579) by [@xspirus](https://github.com/xspirus)\n* Subclass validators do not run when referencing a `List` field defined in a parent class when `each_item=True`. Added an example to the docs illustrating this, [#1566](https://github.com/samuelcolvin/pydantic/issues/1566) by [@samueldeklund](https://github.com/samueldeklund)\n* change `schema.field_class_to_schema` to support `frozenset` in schema, [#1557](https://github.com/samuelcolvin/pydantic/issues/1557) by [@wangpeibao](https://github.com/wangpeibao)\n* Call `__modify_schema__` only for the field schema, [#1552](https://github.com/samuelcolvin/pydantic/issues/1552) by [@PrettyWood](https://github.com/PrettyWood)\n* Move the assignment of `field.validate_always` in `fields.py` so the `always` parameter of validators work on inheritance, [#1545](https://github.com/samuelcolvin/pydantic/issues/1545) by [@dcHHH](https://github.com/dcHHH)\n* Added support for UUID instantiation through 16 byte strings such as `b'\\x12\\x34\\x56\\x78' * 4`. This was done to support `BINARY(16)` columns in sqlalchemy, [#1541](https://github.com/samuelcolvin/pydantic/issues/1541) by [@shawnwall](https://github.com/shawnwall)\n* Add a test assertion that `default_factory` can return a singleton, [#1523](https://github.com/samuelcolvin/pydantic/issues/1523) by [@therefromhere](https://github.com/therefromhere)\n* Add `NameEmail.__eq__` so duplicate `NameEmail` instances are evaluated as equal, [#1514](https://github.com/samuelcolvin/pydantic/issues/1514) by [@stephen-bunn](https://github.com/stephen-bunn)\n* Add datamodel-code-generator link in pydantic document site, [#1500](https://github.com/samuelcolvin/pydantic/issues/1500) by [@koxudaxi](https://github.com/koxudaxi)\n* Added a \"Discussion of Pydantic\" section to the documentation, with a link to \"Pydantic Introduction\" video by Alexander Hultnér, [#1499](https://github.com/samuelcolvin/pydantic/issues/1499) by [@hultner](https://github.com/hultner)\n* Avoid some side effects of `default_factory` by calling it only once\n  if possible and by not setting a default value in the schema, [#1491](https://github.com/samuelcolvin/pydantic/issues/1491) by [@PrettyWood](https://github.com/PrettyWood)\n* Added docs about dumping dataclasses to JSON, [#1487](https://github.com/samuelcolvin/pydantic/issues/1487) by [@mikegrima](https://github.com/mikegrima)\n* Make `BaseModel.__signature__` class-only, so getting `__signature__` from model instance will raise `AttributeError`, [#1466](https://github.com/samuelcolvin/pydantic/issues/1466) by [@MrMrRobat](https://github.com/MrMrRobat)\n* include `'format': 'password'` in the schema for secret types, [#1424](https://github.com/samuelcolvin/pydantic/issues/1424) by [@atheuz](https://github.com/atheuz)\n* Modify schema constraints on `ConstrainedFloat` so that `exclusiveMinimum` and\n  minimum are not included in the schema if they are equal to `-math.inf` and\n  `exclusiveMaximum` and `maximum` are not included if they are equal to `math.inf`, [#1417](https://github.com/samuelcolvin/pydantic/issues/1417) by [@vdwees](https://github.com/vdwees)\n* Squash internal `__root__` dicts in `.dict()` (and, by extension, in `.json()`), [#1414](https://github.com/samuelcolvin/pydantic/issues/1414) by [@patrickkwang](https://github.com/patrickkwang)\n* Move `const` validator to post-validators so it validates the parsed value, [#1410](https://github.com/samuelcolvin/pydantic/issues/1410) by [@selimb](https://github.com/selimb)\n* Fix model validation to handle nested literals, e.g. `Literal['foo', Literal['bar']]`, [#1364](https://github.com/samuelcolvin/pydantic/issues/1364) by [@DBCerigo](https://github.com/DBCerigo)\n* Remove `user_required = True` from `RedisDsn`, neither user nor password are required, [#1275](https://github.com/samuelcolvin/pydantic/issues/1275) by [@samuelcolvin](https://github.com/samuelcolvin)\n* Remove extra `allOf` from schema for fields with `Union` and custom `Field`, [#1209](https://github.com/samuelcolvin/pydantic/issues/1209) by [@mostaphaRoudsari](https://github.com/mostaphaRoudsari)\n* Updates OpenAPI schema generation to output all enums as separate models.\n  Instead of inlining the enum values in the model schema, models now use a `$ref`\n  property to point to the enum definition, [#1173](https://github.com/samuelcolvin/pydantic/issues/1173) by [@calvinwyoung](https://github.com/calvinwyoung)\n\n## v1.5.1 (2020-04-23)\n\n* Signature generation with `extra: allow` never uses a field name, [#1418](https://github.com/samuelcolvin/pydantic/issues/1418) by [@prettywood](https://github.com/prettywood)\n* Avoid mutating `Field` default value, [#1412](https://github.com/samuelcolvin/pydantic/issues/1412) by [@prettywood](https://github.com/prettywood)\n\n## v1.5 (2020-04-18)\n\n* Make includes/excludes arguments for `.dict()`, `._iter()`, ..., immutable, [#1404](https://github.com/samuelcolvin/pydantic/issues/1404) by [@AlexECX](https://github.com/AlexECX)\n* Always use a field's real name with includes/excludes in `model._iter()`, regardless of `by_alias`, [#1397](https://github.com/samuelcolvin/pydantic/issues/1397) by [@AlexECX](https://github.com/AlexECX)\n* Update constr regex example to include start and end lines, [#1396](https://github.com/samuelcolvin/pydantic/issues/1396) by [@lmcnearney](https://github.com/lmcnearney)\n* Confirm that shallow `model.copy()` does make a shallow copy of attributes, [#1383](https://github.com/samuelcolvin/pydantic/issues/1383) by [@samuelcolvin](https://github.com/samuelcolvin)\n* Renaming `model_name` argument of `main.create_model()` to `__model_name` to allow using `model_name` as a field name, [#1367](https://github.com/samuelcolvin/pydantic/issues/1367) by [@kittipatv](https://github.com/kittipatv)\n* Replace raising of exception to silent passing  for non-Var attributes in mypy plugin, [#1345](https://github.com/samuelcolvin/pydantic/issues/1345) by [@b0g3r](https://github.com/b0g3r)\n* Remove `typing_extensions` dependency for python 3.8, [#1342](https://github.com/samuelcolvin/pydantic/issues/1342) by [@prettywood](https://github.com/prettywood)\n* Make `SecretStr` and `SecretBytes` initialization idempotent, [#1330](https://github.com/samuelcolvin/pydantic/issues/1330) by [@atheuz](https://github.com/atheuz)\n* document making secret types dumpable using the json method, [#1328](https://github.com/samuelcolvin/pydantic/issues/1328) by [@atheuz](https://github.com/atheuz)\n* Move all testing and build to github actions, add windows and macos binaries, \n  thank you [@StephenBrown2](https://github.com/StephenBrown2) for much help, [#1326](https://github.com/samuelcolvin/pydantic/issues/1326) by [@samuelcolvin](https://github.com/samuelcolvin)\n* fix card number length check in `PaymentCardNumber`, `PaymentCardBrand` now inherits from `str`, [#1317](https://github.com/samuelcolvin/pydantic/issues/1317) by [@samuelcolvin](https://github.com/samuelcolvin)\n* Have `BaseModel` inherit from `Representation` to make mypy happy when overriding `__str__`, [#1310](https://github.com/samuelcolvin/pydantic/issues/1310) by [@FuegoFro](https://github.com/FuegoFro)\n* Allow `None` as input to all optional list fields, [#1307](https://github.com/samuelcolvin/pydantic/issues/1307) by [@prettywood](https://github.com/prettywood)\n* Add `datetime` field to `default_factory` example, [#1301](https://github.com/samuelcolvin/pydantic/issues/1301) by [@StephenBrown2](https://github.com/StephenBrown2)\n* Allow subclasses of known types to be encoded with superclass encoder, [#1291](https://github.com/samuelcolvin/pydantic/issues/1291) by [@StephenBrown2](https://github.com/StephenBrown2)\n* Exclude exported fields from all elements of a list/tuple of submodels/dicts with `'__all__'`, [#1286](https://github.com/samuelcolvin/pydantic/issues/1286) by [@masalim2](https://github.com/masalim2)\n* Add pydantic.color.Color objects as available input for Color fields, [#1258](https://github.com/samuelcolvin/pydantic/issues/1258) by [@leosussan](https://github.com/leosussan)\n* In examples, type nullable fields as `Optional`, so that these are valid mypy annotations, [#1248](https://github.com/samuelcolvin/pydantic/issues/1248) by [@kokes](https://github.com/kokes)\n* Make `pattern_validator()` accept pre-compiled `Pattern` objects. Fix `str_validator()` return type to `str`, [#1237](https://github.com/samuelcolvin/pydantic/issues/1237) by [@adamgreg](https://github.com/adamgreg)\n* Document how to manage Generics and inheritance, [#1229](https://github.com/samuelcolvin/pydantic/issues/1229) by [@esadruhn](https://github.com/esadruhn)\n* `update_forward_refs()` method of BaseModel now copies `__dict__` of class module instead of modyfying it, [#1228](https://github.com/samuelcolvin/pydantic/issues/1228) by [@paul-ilyin](https://github.com/paul-ilyin)\n* Support instance methods and class methods with `@validate_arguments`, [#1222](https://github.com/samuelcolvin/pydantic/issues/1222) by [@samuelcolvin](https://github.com/samuelcolvin)\n* Add `default_factory` argument to `Field` to create a dynamic default value by passing a zero-argument callable, [#1210](https://github.com/samuelcolvin/pydantic/issues/1210) by [@prettywood](https://github.com/prettywood)\n* add support for `NewType` of `List`, `Optional`, etc, [#1207](https://github.com/samuelcolvin/pydantic/issues/1207) by [@Kazy](https://github.com/Kazy)\n* fix mypy signature for `root_validator`, [#1192](https://github.com/samuelcolvin/pydantic/issues/1192) by [@samuelcolvin](https://github.com/samuelcolvin)\n* Fixed parsing of nested 'custom root type' models, [#1190](https://github.com/samuelcolvin/pydantic/issues/1190) by [@Shados](https://github.com/Shados)\n* Add `validate_arguments` function decorator which checks the arguments to a function matches type annotations, [#1179](https://github.com/samuelcolvin/pydantic/issues/1179) by [@samuelcolvin](https://github.com/samuelcolvin)\n* Add `__signature__` to models, [#1034](https://github.com/samuelcolvin/pydantic/issues/1034) by [@MrMrRobat](https://github.com/MrMrRobat)\n* Refactor `._iter()` method, 10x speed boost for `dict(model)`, [#1017](https://github.com/samuelcolvin/pydantic/issues/1017) by [@MrMrRobat](https://github.com/MrMrRobat)\n\n## v1.4 (2020-01-24)\n\n* **Breaking Change:** alias precedence logic changed so aliases on a field always take priority over\n  an alias from `alias_generator` to avoid buggy/unexpected behaviour,\n  see [here](https://pydantic-docs.helpmanual.io/usage/model_config/#alias-precedence) for details, [#1178](https://github.com/samuelcolvin/pydantic/issues/1178) by [@samuelcolvin](https://github.com/samuelcolvin)\n* Add support for unicode and punycode in TLDs, [#1182](https://github.com/samuelcolvin/pydantic/issues/1182) by [@jamescurtin](https://github.com/jamescurtin)\n* Fix `cls` argument in validators during assignment, [#1172](https://github.com/samuelcolvin/pydantic/issues/1172) by [@samuelcolvin](https://github.com/samuelcolvin)\n* completing Luhn algorithm for `PaymentCardNumber`, [#1166](https://github.com/samuelcolvin/pydantic/issues/1166) by [@cuencandres](https://github.com/cuencandres)\n* add support for generics that implement `__get_validators__` like a custom data type, [#1159](https://github.com/samuelcolvin/pydantic/issues/1159) by [@tiangolo](https://github.com/tiangolo)\n* add support for infinite generators with `Iterable`, [#1152](https://github.com/samuelcolvin/pydantic/issues/1152) by [@tiangolo](https://github.com/tiangolo)\n* fix `url_regex` to accept schemas with `+`, `-` and `.` after the first character, [#1142](https://github.com/samuelcolvin/pydantic/issues/1142) by [@samuelcolvin](https://github.com/samuelcolvin)\n* move `version_info()` to `version.py`, suggest its use in issues, [#1138](https://github.com/samuelcolvin/pydantic/issues/1138) by [@samuelcolvin](https://github.com/samuelcolvin)\n* Improve pydantic import time by roughly 50% by deferring some module loading and regex compilation, [#1127](https://github.com/samuelcolvin/pydantic/issues/1127) by [@samuelcolvin](https://github.com/samuelcolvin)\n* Fix `EmailStr` and `NameEmail` to accept instances of themselves in cython, [#1126](https://github.com/samuelcolvin/pydantic/issues/1126) by [@koxudaxi](https://github.com/koxudaxi)\n* Pass model class to the `Config.schema_extra` callable, [#1125](https://github.com/samuelcolvin/pydantic/issues/1125) by [@therefromhere](https://github.com/therefromhere)\n* Fix regex for username and password in URLs, [#1115](https://github.com/samuelcolvin/pydantic/issues/1115) by [@samuelcolvin](https://github.com/samuelcolvin)\n* Add support for nested generic models, [#1104](https://github.com/samuelcolvin/pydantic/issues/1104) by [@dmontagu](https://github.com/dmontagu)\n* add `__all__` to `__init__.py` to prevent \"implicit reexport\" errors from mypy, [#1072](https://github.com/samuelcolvin/pydantic/issues/1072) by [@samuelcolvin](https://github.com/samuelcolvin)\n* Add support for using \"dotenv\" files with `BaseSettings`, [#1011](https://github.com/samuelcolvin/pydantic/issues/1011) by [@acnebs](https://github.com/acnebs)\n\n## v1.3 (2019-12-21)\n\n* Change `schema` and `schema_model` to handle dataclasses by using their `__pydantic_model__` feature, [#792](https://github.com/samuelcolvin/pydantic/issues/792) by [@aviramha](https://github.com/aviramha)\n* Added option for `root_validator` to be skipped if values validation fails using keyword `skip_on_failure=True`, [#1049](https://github.com/samuelcolvin/pydantic/issues/1049) by [@aviramha](https://github.com/aviramha)\n* Allow `Config.schema_extra` to be a callable so that the generated schema can be post-processed, [#1054](https://github.com/samuelcolvin/pydantic/issues/1054) by [@selimb](https://github.com/selimb)\n* Update mypy to version 0.750, [#1057](https://github.com/samuelcolvin/pydantic/issues/1057) by [@dmontagu](https://github.com/dmontagu)\n* Trick Cython into allowing str subclassing, [#1061](https://github.com/samuelcolvin/pydantic/issues/1061) by [@skewty](https://github.com/skewty)\n* Prevent type attributes being added to schema unless the attribute `__schema_attributes__` is `True`, [#1064](https://github.com/samuelcolvin/pydantic/issues/1064) by [@samuelcolvin](https://github.com/samuelcolvin)\n* Change `BaseModel.parse_file` to use `Config.json_loads`, [#1067](https://github.com/samuelcolvin/pydantic/issues/1067) by [@kierandarcy](https://github.com/kierandarcy)\n* Fix for optional `Json` fields, [#1073](https://github.com/samuelcolvin/pydantic/issues/1073) by [@volker48](https://github.com/volker48)\n* Change the default number of threads used when compiling with cython to one,\n  allow override via the `CYTHON_NTHREADS` environment variable, [#1074](https://github.com/samuelcolvin/pydantic/issues/1074) by [@samuelcolvin](https://github.com/samuelcolvin)\n* Run FastAPI tests during Pydantic's CI tests, [#1075](https://github.com/samuelcolvin/pydantic/issues/1075) by [@tiangolo](https://github.com/tiangolo)\n* My mypy strictness constraints, and associated tweaks to type annotations, [#1077](https://github.com/samuelcolvin/pydantic/issues/1077) by [@samuelcolvin](https://github.com/samuelcolvin)\n* Add `__eq__` to SecretStr and SecretBytes to allow \"value equals\", [#1079](https://github.com/samuelcolvin/pydantic/issues/1079) by [@sbv-trueenergy](https://github.com/sbv-trueenergy)\n* Fix schema generation for nested None case, [#1088](https://github.com/samuelcolvin/pydantic/issues/1088) by [@lutostag](https://github.com/lutostag)\n* Consistent checks for sequence like objects, [#1090](https://github.com/samuelcolvin/pydantic/issues/1090) by [@samuelcolvin](https://github.com/samuelcolvin)\n* Fix `Config` inheritance on `BaseSettings` when used with `env_prefix`, [#1091](https://github.com/samuelcolvin/pydantic/issues/1091) by [@samuelcolvin](https://github.com/samuelcolvin)\n* Fix for `__modify_schema__` when it conflicted with `field_class_to_schema*`, [#1102](https://github.com/samuelcolvin/pydantic/issues/1102) by [@samuelcolvin](https://github.com/samuelcolvin)\n* docs: Fix explanation of case sensitive environment variable names when populating `BaseSettings` subclass attributes, [#1105](https://github.com/samuelcolvin/pydantic/issues/1105) by [@tribals](https://github.com/tribals)\n* Rename django-rest-framework benchmark in documentation, [#1119](https://github.com/samuelcolvin/pydantic/issues/1119) by [@frankie567](https://github.com/frankie567)\n\n## v1.2 (2019-11-28)\n\n* **Possible Breaking Change:** Add support for required `Optional` with `name: Optional[AnyType] = Field(...)`\n  and refactor `ModelField` creation to preserve `required` parameter value, [#1031](https://github.com/samuelcolvin/pydantic/issues/1031) by [@tiangolo](https://github.com/tiangolo);\n  see [here](https://pydantic-docs.helpmanual.io/usage/models/#required-optional-fields) for details\n* Add benchmarks for `cattrs`, [#513](https://github.com/samuelcolvin/pydantic/issues/513) by [@sebastianmika](https://github.com/sebastianmika)\n* Add `exclude_none` option to `dict()` and friends, [#587](https://github.com/samuelcolvin/pydantic/issues/587) by [@niknetniko](https://github.com/niknetniko)\n* Add benchmarks for `valideer`, [#670](https://github.com/samuelcolvin/pydantic/issues/670) by [@gsakkis](https://github.com/gsakkis)\n* Add `parse_obj_as` and `parse_file_as` functions for ad-hoc parsing of data into arbitrary pydantic-compatible types, [#934](https://github.com/samuelcolvin/pydantic/issues/934) by [@dmontagu](https://github.com/dmontagu)\n* Add `allow_reuse` argument to validators, thus allowing validator reuse, [#940](https://github.com/samuelcolvin/pydantic/issues/940) by [@dmontagu](https://github.com/dmontagu)\n* Add support for mapping types for custom root models, [#958](https://github.com/samuelcolvin/pydantic/issues/958) by [@dmontagu](https://github.com/dmontagu)\n* Mypy plugin support for dataclasses, [#966](https://github.com/samuelcolvin/pydantic/issues/966) by [@koxudaxi](https://github.com/koxudaxi)\n* Add support for dataclasses default factory, [#968](https://github.com/samuelcolvin/pydantic/issues/968) by [@ahirner](https://github.com/ahirner)\n* Add a `ByteSize` type for converting byte string (`1GB`) to plain bytes, [#977](https://github.com/samuelcolvin/pydantic/issues/977) by [@dgasmith](https://github.com/dgasmith)\n* Fix mypy complaint about `@root_validator(pre=True)`, [#984](https://github.com/samuelcolvin/pydantic/issues/984) by [@samuelcolvin](https://github.com/samuelcolvin)\n* Add manylinux binaries for python 3.8 to pypi, also support manylinux2010, [#994](https://github.com/samuelcolvin/pydantic/issues/994) by [@samuelcolvin](https://github.com/samuelcolvin)\n* Adds ByteSize conversion to another unit, [#995](https://github.com/samuelcolvin/pydantic/issues/995) by [@dgasmith](https://github.com/dgasmith)\n* Fix `__str__` and `__repr__` inheritance for models, [#1022](https://github.com/samuelcolvin/pydantic/issues/1022) by [@samuelcolvin](https://github.com/samuelcolvin)\n* add testimonials section to docs, [#1025](https://github.com/samuelcolvin/pydantic/issues/1025) by [@sullivancolin](https://github.com/sullivancolin)\n* Add support for `typing.Literal` for Python 3.8, [#1026](https://github.com/samuelcolvin/pydantic/issues/1026) by [@dmontagu](https://github.com/dmontagu)\n\n## v1.1.1 (2019-11-20)\n\n* Fix bug where use of complex fields on sub-models could cause fields to be incorrectly configured, [#1015](https://github.com/samuelcolvin/pydantic/issues/1015) by [@samuelcolvin](https://github.com/samuelcolvin)\n\n## v1.1 (2019-11-07)\n\n* Add a mypy plugin for type checking `BaseModel.__init__` and more, [#722](https://github.com/samuelcolvin/pydantic/issues/722) by [@dmontagu](https://github.com/dmontagu)\n* Change return type typehint for `GenericModel.__class_getitem__` to prevent PyCharm warnings, [#936](https://github.com/samuelcolvin/pydantic/issues/936) by [@dmontagu](https://github.com/dmontagu)\n* Fix usage of `Any` to allow `None`, also support `TypeVar` thus allowing use of un-parameterised collection types\n  e.g. `Dict` and `List`, [#962](https://github.com/samuelcolvin/pydantic/issues/962) by [@samuelcolvin](https://github.com/samuelcolvin)\n* Set `FieldInfo` on subfields to fix schema generation for complex nested types, [#965](https://github.com/samuelcolvin/pydantic/issues/965) by [@samuelcolvin](https://github.com/samuelcolvin)\n\n## v1.0 (2019-10-23)\n\n* **Breaking Change:** deprecate the `Model.fields` property, use `Model.__fields__` instead, [#883](https://github.com/samuelcolvin/pydantic/issues/883) by [@samuelcolvin](https://github.com/samuelcolvin)\n* **Breaking Change:** Change the precedence of aliases so child model aliases override parent aliases,\n  including using `alias_generator`, [#904](https://github.com/samuelcolvin/pydantic/issues/904) by [@samuelcolvin](https://github.com/samuelcolvin)\n* **Breaking change:** Rename `skip_defaults` to `exclude_unset`, and add ability to exclude actual defaults, [#915](https://github.com/samuelcolvin/pydantic/issues/915) by [@dmontagu](https://github.com/dmontagu)\n* Add `**kwargs` to `pydantic.main.ModelMetaclass.__new__` so `__init_subclass__` can take custom parameters on extended\n  `BaseModel` classes, [#867](https://github.com/samuelcolvin/pydantic/issues/867) by [@retnikt](https://github.com/retnikt)\n* Fix field of a type that has a default value, [#880](https://github.com/samuelcolvin/pydantic/issues/880) by [@koxudaxi](https://github.com/koxudaxi)\n* Use `FutureWarning` instead of `DeprecationWarning` when `alias` instead of `env` is used for settings models, [#881](https://github.com/samuelcolvin/pydantic/issues/881) by [@samuelcolvin](https://github.com/samuelcolvin)\n* Fix issue with `BaseSettings` inheritance and `alias` getting set to `None`, [#882](https://github.com/samuelcolvin/pydantic/issues/882) by [@samuelcolvin](https://github.com/samuelcolvin)\n* Modify `__repr__` and `__str__` methods to be consistent across all public classes, add `__pretty__` to support\n  python-devtools, [#884](https://github.com/samuelcolvin/pydantic/issues/884) by [@samuelcolvin](https://github.com/samuelcolvin)\n* deprecation warning for `case_insensitive` on `BaseSettings` config, [#885](https://github.com/samuelcolvin/pydantic/issues/885) by [@samuelcolvin](https://github.com/samuelcolvin)\n* For `BaseSettings` merge environment variables and in-code values recursively, as long as they create a valid object\n  when merged together, to allow splitting init arguments, [#888](https://github.com/samuelcolvin/pydantic/issues/888) by [@idmitrievsky](https://github.com/idmitrievsky)\n* change secret types example, [#890](https://github.com/samuelcolvin/pydantic/issues/890) by [@ashears](https://github.com/ashears)\n* Change the signature of `Model.construct()` to be more user-friendly, document `construct()` usage, [#898](https://github.com/samuelcolvin/pydantic/issues/898) by [@samuelcolvin](https://github.com/samuelcolvin)\n* Add example for the `construct()` method, [#907](https://github.com/samuelcolvin/pydantic/issues/907) by [@ashears](https://github.com/ashears)\n* Improve use of `Field` constraints on complex types, raise an error if constraints are not enforceable,\n  also support tuples with an ellipsis `Tuple[X, ...]`, `Sequence` and `FrozenSet` in schema, [#909](https://github.com/samuelcolvin/pydantic/issues/909) by [@samuelcolvin](https://github.com/samuelcolvin)\n* update docs for bool missing valid value, [#911](https://github.com/samuelcolvin/pydantic/issues/911) by [@trim21](https://github.com/trim21)\n* Better `str`/`repr` logic for `ModelField`, [#912](https://github.com/samuelcolvin/pydantic/issues/912) by [@samuelcolvin](https://github.com/samuelcolvin)\n* Fix `ConstrainedList`, update schema generation to reflect `min_items` and `max_items` `Field()` arguments, [#917](https://github.com/samuelcolvin/pydantic/issues/917) by [@samuelcolvin](https://github.com/samuelcolvin)\n* Allow abstracts sets (eg. dict keys) in the `include` and `exclude` arguments of `dict()`, [#921](https://github.com/samuelcolvin/pydantic/issues/921) by [@samuelcolvin](https://github.com/samuelcolvin)\n* Fix JSON serialization errors on `ValidationError.json()` by using `pydantic_encoder`, [#922](https://github.com/samuelcolvin/pydantic/issues/922) by [@samuelcolvin](https://github.com/samuelcolvin)\n* Clarify usage of `remove_untouched`, improve error message for types with no validators, [#926](https://github.com/samuelcolvin/pydantic/issues/926) by [@retnikt](https://github.com/retnikt)\n\n## v1.0b2 (2019-10-07)\n\n* Mark `StrictBool` typecheck as `bool` to allow for default values without mypy errors, [#690](https://github.com/samuelcolvin/pydantic/issues/690) by [@dmontagu](https://github.com/dmontagu)\n* Transfer the documentation build from sphinx to mkdocs, re-write much of the documentation, [#856](https://github.com/samuelcolvin/pydantic/issues/856) by [@samuelcolvin](https://github.com/samuelcolvin)\n* Add support for custom naming schemes for `GenericModel` subclasses, [#859](https://github.com/samuelcolvin/pydantic/issues/859) by [@dmontagu](https://github.com/dmontagu)\n* Add `if TYPE_CHECKING:` to the excluded lines for test coverage, [#874](https://github.com/samuelcolvin/pydantic/issues/874) by [@dmontagu](https://github.com/dmontagu)\n* Rename `allow_population_by_alias` to `allow_population_by_field_name`, remove unnecessary warning about it, [#875](https://github.com/samuelcolvin/pydantic/issues/875) by [@samuelcolvin](https://github.com/samuelcolvin)\n\n## v1.0b1 (2019-10-01)\n\n* **Breaking Change:** rename `Schema` to `Field`, make it a function to placate mypy, [#577](https://github.com/samuelcolvin/pydantic/issues/577) by [@samuelcolvin](https://github.com/samuelcolvin)\n* **Breaking Change:** modify parsing behavior for `bool`, [#617](https://github.com/samuelcolvin/pydantic/issues/617) by [@dmontagu](https://github.com/dmontagu)\n* **Breaking Change:** `get_validators` is no longer recognised, use `__get_validators__`.\n  `Config.ignore_extra` and `Config.allow_extra` are no longer recognised, use `Config.extra`, [#720](https://github.com/samuelcolvin/pydantic/issues/720) by [@samuelcolvin](https://github.com/samuelcolvin)\n* **Breaking Change:** modify default config settings for `BaseSettings`; `case_insensitive` renamed to `case_sensitive`,\n  default changed to `case_sensitive = False`, `env_prefix` default changed to `''` - e.g. no prefix, [#721](https://github.com/samuelcolvin/pydantic/issues/721) by [@dmontagu](https://github.com/dmontagu)\n* **Breaking change:** Implement `root_validator` and rename root errors from `__obj__` to `__root__`, [#729](https://github.com/samuelcolvin/pydantic/issues/729) by [@samuelcolvin](https://github.com/samuelcolvin)\n* **Breaking Change:** alter the behaviour of `dict(model)` so that sub-models are nolonger\n  converted to dictionaries, [#733](https://github.com/samuelcolvin/pydantic/issues/733) by [@samuelcolvin](https://github.com/samuelcolvin)\n* **Breaking change:** Added `initvars` support to `post_init_post_parse`, [#748](https://github.com/samuelcolvin/pydantic/issues/748) by [@Raphael-C-Almeida](https://github.com/Raphael-C-Almeida)\n* **Breaking Change:** Make `BaseModel.json()` only serialize the `__root__` key for models with custom root, [#752](https://github.com/samuelcolvin/pydantic/issues/752) by [@dmontagu](https://github.com/dmontagu)\n* **Breaking Change:** complete rewrite of `URL` parsing logic, [#755](https://github.com/samuelcolvin/pydantic/issues/755) by [@samuelcolvin](https://github.com/samuelcolvin)\n* **Breaking Change:** preserve superclass annotations for field-determination when not provided in subclass, [#757](https://github.com/samuelcolvin/pydantic/issues/757) by [@dmontagu](https://github.com/dmontagu)\n* **Breaking Change:** `BaseSettings` now uses the special `env` settings to define which environment variables to\n  read, not aliases, [#847](https://github.com/samuelcolvin/pydantic/issues/847) by [@samuelcolvin](https://github.com/samuelcolvin)\n* add support for `assert` statements inside validators, [#653](https://github.com/samuelcolvin/pydantic/issues/653) by [@abdusco](https://github.com/abdusco)\n* Update documentation to specify the use of `pydantic.dataclasses.dataclass` and subclassing `pydantic.BaseModel`, [#710](https://github.com/samuelcolvin/pydantic/issues/710) by [@maddosaurus](https://github.com/maddosaurus)\n* Allow custom JSON decoding and encoding via `json_loads` and `json_dumps` `Config` properties, [#714](https://github.com/samuelcolvin/pydantic/issues/714) by [@samuelcolvin](https://github.com/samuelcolvin)\n* make all annotated fields occur in the order declared, [#715](https://github.com/samuelcolvin/pydantic/issues/715) by [@dmontagu](https://github.com/dmontagu)\n* use pytest to test `mypy` integration, [#735](https://github.com/samuelcolvin/pydantic/issues/735) by [@dmontagu](https://github.com/dmontagu)\n* add `__repr__` method to `ErrorWrapper`, [#738](https://github.com/samuelcolvin/pydantic/issues/738) by [@samuelcolvin](https://github.com/samuelcolvin)\n* Added support for `FrozenSet` members in dataclasses, and a better error when attempting to use types from the `typing` module that are not supported by Pydantic, [#745](https://github.com/samuelcolvin/pydantic/issues/745) by [@djpetti](https://github.com/djpetti)\n* add documentation for Pycharm Plugin, [#750](https://github.com/samuelcolvin/pydantic/issues/750) by [@koxudaxi](https://github.com/koxudaxi)\n* fix broken examples in the docs, [#753](https://github.com/samuelcolvin/pydantic/issues/753) by [@dmontagu](https://github.com/dmontagu)\n* moving typing related objects into `pydantic.typing`, [#761](https://github.com/samuelcolvin/pydantic/issues/761) by [@samuelcolvin](https://github.com/samuelcolvin)\n* Minor performance improvements to `ErrorWrapper`, `ValidationError` and datetime parsing, [#763](https://github.com/samuelcolvin/pydantic/issues/763) by [@samuelcolvin](https://github.com/samuelcolvin)\n* Improvements to `datetime`/`date`/`time`/`timedelta` types: more descriptive errors,\n  change errors to `value_error` not `type_error`, support bytes, [#766](https://github.com/samuelcolvin/pydantic/issues/766) by [@samuelcolvin](https://github.com/samuelcolvin)\n* fix error messages for `Literal` types with multiple allowed values, [#770](https://github.com/samuelcolvin/pydantic/issues/770) by [@dmontagu](https://github.com/dmontagu)\n* Improved auto-generated `title` field in JSON schema by converting underscore to space, [#772](https://github.com/samuelcolvin/pydantic/issues/772) by [@skewty](https://github.com/skewty)\n* support `mypy --no-implicit-reexport` for dataclasses, also respect `--no-implicit-reexport` in pydantic itself, [#783](https://github.com/samuelcolvin/pydantic/issues/783) by [@samuelcolvin](https://github.com/samuelcolvin)\n* add the `PaymentCardNumber` type, [#790](https://github.com/samuelcolvin/pydantic/issues/790) by [@matin](https://github.com/matin)\n* Fix const validations for lists, [#794](https://github.com/samuelcolvin/pydantic/issues/794) by [@hmvp](https://github.com/hmvp)\n* Set `additionalProperties` to false in schema for models with extra fields disallowed, [#796](https://github.com/samuelcolvin/pydantic/issues/796) by [@Code0x58](https://github.com/Code0x58)\n* `EmailStr` validation method now returns local part case-sensitive per RFC 5321, [#798](https://github.com/samuelcolvin/pydantic/issues/798) by [@henriklindgren](https://github.com/henriklindgren)\n* Added ability to validate strictness to `ConstrainedFloat`, `ConstrainedInt` and `ConstrainedStr` and added\n  `StrictFloat` and `StrictInt` classes, [#799](https://github.com/samuelcolvin/pydantic/issues/799) by [@DerRidda](https://github.com/DerRidda)\n* Improve handling of `None` and `Optional`, replace `whole` with `each_item` (inverse meaning, default `False`)\n  on validators, [#803](https://github.com/samuelcolvin/pydantic/issues/803) by [@samuelcolvin](https://github.com/samuelcolvin)\n* add support for `Type[T]` type hints, [#807](https://github.com/samuelcolvin/pydantic/issues/807) by [@timonbimon](https://github.com/timonbimon)\n* Performance improvements from removing `change_exceptions`, change how pydantic error are constructed, [#819](https://github.com/samuelcolvin/pydantic/issues/819) by [@samuelcolvin](https://github.com/samuelcolvin)\n* Fix the error message arising when a `BaseModel`-type model field causes a `ValidationError` during parsing, [#820](https://github.com/samuelcolvin/pydantic/issues/820) by [@dmontagu](https://github.com/dmontagu)\n* allow `getter_dict` on `Config`, modify `GetterDict` to be more like a `Mapping` object and thus easier to work with, [#821](https://github.com/samuelcolvin/pydantic/issues/821) by [@samuelcolvin](https://github.com/samuelcolvin)\n* Only check `TypeVar` param on base `GenericModel` class, [#842](https://github.com/samuelcolvin/pydantic/issues/842) by [@zpencerq](https://github.com/zpencerq)\n* rename `Model._schema_cache` -> `Model.__schema_cache__`, `Model._json_encoder` -> `Model.__json_encoder__`,\n  `Model._custom_root_type` -> `Model.__custom_root_type__`, [#851](https://github.com/samuelcolvin/pydantic/issues/851) by [@samuelcolvin](https://github.com/samuelcolvin)\n\n## v0.32.2 (2019-08-17)\n\n(Docs are available [here](https://5d584fcca7c9b70007d1c997--pydantic-docs.netlify.com))\n\n* fix `__post_init__` usage with dataclass inheritance, fix [#739](https://github.com/samuelcolvin/pydantic/issues/739) by [@samuelcolvin](https://github.com/samuelcolvin)\n* fix required fields validation on GenericModels classes, [#742](https://github.com/samuelcolvin/pydantic/issues/742) by [@amitbl](https://github.com/amitbl)\n* fix defining custom `Schema` on `GenericModel` fields, [#754](https://github.com/samuelcolvin/pydantic/issues/754) by [@amitbl](https://github.com/amitbl)\n\n## v0.32.1 (2019-08-08)\n\n* do not validate extra fields when `validate_assignment` is on, [#724](https://github.com/samuelcolvin/pydantic/issues/724) by [@YaraslauZhylko](https://github.com/YaraslauZhylko)\n\n## v0.32 (2019-08-06)\n\n* add model name to `ValidationError` error message, [#676](https://github.com/samuelcolvin/pydantic/issues/676) by [@dmontagu](https://github.com/dmontagu)\n* **breaking change**: remove `__getattr__` and rename `__values__` to `__dict__` on `BaseModel`,\n  deprecation warning on use `__values__` attr, attributes access speed increased up to 14 times, [#712](https://github.com/samuelcolvin/pydantic/issues/712) by [@MrMrRobat](https://github.com/MrMrRobat)\n* support `ForwardRef` (without self-referencing annotations) in Python 3.6, [#706](https://github.com/samuelcolvin/pydantic/issues/706) by [@koxudaxi](https://github.com/koxudaxi)\n* implement `schema_extra` in `Config` sub-class, [#663](https://github.com/samuelcolvin/pydantic/issues/663) by [@tiangolo](https://github.com/tiangolo)\n\n## v0.31.1 (2019-07-31)\n\n* fix json generation for `EnumError`, [#697](https://github.com/samuelcolvin/pydantic/issues/697) by [@dmontagu](https://github.com/dmontagu)\n* update numerous dependencies\n\n## v0.31 (2019-07-24)\n\n* better support for floating point `multiple_of` values, [#652](https://github.com/samuelcolvin/pydantic/issues/652) by [@justindujardin](https://github.com/justindujardin)\n* fix schema generation for `NewType` and `Literal`, [#649](https://github.com/samuelcolvin/pydantic/issues/649) by [@dmontagu](https://github.com/dmontagu)\n* fix `alias_generator` and field config conflict, [#645](https://github.com/samuelcolvin/pydantic/issues/645) by [@gmetzker](https://github.com/gmetzker) and [#658](https://github.com/samuelcolvin/pydantic/issues/658) by [@MrMrRobat](https://github.com/MrMrRobat)\n* more detailed message for `EnumError`, [#673](https://github.com/samuelcolvin/pydantic/issues/673) by [@dmontagu](https://github.com/dmontagu)\n* add advanced exclude support for `dict`, `json` and `copy`, [#648](https://github.com/samuelcolvin/pydantic/issues/648) by [@MrMrRobat](https://github.com/MrMrRobat)\n* fix bug in `GenericModel` for models with concrete parameterized fields, [#672](https://github.com/samuelcolvin/pydantic/issues/672) by [@dmontagu](https://github.com/dmontagu)\n* add documentation for `Literal` type, [#651](https://github.com/samuelcolvin/pydantic/issues/651) by [@dmontagu](https://github.com/dmontagu)\n* add `Config.keep_untouched` for custom descriptors support, [#679](https://github.com/samuelcolvin/pydantic/issues/679) by [@MrMrRobat](https://github.com/MrMrRobat)\n* use `inspect.cleandoc` internally to get model description, [#657](https://github.com/samuelcolvin/pydantic/issues/657) by [@tiangolo](https://github.com/tiangolo)\n* add `Color` to schema generation, by [@euri10](https://github.com/euri10)\n* add documentation for Literal type, [#651](https://github.com/samuelcolvin/pydantic/issues/651) by [@dmontagu](https://github.com/dmontagu)\n\n## v0.30.1 (2019-07-15)\n\n* fix so nested classes which inherit and change `__init__` are correctly processed while still allowing `self` as a\n  parameter, [#644](https://github.com/samuelcolvin/pydantic/issues/644) by [@lnaden](https://github.com/lnaden) and [@dgasmith](https://github.com/dgasmith)\n\n## v0.30 (2019-07-07)\n\n* enforce single quotes in code, [#612](https://github.com/samuelcolvin/pydantic/issues/612) by [@samuelcolvin](https://github.com/samuelcolvin)\n* fix infinite recursion with dataclass inheritance and `__post_init__`, [#606](https://github.com/samuelcolvin/pydantic/issues/606) by [@Hanaasagi](https://github.com/Hanaasagi)\n* fix default values for `GenericModel`, [#610](https://github.com/samuelcolvin/pydantic/issues/610) by [@dmontagu](https://github.com/dmontagu)\n* clarify that self-referencing models require python 3.7+, [#616](https://github.com/samuelcolvin/pydantic/issues/616) by [@vlcinsky](https://github.com/vlcinsky)\n* fix truncate for types, [#611](https://github.com/samuelcolvin/pydantic/issues/611) by [@dmontagu](https://github.com/dmontagu)\n* add `alias_generator` support, [#622](https://github.com/samuelcolvin/pydantic/issues/622) by [@MrMrRobat](https://github.com/MrMrRobat)\n* fix unparameterized generic type schema generation, [#625](https://github.com/samuelcolvin/pydantic/issues/625) by [@dmontagu](https://github.com/dmontagu)\n* fix schema generation with multiple/circular references to the same model, [#621](https://github.com/samuelcolvin/pydantic/issues/621) by [@tiangolo](https://github.com/tiangolo) and [@wongpat](https://github.com/wongpat)\n* support custom root types, [#628](https://github.com/samuelcolvin/pydantic/issues/628) by [@koxudaxi](https://github.com/koxudaxi)\n* support `self` as a field name in `parse_obj`, [#632](https://github.com/samuelcolvin/pydantic/issues/632) by [@samuelcolvin](https://github.com/samuelcolvin)\n\n## v0.29 (2019-06-19)\n\n* support dataclasses.InitVar, [#592](https://github.com/samuelcolvin/pydantic/issues/592) by [@pfrederiks](https://github.com/pfrederiks)\n* Updated documentation to elucidate the usage of `Union` when defining multiple types under an attribute's\n  annotation and showcase how the type-order can affect marshalling of provided values, [#594](https://github.com/samuelcolvin/pydantic/issues/594) by [@somada141](https://github.com/somada141)\n* add `conlist` type, [#583](https://github.com/samuelcolvin/pydantic/issues/583) by [@hmvp](https://github.com/hmvp)\n* add support for generics, [#595](https://github.com/samuelcolvin/pydantic/issues/595) by [@dmontagu](https://github.com/dmontagu)\n\n## v0.28 (2019-06-06)\n\n* fix support for JSON Schema generation when using models with circular references in Python 3.7, [#572](https://github.com/samuelcolvin/pydantic/issues/572) by [@tiangolo](https://github.com/tiangolo)\n* support `__post_init_post_parse__` on dataclasses, [#567](https://github.com/samuelcolvin/pydantic/issues/567) by [@sevaho](https://github.com/sevaho)\n* allow dumping dataclasses to JSON, [#575](https://github.com/samuelcolvin/pydantic/issues/575) by [@samuelcolvin](https://github.com/samuelcolvin) and [@DanielOberg](https://github.com/DanielOberg)\n* ORM mode, [#562](https://github.com/samuelcolvin/pydantic/issues/562) by [@samuelcolvin](https://github.com/samuelcolvin)\n* fix `pydantic.compiled` on ipython, [#573](https://github.com/samuelcolvin/pydantic/issues/573) by [@dmontagu](https://github.com/dmontagu) and [@samuelcolvin](https://github.com/samuelcolvin)\n* add `StrictBool` type, [#579](https://github.com/samuelcolvin/pydantic/issues/579) by [@cazgp](https://github.com/cazgp)\n\n## v0.27 (2019-05-30)\n\n* **breaking change**  `_pydantic_post_init` to execute dataclass' original `__post_init__` before\n  validation, [#560](https://github.com/samuelcolvin/pydantic/issues/560) by [@HeavenVolkoff](https://github.com/HeavenVolkoff)\n* fix handling of generic types without specified parameters, [#550](https://github.com/samuelcolvin/pydantic/issues/550) by [@dmontagu](https://github.com/dmontagu)\n* **breaking change** (maybe): this is the first release compiled with **cython**, see the docs and please\n  submit an issue if you run into problems\n\n## v0.27.0a1 (2019-05-26)\n\n* fix JSON Schema for `list`, `tuple`, and `set`, [#540](https://github.com/samuelcolvin/pydantic/issues/540) by [@tiangolo](https://github.com/tiangolo)\n* compiling with cython, `manylinux` binaries, some other performance improvements, [#548](https://github.com/samuelcolvin/pydantic/issues/548) by [@samuelcolvin](https://github.com/samuelcolvin)\n\n## v0.26 (2019-05-22)\n\n* fix to schema generation for `IPvAnyAddress`, `IPvAnyInterface`, `IPvAnyNetwork` [#498](https://github.com/samuelcolvin/pydantic/issues/498) by [@pilosus](https://github.com/pilosus)\n* fix variable length tuples support, [#495](https://github.com/samuelcolvin/pydantic/issues/495) by [@pilosus](https://github.com/pilosus)\n* fix return type hint for `create_model`, [#526](https://github.com/samuelcolvin/pydantic/issues/526) by [@dmontagu](https://github.com/dmontagu)\n* **Breaking Change:** fix `.dict(skip_keys=True)` skipping values set via alias (this involves changing\n  `validate_model()` to always returns `Tuple[Dict[str, Any], Set[str], Optional[ValidationError]]`), [#517](https://github.com/samuelcolvin/pydantic/issues/517) by [@sommd](https://github.com/sommd)\n* fix to schema generation for `IPv4Address`, `IPv6Address`, `IPv4Interface`,\n  `IPv6Interface`, `IPv4Network`, `IPv6Network` [#532](https://github.com/samuelcolvin/pydantic/issues/532) by [@euri10](https://github.com/euri10)\n* add `Color` type, [#504](https://github.com/samuelcolvin/pydantic/issues/504) by [@pilosus](https://github.com/pilosus) and [@samuelcolvin](https://github.com/samuelcolvin)\n\n## v0.25 (2019-05-05)\n\n* Improve documentation on self-referencing models and annotations, [#487](https://github.com/samuelcolvin/pydantic/issues/487) by [@theenglishway](https://github.com/theenglishway)\n* fix `.dict()` with extra keys, [#490](https://github.com/samuelcolvin/pydantic/issues/490) by [@JaewonKim](https://github.com/JaewonKim)\n* support `const` keyword in `Schema`, [#434](https://github.com/samuelcolvin/pydantic/issues/434) by [@Sean1708](https://github.com/Sean1708)\n\n## v0.24 (2019-04-23)\n\n* fix handling `ForwardRef` in sub-types, like `Union`, [#464](https://github.com/samuelcolvin/pydantic/issues/464) by [@tiangolo](https://github.com/tiangolo)\n* fix secret serialization, [#465](https://github.com/samuelcolvin/pydantic/issues/465) by [@atheuz](https://github.com/atheuz)\n* Support custom validators for dataclasses, [#454](https://github.com/samuelcolvin/pydantic/issues/454) by [@primal100](https://github.com/primal100)\n* fix `parse_obj` to cope with dict-like objects, [#472](https://github.com/samuelcolvin/pydantic/issues/472) by [@samuelcolvin](https://github.com/samuelcolvin)\n* fix to schema generation in nested dataclass-based models, [#474](https://github.com/samuelcolvin/pydantic/issues/474) by [@NoAnyLove](https://github.com/NoAnyLove)\n* fix `json` for `Path`, `FilePath`, and `DirectoryPath` objects, [#473](https://github.com/samuelcolvin/pydantic/issues/473) by [@mikegoodspeed](https://github.com/mikegoodspeed)\n\n## v0.23 (2019-04-04)\n\n* improve documentation for contributing section, [#441](https://github.com/samuelcolvin/pydantic/issues/441) by [@pilosus](https://github.com/pilosus)\n* improve README.rst to include essential information about the package, [#446](https://github.com/samuelcolvin/pydantic/issues/446) by [@pilosus](https://github.com/pilosus)\n* `IntEnum` support, [#444](https://github.com/samuelcolvin/pydantic/issues/444) by [@potykion](https://github.com/potykion)\n* fix PyObject callable value, [#409](https://github.com/samuelcolvin/pydantic/issues/409) by [@pilosus](https://github.com/pilosus)\n* fix `black` deprecation warnings after update, [#451](https://github.com/samuelcolvin/pydantic/issues/451) by [@pilosus](https://github.com/pilosus)\n* fix `ForwardRef` collection bug, [#450](https://github.com/samuelcolvin/pydantic/issues/450) by [@tigerwings](https://github.com/tigerwings)\n* Support specialized `ClassVars`, [#455](https://github.com/samuelcolvin/pydantic/issues/455) by [@tyrylu](https://github.com/tyrylu)\n* fix JSON serialization for `ipaddress` types, [#333](https://github.com/samuelcolvin/pydantic/issues/333) by [@pilosus](https://github.com/pilosus)\n* add `SecretStr` and `SecretBytes` types, [#452](https://github.com/samuelcolvin/pydantic/issues/452) by [@atheuz](https://github.com/atheuz)\n\n## v0.22 (2019-03-29)\n\n* add `IPv{4,6,Any}Network` and `IPv{4,6,Any}Interface` types from `ipaddress` stdlib, [#333](https://github.com/samuelcolvin/pydantic/issues/333) by [@pilosus](https://github.com/pilosus)\n* add docs for `datetime` types, [#386](https://github.com/samuelcolvin/pydantic/issues/386) by [@pilosus](https://github.com/pilosus)\n* fix to schema generation in dataclass-based models, [#408](https://github.com/samuelcolvin/pydantic/issues/408) by [@pilosus](https://github.com/pilosus)\n* fix path in nested models, [#437](https://github.com/samuelcolvin/pydantic/issues/437) by [@kataev](https://github.com/kataev)\n* add `Sequence` support, [#304](https://github.com/samuelcolvin/pydantic/issues/304) by [@pilosus](https://github.com/pilosus)\n\n## v0.21.0 (2019-03-15)\n\n* fix typo in `NoneIsNotAllowedError` message, [#414](https://github.com/samuelcolvin/pydantic/issues/414) by [@YaraslauZhylko](https://github.com/YaraslauZhylko)\n* add `IPvAnyAddress`, `IPv4Address` and `IPv6Address` types, [#333](https://github.com/samuelcolvin/pydantic/issues/333) by [@pilosus](https://github.com/pilosus)\n\n## v0.20.1 (2019-02-26)\n\n* fix type hints of `parse_obj` and similar methods, [#405](https://github.com/samuelcolvin/pydantic/issues/405) by [@erosennin](https://github.com/erosennin)\n* fix submodel validation, [#403](https://github.com/samuelcolvin/pydantic/issues/403) by [@samuelcolvin](https://github.com/samuelcolvin)\n* correct type hints for `ValidationError.json`, [#406](https://github.com/samuelcolvin/pydantic/issues/406) by [@layday](https://github.com/layday)\n\n## v0.20.0 (2019-02-18)\n\n* fix tests for python 3.8, [#396](https://github.com/samuelcolvin/pydantic/issues/396) by [@samuelcolvin](https://github.com/samuelcolvin)\n* Adds fields to the `dir` method for autocompletion in interactive sessions, [#398](https://github.com/samuelcolvin/pydantic/issues/398) by [@dgasmith](https://github.com/dgasmith)\n* support `ForwardRef` (and therefore `from __future__ import annotations`) with dataclasses, [#397](https://github.com/samuelcolvin/pydantic/issues/397) by [@samuelcolvin](https://github.com/samuelcolvin)\n\n## v0.20.0a1 (2019-02-13)\n\n* **breaking change** (maybe): more sophisticated argument parsing for validators, any subset of\n  `values`, `config` and `field` is now permitted, eg. `(cls, value, field)`,\n  however the variadic key word argument (\"`**kwargs`\") **must** be called `kwargs`, [#388](https://github.com/samuelcolvin/pydantic/issues/388) by [@samuelcolvin](https://github.com/samuelcolvin)\n* **breaking change**: Adds `skip_defaults` argument to `BaseModel.dict()` to allow skipping of fields that\n  were not explicitly set, signature of `Model.construct()` changed, [#389](https://github.com/samuelcolvin/pydantic/issues/389) by [@dgasmith](https://github.com/dgasmith)\n* add `py.typed` marker file for PEP-561 support, [#391](https://github.com/samuelcolvin/pydantic/issues/391) by [@je-l](https://github.com/je-l)\n* Fix `extra` behaviour for multiple inheritance/mix-ins, [#394](https://github.com/samuelcolvin/pydantic/issues/394) by [@YaraslauZhylko](https://github.com/YaraslauZhylko)\n\n## v0.19.0 (2019-02-04)\n\n* Support `Callable` type hint, fix [#279](https://github.com/samuelcolvin/pydantic/issues/279) by [@proofit404](https://github.com/proofit404)\n* Fix schema for fields with `validator` decorator, fix [#375](https://github.com/samuelcolvin/pydantic/issues/375) by [@tiangolo](https://github.com/tiangolo)\n* Add `multiple_of` constraint to `ConstrainedDecimal`, `ConstrainedFloat`, `ConstrainedInt`\n  and their related types `condecimal`, `confloat`, and `conint` [#371](https://github.com/samuelcolvin/pydantic/issues/371), thanks [@StephenBrown2](https://github.com/StephenBrown2)\n* Deprecated `ignore_extra` and `allow_extra` Config fields in favor of `extra`, [#352](https://github.com/samuelcolvin/pydantic/issues/352) by [@liiight](https://github.com/liiight)\n* Add type annotations to all functions, test fully with mypy, [#373](https://github.com/samuelcolvin/pydantic/issues/373) by [@samuelcolvin](https://github.com/samuelcolvin)\n* fix for 'missing' error with `validate_all` or `validate_always`, [#381](https://github.com/samuelcolvin/pydantic/issues/381) by [@samuelcolvin](https://github.com/samuelcolvin)\n* Change the second/millisecond watershed for date/datetime parsing to `2e10`, [#385](https://github.com/samuelcolvin/pydantic/issues/385) by [@samuelcolvin](https://github.com/samuelcolvin)\n\n## v0.18.2 (2019-01-22)\n\n* Fix to schema generation with `Optional` fields, fix [#361](https://github.com/samuelcolvin/pydantic/issues/361) by [@samuelcolvin](https://github.com/samuelcolvin)\n\n## v0.18.1 (2019-01-17)\n\n* add `ConstrainedBytes` and `conbytes` types, [#315](https://github.com/samuelcolvin/pydantic/issues/315) [@Gr1N](https://github.com/Gr1N)\n* adding `MANIFEST.in` to include license in package `.tar.gz`, [#358](https://github.com/samuelcolvin/pydantic/issues/358) by [@samuelcolvin](https://github.com/samuelcolvin)\n\n## v0.18.0 (2019-01-13)\n\n* **breaking change**: don't call validators on keys of dictionaries, [#254](https://github.com/samuelcolvin/pydantic/issues/254) by [@samuelcolvin](https://github.com/samuelcolvin)\n* Fix validators with `always=True` when the default is `None` or the type is optional, also prevent\n  `whole` validators being called for sub-fields, fix [#132](https://github.com/samuelcolvin/pydantic/issues/132) by [@samuelcolvin](https://github.com/samuelcolvin)\n* improve documentation for settings priority and allow it to be easily changed, [#343](https://github.com/samuelcolvin/pydantic/issues/343) by [@samuelcolvin](https://github.com/samuelcolvin)\n* fix `ignore_extra=False` and `allow_population_by_alias=True`, fix [#257](https://github.com/samuelcolvin/pydantic/issues/257) by [@samuelcolvin](https://github.com/samuelcolvin)\n* **breaking change**: Set `BaseConfig` attributes `min_anystr_length` and `max_anystr_length` to\n  `None` by default, fix [#349](https://github.com/samuelcolvin/pydantic/issues/349) in [#350](https://github.com/samuelcolvin/pydantic/issues/350) by [@tiangolo](https://github.com/tiangolo)\n* add support for postponed annotations, [#348](https://github.com/samuelcolvin/pydantic/issues/348) by [@samuelcolvin](https://github.com/samuelcolvin)\n\n## v0.17.0 (2018-12-27)\n\n* fix schema for `timedelta` as number, [#325](https://github.com/samuelcolvin/pydantic/issues/325) by [@tiangolo](https://github.com/tiangolo)\n* prevent validators being called repeatedly after inheritance, [#327](https://github.com/samuelcolvin/pydantic/issues/327) by [@samuelcolvin](https://github.com/samuelcolvin)\n* prevent duplicate validator check in ipython, fix [#312](https://github.com/samuelcolvin/pydantic/issues/312) by [@samuelcolvin](https://github.com/samuelcolvin)\n* add \"Using Pydantic\" section to docs, [#323](https://github.com/samuelcolvin/pydantic/issues/323) by [@tiangolo](https://github.com/tiangolo) & [#326](https://github.com/samuelcolvin/pydantic/issues/326) by [@samuelcolvin](https://github.com/samuelcolvin)\n* fix schema generation for fields annotated as `: dict`, `: list`,\n  `: tuple` and `: set`, [#330](https://github.com/samuelcolvin/pydantic/issues/330) & [#335](https://github.com/samuelcolvin/pydantic/issues/335) by [@nkonin](https://github.com/nkonin)\n* add support for constrained strings as dict keys in schema, [#332](https://github.com/samuelcolvin/pydantic/issues/332) by [@tiangolo](https://github.com/tiangolo)\n* support for passing Config class in dataclasses decorator, [#276](https://github.com/samuelcolvin/pydantic/issues/276) by [@jarekkar](https://github.com/jarekkar)\n  (**breaking change**: this supersedes the `validate_assignment` argument with `config`)\n* support for nested dataclasses, [#334](https://github.com/samuelcolvin/pydantic/issues/334) by [@samuelcolvin](https://github.com/samuelcolvin)\n* better errors when getting an `ImportError` with `PyObject`, [#309](https://github.com/samuelcolvin/pydantic/issues/309) by [@samuelcolvin](https://github.com/samuelcolvin)\n* rename `get_validators` to `__get_validators__`, deprecation warning on use of old name, [#338](https://github.com/samuelcolvin/pydantic/issues/338) by [@samuelcolvin](https://github.com/samuelcolvin)\n* support `ClassVar` by excluding such attributes from fields, [#184](https://github.com/samuelcolvin/pydantic/issues/184) by [@samuelcolvin](https://github.com/samuelcolvin)\n\n## v0.16.1 (2018-12-10)\n\n* fix `create_model` to correctly use the passed `__config__`, [#320](https://github.com/samuelcolvin/pydantic/issues/320) by [@hugoduncan](https://github.com/hugoduncan)\n\n## v0.16.0 (2018-12-03)\n\n* **breaking change**: refactor schema generation to be compatible with JSON Schema and OpenAPI specs, [#308](https://github.com/samuelcolvin/pydantic/issues/308) by [@tiangolo](https://github.com/tiangolo)\n* add `schema` to `schema` module to generate top-level schemas from base models, [#308](https://github.com/samuelcolvin/pydantic/issues/308) by [@tiangolo](https://github.com/tiangolo)\n* add additional fields to `Schema` class to declare validation for `str` and numeric values, [#311](https://github.com/samuelcolvin/pydantic/issues/311) by [@tiangolo](https://github.com/tiangolo)\n* rename `_schema` to `schema` on fields, [#318](https://github.com/samuelcolvin/pydantic/issues/318) by [@samuelcolvin](https://github.com/samuelcolvin)\n* add `case_insensitive` option to `BaseSettings` `Config`, [#277](https://github.com/samuelcolvin/pydantic/issues/277) by [@jasonkuhrt](https://github.com/jasonkuhrt)\n\n## v0.15.0 (2018-11-18)\n\n* move codebase to use black, [#287](https://github.com/samuelcolvin/pydantic/issues/287) by [@samuelcolvin](https://github.com/samuelcolvin)\n* fix alias use in settings, [#286](https://github.com/samuelcolvin/pydantic/issues/286) by [@jasonkuhrt](https://github.com/jasonkuhrt) and [@samuelcolvin](https://github.com/samuelcolvin)\n* fix datetime parsing in `parse_date`, [#298](https://github.com/samuelcolvin/pydantic/issues/298) by [@samuelcolvin](https://github.com/samuelcolvin)\n* allow dataclass inheritance, fix [#293](https://github.com/samuelcolvin/pydantic/issues/293) by [@samuelcolvin](https://github.com/samuelcolvin)\n* fix `PyObject = None`, fix [#305](https://github.com/samuelcolvin/pydantic/issues/305) by [@samuelcolvin](https://github.com/samuelcolvin)\n* allow `Pattern` type, fix [#303](https://github.com/samuelcolvin/pydantic/issues/303) by [@samuelcolvin](https://github.com/samuelcolvin)\n\n## v0.14.0 (2018-10-02)\n\n* dataclasses decorator, [#269](https://github.com/samuelcolvin/pydantic/issues/269) by [@Gaunt](https://github.com/Gaunt) and [@samuelcolvin](https://github.com/samuelcolvin)\n\n## v0.13.1 (2018-09-21)\n\n* fix issue where int_validator doesn't cast a `bool` to an `int` [#264](https://github.com/samuelcolvin/pydantic/issues/264) by [@nphyatt](https://github.com/nphyatt)\n* add deep copy support for `BaseModel.copy()` [#249](https://github.com/samuelcolvin/pydantic/issues/249), [@gangefors](https://github.com/gangefors)\n\n## v0.13.0 (2018-08-25)\n\n* raise an exception if a field's name shadows an existing `BaseModel` attribute [#242](https://github.com/samuelcolvin/pydantic/issues/242)\n* add `UrlStr` and `urlstr` types [#236](https://github.com/samuelcolvin/pydantic/issues/236)\n* timedelta json encoding ISO8601 and total seconds, custom json encoders [#247](https://github.com/samuelcolvin/pydantic/issues/247), by [@cfkanesan](https://github.com/cfkanesan) and [@samuelcolvin](https://github.com/samuelcolvin)\n* allow `timedelta` objects as values for properties of type `timedelta` (matches `datetime` etc. behavior) [#247](https://github.com/samuelcolvin/pydantic/issues/247)\n\n## v0.12.1 (2018-07-31)\n\n* fix schema generation for fields defined using `typing.Any` [#237](https://github.com/samuelcolvin/pydantic/issues/237)\n\n## v0.12.0 (2018-07-31)\n\n* add `by_alias` argument in `.dict()` and `.json()` model methods [#205](https://github.com/samuelcolvin/pydantic/issues/205)\n* add Json type support [#214](https://github.com/samuelcolvin/pydantic/issues/214)\n* support tuples [#227](https://github.com/samuelcolvin/pydantic/issues/227)\n* major improvements and changes to schema [#213](https://github.com/samuelcolvin/pydantic/issues/213)\n\n## v0.11.2 (2018-07-05)\n\n* add `NewType` support [#115](https://github.com/samuelcolvin/pydantic/issues/115)\n* fix `list`, `set` & `tuple` validation [#225](https://github.com/samuelcolvin/pydantic/issues/225)\n* separate out `validate_model` method, allow errors to be returned along with valid values [#221](https://github.com/samuelcolvin/pydantic/issues/221)\n\n## v0.11.1 (2018-07-02)\n\n* support Python 3.7 [#216](https://github.com/samuelcolvin/pydantic/issues/216), thanks [@layday](https://github.com/layday)\n* Allow arbitrary types in model [#209](https://github.com/samuelcolvin/pydantic/issues/209), thanks [@oldPadavan](https://github.com/oldPadavan)\n\n## v0.11.0 (2018-06-28)\n\n* make `list`, `tuple` and `set` types stricter [#86](https://github.com/samuelcolvin/pydantic/issues/86)\n* **breaking change**: remove msgpack parsing [#201](https://github.com/samuelcolvin/pydantic/issues/201)\n* add `FilePath` and `DirectoryPath` types [#10](https://github.com/samuelcolvin/pydantic/issues/10)\n* model schema generation [#190](https://github.com/samuelcolvin/pydantic/issues/190)\n* JSON serialisation of models and schemas [#133](https://github.com/samuelcolvin/pydantic/issues/133)\n\n## v0.10.0 (2018-06-11)\n\n* add `Config.allow_population_by_alias` [#160](https://github.com/samuelcolvin/pydantic/issues/160), thanks [@bendemaree](https://github.com/bendemaree)\n* **breaking change**: new errors format [#179](https://github.com/samuelcolvin/pydantic/issues/179), thanks [@Gr1N](https://github.com/Gr1N)\n* **breaking change**: removed `Config.min_number_size` and `Config.max_number_size` [#183](https://github.com/samuelcolvin/pydantic/issues/183), thanks [@Gr1N](https://github.com/Gr1N)\n* **breaking change**: correct behaviour of `lt` and `gt` arguments to `conint` etc. [#188](https://github.com/samuelcolvin/pydantic/issues/188)\n  for the old behaviour use `le` and `ge` [#194](https://github.com/samuelcolvin/pydantic/issues/194), thanks [@jaheba](https://github.com/jaheba)\n* added error context and ability to redefine error message templates using `Config.error_msg_templates` [#183](https://github.com/samuelcolvin/pydantic/issues/183),\n  thanks [@Gr1N](https://github.com/Gr1N)\n* fix typo in validator exception [#150](https://github.com/samuelcolvin/pydantic/issues/150)\n* copy defaults to model values, so different models don't share objects [#154](https://github.com/samuelcolvin/pydantic/issues/154)\n\n## v0.9.1 (2018-05-10)\n\n* allow custom `get_field_config` on config classes [#159](https://github.com/samuelcolvin/pydantic/issues/159)\n* add `UUID1`, `UUID3`, `UUID4` and `UUID5` types [#167](https://github.com/samuelcolvin/pydantic/issues/167), thanks [@Gr1N](https://github.com/Gr1N)\n* modify some inconsistent docstrings and annotations [#173](https://github.com/samuelcolvin/pydantic/issues/173), thanks [@YannLuo](https://github.com/YannLuo)\n* fix type annotations for exotic types [#171](https://github.com/samuelcolvin/pydantic/issues/171), thanks [@Gr1N](https://github.com/Gr1N)\n* re-use type validators in exotic types [#171](https://github.com/samuelcolvin/pydantic/issues/171)\n* scheduled monthly requirements updates [#168](https://github.com/samuelcolvin/pydantic/issues/168)\n* add `Decimal`, `ConstrainedDecimal` and `condecimal` types [#170](https://github.com/samuelcolvin/pydantic/issues/170), thanks [@Gr1N](https://github.com/Gr1N)\n\n## v0.9.0 (2018-04-28)\n\n* tweak email-validator import error message [#145](https://github.com/samuelcolvin/pydantic/issues/145)\n* fix parse error of `parse_date()` and `parse_datetime()` when input is 0 [#144](https://github.com/samuelcolvin/pydantic/issues/144), thanks [@YannLuo](https://github.com/YannLuo)\n* add `Config.anystr_strip_whitespace` and `strip_whitespace` kwarg to `constr`,\n  by default values is `False` [#163](https://github.com/samuelcolvin/pydantic/issues/163), thanks [@Gr1N](https://github.com/Gr1N)\n* add `ConstrainedFloat`, `confloat`, `PositiveFloat` and `NegativeFloat` types [#166](https://github.com/samuelcolvin/pydantic/issues/166), thanks [@Gr1N](https://github.com/Gr1N)\n\n## v0.8.0 (2018-03-25)\n\n* fix type annotation for `inherit_config` [#139](https://github.com/samuelcolvin/pydantic/issues/139)\n* **breaking change**: check for invalid field names in validators [#140](https://github.com/samuelcolvin/pydantic/issues/140)\n* validate attributes of parent models [#141](https://github.com/samuelcolvin/pydantic/issues/141)\n* **breaking change**: email validation now uses\n  [email-validator](https://github.com/JoshData/python-email-validator) [#142](https://github.com/samuelcolvin/pydantic/issues/142)\n\n## v0.7.1 (2018-02-07)\n\n* fix bug with `create_model` modifying the base class\n\n## v0.7.0 (2018-02-06)\n\n* added compatibility with abstract base classes (ABCs) [#123](https://github.com/samuelcolvin/pydantic/issues/123)\n* add `create_model` method [#113](https://github.com/samuelcolvin/pydantic/issues/113) [#125](https://github.com/samuelcolvin/pydantic/issues/125)\n* **breaking change**: rename `.config` to `.__config__` on a model\n* **breaking change**: remove deprecated `.values()` on a model, use `.dict()` instead\n* remove use of `OrderedDict` and use simple dict [#126](https://github.com/samuelcolvin/pydantic/issues/126)\n* add `Config.use_enum_values` [#127](https://github.com/samuelcolvin/pydantic/issues/127)\n* add wildcard validators of the form `@validate('*')` [#128](https://github.com/samuelcolvin/pydantic/issues/128)\n\n## v0.6.4 (2018-02-01)\n\n* allow python date and times objects [#122](https://github.com/samuelcolvin/pydantic/issues/122)\n\n## v0.6.3 (2017-11-26)\n\n* fix direct install without `README.rst` present\n\n## v0.6.2 (2017-11-13)\n\n* errors for invalid validator use\n* safer check for complex models in `Settings`\n\n## v0.6.1 (2017-11-08)\n\n* prevent duplicate validators, [#101](https://github.com/samuelcolvin/pydantic/issues/101)\n* add `always` kwarg to validators, [#102](https://github.com/samuelcolvin/pydantic/issues/102)\n\n## v0.6.0 (2017-11-07)\n\n* assignment validation [#94](https://github.com/samuelcolvin/pydantic/issues/94), thanks petroswork!\n* JSON in environment variables for complex types, [#96](https://github.com/samuelcolvin/pydantic/issues/96)\n* add `validator` decorators for complex validation, [#97](https://github.com/samuelcolvin/pydantic/issues/97)\n* depreciate `values(...)` and replace with `.dict(...)`, [#99](https://github.com/samuelcolvin/pydantic/issues/99)\n\n## v0.5.0 (2017-10-23)\n\n* add `UUID` validation [#89](https://github.com/samuelcolvin/pydantic/issues/89)\n* remove `index` and `track` from error object (json) if they're null [#90](https://github.com/samuelcolvin/pydantic/issues/90)\n* improve the error text when a list is provided rather than a dict [#90](https://github.com/samuelcolvin/pydantic/issues/90)\n* add benchmarks table to docs [#91](https://github.com/samuelcolvin/pydantic/issues/91)\n\n## v0.4.0 (2017-07-08)\n\n* show length in string validation error\n* fix aliases in config during inheritance [#55](https://github.com/samuelcolvin/pydantic/issues/55)\n* simplify error display\n* use unicode ellipsis in `truncate`\n* add `parse_obj`, `parse_raw` and `parse_file` helper functions [#58](https://github.com/samuelcolvin/pydantic/issues/58)\n* switch annotation only fields to come first in fields list not last\n\n## v0.3.0 (2017-06-21)\n\n* immutable models via `config.allow_mutation = False`, associated cleanup and performance improvement [#44](https://github.com/samuelcolvin/pydantic/issues/44)\n* immutable helper methods `construct()` and `copy()` [#53](https://github.com/samuelcolvin/pydantic/issues/53)\n* allow pickling of models [#53](https://github.com/samuelcolvin/pydantic/issues/53)\n* `setattr` is removed as `__setattr__` is now intelligent [#44](https://github.com/samuelcolvin/pydantic/issues/44)\n* `raise_exception` removed, Models now always raise exceptions [#44](https://github.com/samuelcolvin/pydantic/issues/44)\n* instance method validators removed\n* django-restful-framework benchmarks added [#47](https://github.com/samuelcolvin/pydantic/issues/47)\n* fix inheritance bug [#49](https://github.com/samuelcolvin/pydantic/issues/49)\n* make str type stricter so list, dict etc are not coerced to strings. [#52](https://github.com/samuelcolvin/pydantic/issues/52)\n* add `StrictStr` which only always strings as input [#52](https://github.com/samuelcolvin/pydantic/issues/52)\n\n## v0.2.1 (2017-06-07)\n\n* pypi and travis together messed up the deploy of `v0.2` this should fix it\n\n## v0.2.0 (2017-06-07)\n\n* **breaking change**: `values()` on a model is now a method not a property,\n  takes `include` and `exclude` arguments\n* allow annotation only fields to support mypy\n* add pretty `to_string(pretty=True)` method for models\n\n## v0.1.0 (2017-06-03)\n\n* add docs\n* add history\n\n\n",
          "name": "pydantic",
          "author": [
            {
              "type": "Person",
              "name": "Samuel Colvin",
              "email": [
                "s@muelcolvin.com"
              ],
              "familyName": [
                "Colvin"
              ],
              "givenName": [
                "Samuel"
              ]
            }
          ],
          "license": "MIT",
          "version": "==1.8.1",
          "codeRepository": "https://pypi.org/project/pydantic/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python",
          "applicationCategory": [
            "Internet",
            "Software Development"
          ],
          "applicationSubCategory": [
            "Libraries"
          ],
          "operatingSystem": [
            {
              "type": "OperatingSystem",
              "name": "Linux"
            },
            {
              "type": "OperatingSystem",
              "name": "macOS"
            },
            {
              "type": "OperatingSystem",
              "name": "Unix"
            }
          ]
        },
        {
          "type": "SoftwarePackage",
          "description": "[![Build Status](https://www.travis-ci.com/pydot/pydot.svg?branch=master)](https://www.travis-ci.com/pydot/pydot)\n[![PyPI](https://img.shields.io/pypi/v/pydot.svg)](https://pypi.org/project/pydot/)\n\n\nAbout\n=====\n\n`pydot`:\n\n  - is an interface to [Graphviz][1]\n  - can parse and dump into the [DOT language][2] used by GraphViz,\n  - is written in pure Python,\n\nand [`networkx`][3] can convert its graphs to `pydot`.\n\nDevelopment occurs at [GitHub][11], where you can report issues and\ncontribute code.\n\n\nExamples\n========\n\nThe examples here will show you the most common input, editing and\noutput methods.\n\nInput\n-----\n\nNo matter what you want to do with `pydot`, it will need some input to\nstart with. Here are 3 common options:\n\n1. Import a graph from an existing DOT-file.\n\n    Use this method if you already have a DOT-file describing a graph,\n    for example as output of another program. Let's say you already\n    have this `example.dot` (based on an [example from Wikipedia][12]):\n\n    ```dot\n    graph my_graph {\n       bgcolor=\"yellow\";\n       a [label=\"Foo\"];\n       b [shape=circle];\n       a -- b -- c [color=blue];\n    }\n    ```\n\n    Just read the graph from the DOT-file:\n\n    ```python\n    import pydot\n\n    graphs = pydot.graph_from_dot_file('example.dot')\n    graph = graphs[0]\n    ```\n\n2. or: Parse a graph from an existing DOT-string.\n\n    Use this method if you already have a DOT-string describing a\n    graph in a Python variable:\n\n    ```python\n    import pydot\n\n    dot_string = \"\"\"graph my_graph {\n        bgcolor=\"yellow\";\n        a [label=\"Foo\"];\n        b [shape=circle];\n        a -- b -- c [color=blue];\n    }\"\"\"\n\n    graphs = pydot.graph_from_dot_data(dot_string)\n    graph = graphs[0]\n    ```\n\n3. or: Create a graph from scratch using pydot objects.\n\n    Now this is where the cool stuff starts. Use this method if you\n    want to build new graphs from Python.\n\n    ```python\n    import pydot\n\n    graph = pydot.Dot('my_graph', graph_type='graph', bgcolor='yellow')\n\n    # Add nodes\n    my_node = pydot.Node('a', label='Foo')\n    graph.add_node(my_node)\n    # Or, without using an intermediate variable:\n    graph.add_node(pydot.Node('b', shape='circle'))\n\n    # Add edges\n    my_edge = pydot.Edge('a', 'b', color='blue')\n    graph.add_edge(my_edge)\n    # Or, without using an intermediate variable:\n    graph.add_edge(pydot.Edge('b', 'c', color='blue'))\n    ```\n\n    Imagine using these basic building blocks from your Python program\n    to dynamically generate a graph. For example, start out with a\n    basic `pydot.Dot` graph object, then loop through your data while\n    adding nodes and edges. Use values from your data as labels, to\n    determine shapes, edges and so forth. This way, you can easily\n    build visualizations of thousands of interconnected items.\n\n4. or: Convert a NetworkX graph to a pydot graph.\n\n    NetworkX has conversion methods for pydot graphs:\n\n    ```python\n    import networkx\n    import pydot\n\n    # See NetworkX documentation on how to build a NetworkX graph.\n\n    graph = networkx.drawing.nx_pydot.to_pydot(my_networkx_graph)\n    ```\n\nEdit\n----\n\nYou can now further manipulate your graph using pydot methods:\n\n- Add further nodes and edges:\n\n  ```python\n  graph.add_edge(pydot.Edge('b', 'd', style='dotted'))\n  ```\n\n- Edit attributes of graph, nodes and edges:\n\n  ```python\n  graph.set_bgcolor('lightyellow')\n  graph.get_node('b')[0].set_shape('box')\n  ```\n\nOutput\n------\n\nHere are 3 different output options:\n\n1. Generate an image.\n\n    To generate an image of the graph, use one of the `create_*()` or\n    `write_*()` methods.\n\n    - If you need to further process the output in Python, the\n      `create_*` methods will get you a Python bytes object:\n\n      ```python\n      output_graphviz_svg = graph.create_svg()\n      ```\n\n    - If instead you just want to save the image to a file, use one of\n      the `write_*` methods:\n\n      ```python\n      graph.write_png('output.png')\n      ```\n\n2. Retrieve the DOT string.\n\n    There are two different DOT strings you can retrieve:\n\n    - The \"raw\" pydot DOT: This is generated the fastest and will\n      usually still look quite similar to the DOT you put in. It is\n      generated by pydot itself, without calling Graphviz.\n\n      ```python\n      # As a string:\n      output_raw_dot = graph.to_string()\n      # Or, save it as a DOT-file:\n      graph.write_raw('output_raw.dot')\n      ```\n\n    - The Graphviz DOT: You can use it to check how Graphviz lays out\n      the graph before it produces an image. It is generated by\n      Graphviz.\n\n      ```python\n      # As a bytes literal:\n      output_graphviz_dot = graph.create_dot()\n      # Or, save it as a DOT-file:\n      graph.write_dot('output_graphviz.dot')\n      ```\n\n3. Convert to a NetworkX graph.\n\n    Here as well, NetworkX has a conversion method for pydot graphs:\n\n    ```python\n    my_networkx_graph = networkx.drawing.nx_pydot.from_pydot(graph)\n    ```\n\nMore help\n---------\n\nFor more help, see the docstrings of the various pydot objects and\nmethods. For example, `help(pydot)`, `help(pydot.Graph)` and\n`help(pydot.Dot.write)`.\n\nMore [documentation contributions welcome][13].\n\n\nInstallation\n============\n\nFrom [PyPI][4] using [`pip`][5]:\n\n`pip install pydot`\n\nFrom source:\n\n`python setup.py install`\n\n\nDependencies\n============\n\n- [`pyparsing`][6]: used only for *loading* DOT files,\n  installed automatically during `pydot` installation.\n\n- GraphViz: used to render graphs as PDF, PNG, SVG, etc.\n  Should be installed separately, using your system's\n  [package manager][7], something similar (e.g., [MacPorts][8]),\n  or from [its source][9].\n\n\nLicense\n=======\n\nDistributed under an [MIT license][10].\n\n\nContacts\n========\n\nMaintainers:\n- Sebastian Kalinowski <sebastian@kalinowski.eu> (GitHub: @prmtl)\n- Peter Nowee <peter@peternowee.com> (GitHub: @peternowee)\n\nOriginal author: Ero Carrera <ero.carrera@gmail.com>\n\n\n[1]: https://www.graphviz.org\n[2]: https://en.wikipedia.org/wiki/DOT_%28graph_description_language%29\n[3]: https://github.com/networkx/networkx\n[4]: https://pypi.python.org/pypi\n[5]: https://github.com/pypa/pip\n[6]: https://github.com/pyparsing/pyparsing\n[7]: https://en.wikipedia.org/wiki/Package_manager\n[8]: https://www.macports.org\n[9]: https://gitlab.com/graphviz/graphviz\n[10]: https://github.com/pydot/pydot/blob/master/LICENSE\n[11]: https://github.com/pydot/pydot\n[12]: https://en.wikipedia.org/w/index.php?title=DOT_(graph_description_language)&oldid=1003001464#Attributes\n[13]: https://github.com/pydot/pydot/issues/130\n\n\n",
          "name": "pydot",
          "author": [
            {
              "type": "Person",
              "name": "Ero Carrera",
              "email": [
                "ero.carrera@gmail.com"
              ],
              "familyName": [
                "Carrera"
              ],
              "givenName": [
                "Ero"
              ]
            }
          ],
          "keywords": "graphviz dot graphs visualization",
          "license": "MIT",
          "codeRepository": "https://pypi.org/project/pydot/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python",
          "applicationCategory": [
            "Scientific/Engineering",
            "Software Development"
          ],
          "applicationSubCategory": [
            "Visualization",
            "Libraries"
          ]
        },
        {
          "type": "SoftwarePackage",
          "description": "Pygments\n~~~~~~~~\n\nPygments is a syntax highlighting package written in Python.\n\nIt is a generic syntax highlighter suitable for use in code hosting, forums,\nwikis or other applications that need to prettify source code.  Highlights\nare:\n\n* a wide range of over 500 languages and other text formats is supported\n* special attention is paid to details, increasing quality by a fair amount\n* support for new languages and formats are added easily\n* a number of output formats, presently HTML, LaTeX, RTF, SVG, all image\n  formats that PIL supports and ANSI sequences\n* it is usable as a command-line tool and as a library\n\nCopyright 2006-2021 by the Pygments team, see ``AUTHORS``.\nLicensed under the BSD, see ``LICENSE`` for details.\n\n",
          "name": "Pygments",
          "author": [
            {
              "type": "Person",
              "name": "Georg Brandl",
              "email": [
                "georg@python.org"
              ],
              "familyName": [
                "Brandl"
              ],
              "givenName": [
                "Georg"
              ]
            }
          ],
          "keywords": "syntax highlighting",
          "license": "BSD License",
          "codeRepository": "https://pypi.org/project/Pygments/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python",
          "applicationCategory": [
            "Text Processing",
            "Utilities"
          ],
          "applicationSubCategory": [
            "Filters"
          ]
        },
        {
          "type": "SoftwarePackage",
          "description": "PyGraphviz\n==========\n\n.. image:: https://github.com/pygraphviz/pygraphviz/workflows/test/badge.svg?branch=master\n  :target: https://github.com/pygraphviz/pygraphviz/actions?query=workflow%3Atest+branch%3Amaster\n\n.. image:: https://codecov.io/gh/pygraphviz/pygraphviz/branch/master/graph/badge.svg\n   :target: https://app.codecov.io/gh/pygraphviz/pygraphviz/branch/master\n\n\nPyGraphviz is a Python interface to the Graphviz graph layout and\nvisualization package.\nWith PyGraphviz you can create, edit, read, write, and draw graphs using\nPython to access the Graphviz graph data structure and layout algorithms.\nPyGraphviz provides a similar programming interface to NetworkX\n(https://networkx.org). \n\n- **Website (including documentation):** https://pygraphviz.github.io\n- **Mailing list:** https://groups.google.com/forum/#!forum/pygraphviz-discuss\n- **Source:** https://github.com/pygraphviz/pygraphviz\n- **Bug reports:** https://github.com/pygraphviz/pygraphviz/issues\n\nSimple example\n--------------\n\n.. code:: python\n\n    >>> import pygraphviz as pgv\n    >>> G = pgv.AGraph()\n    >>> G.add_node(\"a\")\n    >>> G.add_edge(\"b\", \"c\")\n    >>> print(G)\n    strict graph \"\" {\n            a;\n            b -- c;\n    }\n\nInstall\n-------\n\nPyGraphviz requires Graphviz.\nPlease see `INSTALL.rst` for details.\n\nLicense\n-------\n\nReleased under the 3-Clause BSD license (see ``LICENSE``)::\n\n  Copyright (C) 2006-2021 PyGraphviz Developers\n  Aric Hagberg <aric.hagberg@gmail.gov>\n  Dan Schult <dschult@colgate.edu>\n  Manos Renieris",
          "name": "pygraphviz",
          "author": [
            {
              "type": "Person",
              "name": "Aric Hagberg",
              "email": [
                "aric.hagberg@gmail.com"
              ],
              "familyName": [
                "Hagberg"
              ],
              "givenName": [
                "Aric"
              ]
            }
          ],
          "keywords": "Networks,Graph Visualization,network,graph,graph drawing",
          "license": "BSD",
          "codeRepository": "https://pypi.org/project/pygraphviz/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python",
          "applicationCategory": [
            "Scientific/Engineering",
            "Software Development"
          ],
          "applicationSubCategory": [
            "Information Analysis",
            "Mathematics",
            "Visualization",
            "Libraries"
          ]
        },
        {
          "type": "SoftwarePackage",
          "description": "========================================================\npyOpenSSL -- A Python wrapper around the OpenSSL library\n========================================================\n\n.. image:: https://readthedocs.org/projects/pyopenssl/badge/?version=stable\n   :target: https://pyopenssl.org/en/stable/\n   :alt: Stable Docs\n\n.. image:: https://travis-ci.com/pyca/pyopenssl.svg?branch=master\n   :target: https://travis-ci.com/pyca/pyopenssl\n   :alt: Build status\n\n.. image:: https://codecov.io/github/pyca/pyopenssl/branch/master/graph/badge.svg\n   :target: https://codecov.io/github/pyca/pyopenssl\n   :alt: Test coverage\n\n**Note:** The Python Cryptographic Authority **strongly suggests** the use of `pyca/cryptography`_\nwhere possible. If you are using pyOpenSSL for anything other than making a TLS connection \n**you should move to cryptography and drop your pyOpenSSL dependency**.\n\nHigh-level wrapper around a subset of the OpenSSL library. Includes\n\n* ``SSL.Connection`` objects, wrapping the methods of Python's portable sockets\n* Callbacks written in Python\n* Extensive error-handling mechanism, mirroring OpenSSL's error codes\n\n... and much more.\n\nYou can find more information in the documentation_.\nDevelopment takes place on GitHub_.\n\n\nDiscussion\n==========\n\nIf you run into bugs, you can file them in our `issue tracker`_.\n\nWe maintain a cryptography-dev_ mailing list for both user and development discussions.\n\nYou can also join ``#cryptography-dev`` on Freenode to ask questions or get involved.\n\n\n.. _documentation: https://pyopenssl.org/\n.. _`issue tracker`: https://github.com/pyca/pyopenssl/issues\n.. _cryptography-dev: https://mail.python.org/mailman/listinfo/cryptography-dev\n.. _GitHub: https://github.com/pyca/pyopenssl\n.. _`pyca/cryptography`: https://github.com/pyca/cryptography\n\n\nRelease Information\n===================\n\n20.0.1 (2020-12-15)\n-------------------\n\nBackward-incompatible changes:\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nDeprecations:\n^^^^^^^^^^^^^\n\nChanges:\n^^^^^^^^\n\n- Fixed compatibility with OpenSSL 1.1.0.\n\n20.0.0 (2020-11-27)\n-------------------\n\n\nBackward-incompatible changes:\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n- The minimum ``cryptography`` version is now 3.2.\n- Remove deprecated ``OpenSSL.tsafe`` module.\n- Removed deprecated ``OpenSSL.SSL.Context.set_npn_advertise_callback``, ``OpenSSL.SSL.Context.set_npn_select_callback``, and ``OpenSSL.SSL.Connection.get_next_proto_negotiated``.\n- Drop support for Python 3.4\n- Drop support for OpenSSL 1.0.1 and 1.0.2\n\nDeprecations:\n^^^^^^^^^^^^^\n\n- Deprecated ``OpenSSL.crypto.loads_pkcs7`` and ``OpenSSL.crypto.loads_pkcs12``.\n\nChanges:\n^^^^^^^^\n\n- Added a new optional ``chain`` parameter to ``OpenSSL.crypto.X509StoreContext()``\n  where additional untrusted certificates can be specified to help chain building.\n  `#948 <https://github.com/pyca/pyopenssl/pull/948>`_\n- Added ``OpenSSL.crypto.X509Store.load_locations`` to set trusted\n  certificate file bundles and/or directories for verification.\n  `#943 <https://github.com/pyca/pyopenssl/pull/943>`_\n- Added ``Context.set_keylog_callback`` to log key material.\n  `#910 <https://github.com/pyca/pyopenssl/pull/910>`_\n- Added ``OpenSSL.SSL.Connection.get_verified_chain`` to retrieve the\n  verified certificate chain of the peer.\n  `#894 <https://github.com/pyca/pyopenssl/pull/894>`_.\n- Make verification callback optional in ``Context.set_verify``.\n  If omitted, OpenSSL's default verification is used.\n  `#933 <https://github.com/pyca/pyopenssl/pull/933>`_\n- Fixed a bug that could truncate or cause a zero-length key error due to a\n  null byte in private key passphrase in ``OpenSSL.crypto.load_privatekey``\n  and ``OpenSSL.crypto.dump_privatekey``.\n  `#947 <https://github.com/pyca/pyopenssl/pull/947>`_\n\n19.1.0 (2019-11-18)\n-------------------\n\n\nBackward-incompatible changes:\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n- Removed deprecated ``ContextType``, ``ConnectionType``, ``PKeyType``, ``X509NameType``, ``X509ReqType``, ``X509Type``, ``X509StoreType``, ``CRLType``, ``PKCS7Type``, ``PKCS12Type``, and ``NetscapeSPKIType`` aliases.\n  Use the classes without the ``Type`` suffix instead.\n  `#814 <https://github.com/pyca/pyopenssl/pull/814>`_\n- The minimum ``cryptography`` version is now 2.8 due to issues on macOS with a transitive dependency.\n  `#875 <https://github.com/pyca/pyopenssl/pull/875>`_\n\nDeprecations:\n^^^^^^^^^^^^^\n\n- Deprecated ``OpenSSL.SSL.Context.set_npn_advertise_callback``, ``OpenSSL.SSL.Context.set_npn_select_callback``, and ``OpenSSL.SSL.Connection.get_next_proto_negotiated``.\n  ALPN should be used instead.\n  `#820 <https://github.com/pyca/pyopenssl/pull/820>`_\n\n\nChanges:\n^^^^^^^^\n\n- Support ``bytearray`` in ``SSL.Connection.send()`` by using cffi's from_buffer.\n  `#852 <https://github.com/pyca/pyopenssl/pull/852>`_\n- The ``OpenSSL.SSL.Context.set_alpn_select_callback`` can return a new ``NO_OVERLAPPING_PROTOCOLS`` sentinel value\n  to allow a TLS handshake to complete without an application protocol.\n\n`Full changelog <https://pyopenssl.org/en/stable/changelog.html>`_.\n\n\n\n",
          "name": "pyOpenSSL",
          "author": [
            {
              "type": "Person",
              "name": "The pyOpenSSL",
              "familyName": [
                "pyOpenSSL"
              ],
              "givenName": [
                "The"
              ]
            }
          ],
          "license": "Apache License, Version 2.0",
          "codeRepository": "https://pypi.org/project/pyOpenSSL/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python",
          "applicationCategory": [
            "Security",
            "Software Development",
            "System"
          ],
          "applicationSubCategory": [
            "Cryptography",
            "Libraries",
            "Networking"
          ],
          "operatingSystem": [
            {
              "type": "OperatingSystem",
              "name": "macOS"
            },
            {
              "type": "OperatingSystem",
              "name": "Windows"
            }
          ]
        },
        {
          "type": "SoftwarePackage",
          "description": "PyParsing -- A Python Parsing Module\n====================================\n\n|Build Status|\n\nIntroduction\n============\n\nThe pyparsing module is an alternative approach to creating and\nexecuting simple grammars, vs. the traditional lex/yacc approach, or the\nuse of regular expressions. The pyparsing module provides a library of\nclasses that client code uses to construct the grammar directly in\nPython code.\n\n*[Since first writing this description of pyparsing in late 2003, this\ntechnique for developing parsers has become more widespread, under the\nname Parsing Expression Grammars - PEGs. See more information on PEGs at*\nhttps://en.wikipedia.org/wiki/Parsing_expression_grammar *.]*\n\nHere is a program to parse ``\"Hello, World!\"`` (or any greeting of the form\n``\"salutation, addressee!\"``):\n\n.. code:: python\n\n    from pyparsing import Word, alphas\n    greet = Word(alphas) + \",\" + Word(alphas) + \"!\"\n    hello = \"Hello, World!\"\n    print(hello, \"->\", greet.parseString(hello))\n\nThe program outputs the following::\n\n    Hello, World! -> ['Hello', ',', 'World', '!']\n\nThe Python representation of the grammar is quite readable, owing to the\nself-explanatory class names, and the use of '+', '|' and '^' operator\ndefinitions.\n\nThe parsed results returned from ``parseString()`` can be accessed as a\nnested list, a dictionary, or an object with named attributes.\n\nThe pyparsing module handles some of the problems that are typically\nvexing when writing text parsers:\n\n- extra or missing whitespace (the above program will also handle ``\"Hello,World!\"``, ``\"Hello , World !\"``, etc.)\n- quoted strings\n- embedded comments\n\nThe examples directory includes a simple SQL parser, simple CORBA IDL\nparser, a config file parser, a chemical formula parser, and a four-\nfunction algebraic notation parser, among many others.\n\nDocumentation\n=============\n\nThere are many examples in the online docstrings of the classes\nand methods in pyparsing. You can find them compiled into online docs\nat https://pyparsing-docs.readthedocs.io/en/latest/. Additional\ndocumentation resources and project info are listed in the online\nGitHub wiki, at https://github.com/pyparsing/pyparsing/wiki. An\nentire directory of examples is at\nhttps://github.com/pyparsing/pyparsing/tree/master/examples.\n\nLicense\n=======\n\nMIT License. See header of pyparsing.py\n\nHistory\n=======\n\nSee CHANGES file.\n\n.. |Build Status| image:: https://travis-ci.org/pyparsing/pyparsing.svg?branch=master\n   :target: https://travis-ci.org/pyparsing/pyparsing\n\n\n",
          "name": "pyparsing",
          "author": [
            {
              "type": "Person",
              "name": "Paul McGuire",
              "email": [
                "ptmcg@users.sourceforge.net"
              ],
              "familyName": [
                "McGuire"
              ],
              "givenName": [
                "Paul"
              ]
            }
          ],
          "license": "MIT License",
          "version": "==2.4.7",
          "codeRepository": "https://pypi.org/project/pyparsing/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python"
        },
        {
          "type": "SoftwarePackage",
          "description": "Pyrsistent\n==========\n.. image:: https://travis-ci.org/tobgu/pyrsistent.svg?branch=master\n    :target: https://travis-ci.org/tobgu/pyrsistent\n\n.. image:: https://badge.fury.io/py/pyrsistent.svg\n    :target: https://badge.fury.io/py/pyrsistent\n\n.. image:: https://coveralls.io/repos/tobgu/pyrsistent/badge.svg?branch=master&service=github\n    :target: https://coveralls.io/github/tobgu/pyrsistent?branch=master\n\n\n.. _Pyrthon: https://www.github.com/tobgu/pyrthon/\n\nPyrsistent is a number of persistent collections (by some referred to as functional data structures). Persistent in\nthe sense that they are immutable.\n\nAll methods on a data structure that would normally mutate it instead return a new copy of the structure containing the\nrequested updates. The original structure is left untouched.\n\nThis will simplify the reasoning about what a program does since no hidden side effects ever can take place to these\ndata structures. You can rest assured that the object you hold a reference to will remain the same throughout its\nlifetime and need not worry that somewhere five stack levels below you in the darkest corner of your application\nsomeone has decided to remove that element that you expected to be there.\n\nPyrsistent is influenced by persistent data structures such as those found in the standard library of Clojure. The\ndata structures are designed to share common elements through path copying.\nIt aims at taking these concepts and make them as pythonic as possible so that they can be easily integrated into any python\nprogram without hassle.\n\nIf you want to go all in on persistent data structures and use literal syntax to define them in your code rather\nthan function calls check out Pyrthon_.\n\nExamples\n--------\n.. _Sequence: collections_\n.. _Hashable: collections_\n.. _Mapping: collections_\n.. _Mappings: collections_\n.. _Set: collections_\n.. _collections: https://docs.python.org/3/library/collections.abc.html\n.. _documentation: http://pyrsistent.readthedocs.org/\n\nThe collection types and key features currently implemented are:\n\n* PVector_, similar to a python list\n* PMap_, similar to dict\n* PSet_, similar to set\n* PRecord_, a PMap on steroids with fixed fields, optional type and invariant checking and much more\n* PClass_, a Python class fixed fields, optional type and invariant checking and much more\n* `Checked collections`_, PVector, PMap and PSet with optional type and invariance checks and more\n* PBag, similar to collections.Counter\n* PList, a classic singly linked list\n* PDeque, similar to collections.deque\n* Immutable object type (immutable) built on the named tuple\n* freeze_ and thaw_ functions to convert between pythons standard collections and pyrsistent collections.\n* Flexible transformations_ of arbitrarily complex structures built from PMaps and PVectors.\n\nBelow are examples of common usage patterns for some of the structures and features. More information and\nfull documentation for all data structures is available in the documentation_.\n\n.. _PVector:\n\nPVector\n~~~~~~~\nWith full support for the Sequence_ protocol PVector is meant as a drop in replacement to the built in list from a readers\npoint of view. Write operations of course differ since no in place mutation is done but naming should be in line\nwith corresponding operations on the built in list.\n\nSupport for the Hashable_ protocol also means that it can be used as key in Mappings_.\n\nAppends are amortized O(1). Random access and insert is log32(n) where n is the size of the vector.\n\n.. code:: python\n\n    >>> from pyrsistent import v, pvector\n\n    # No mutation of vectors once created, instead they\n    # are \"evolved\" leaving the original untouched\n    >>> v1 = v(1, 2, 3)\n    >>> v2 = v1.append(4)\n    >>> v3 = v2.set(1, 5)\n    >>> v1\n    pvector([1, 2, 3])\n    >>> v2\n    pvector([1, 2, 3, 4])\n    >>> v3\n    pvector([1, 5, 3, 4])\n\n    # Random access and slicing\n    >>> v3[1]\n    5\n    >>> v3[1:3]\n    pvector([5, 3])\n\n    # Iteration\n    >>> list(x + 1 for x in v3)\n    [2, 6, 4, 5]\n    >>> pvector(2 * x for x in range(3))\n    pvector([0, 2, 4])\n\n.. _PMap:\n\nPMap\n~~~~\nWith full support for the Mapping_ protocol PMap is meant as a drop in replacement to the built in dict from a readers point\nof view. Support for the Hashable_ protocol also means that it can be used as key in other Mappings_.\n\nRandom access and insert is log32(n) where n is the size of the map.\n\n.. code:: python\n\n    >>> from pyrsistent import m, pmap, v\n\n    # No mutation of maps once created, instead they are\n    # \"evolved\" leaving the original untouched\n    >>> m1 = m(a=1, b=2)\n    >>> m2 = m1.set('c', 3)\n    >>> m3 = m2.set('a', 5)\n    >>> m1\n    pmap({'a': 1, 'b': 2})\n    >>> m2\n    pmap({'a': 1, 'c': 3, 'b': 2})\n    >>> m3\n    pmap({'a': 5, 'c': 3, 'b': 2})\n    >>> m3['a']\n    5\n\n    # Evolution of nested persistent structures\n    >>> m4 = m(a=5, b=6, c=v(1, 2))\n    >>> m4.transform(('c', 1), 17)\n    pmap({'a': 5, 'c': pvector([1, 17]), 'b': 6})\n    >>> m5 = m(a=1, b=2)\n\n    # Evolve by merging with other mappings\n    >>> m5.update(m(a=2, c=3), {'a': 17, 'd': 35})\n    pmap({'a': 17, 'c': 3, 'b': 2, 'd': 35})\n    >>> pmap({'x': 1, 'y': 2}) + pmap({'y': 3, 'z': 4})\n    pmap({'y': 3, 'x': 1, 'z': 4})\n\n    # Dict-like methods to convert to list and iterate\n    >>> m3.items()\n    pvector([('a', 5), ('c', 3), ('b', 2)])\n    >>> list(m3)\n    ['a', 'c', 'b']\n\n.. _PSet:\n\nPSet\n~~~~\nWith full support for the Set_ protocol PSet is meant as a drop in replacement to the built in set from a readers point\nof view. Support for the Hashable_ protocol also means that it can be used as key in Mappings_.\n\nRandom access and insert is log32(n) where n is the size of the set.\n\n.. code:: python\n\n    >>> from pyrsistent import s\n\n    # No mutation of sets once created, you know the story...\n    >>> s1 = s(1, 2, 3, 2)\n    >>> s2 = s1.add(4)\n    >>> s3 = s1.remove(1)\n    >>> s1\n    pset([1, 2, 3])\n    >>> s2\n    pset([1, 2, 3, 4])\n    >>> s3\n    pset([2, 3])\n\n    # Full support for set operations\n    >>> s1 | s(3, 4, 5)\n    pset([1, 2, 3, 4, 5])\n    >>> s1 & s(3, 4, 5)\n    pset([3])\n    >>> s1 < s2\n    True\n    >>> s1 < s(3, 4, 5)\n    False\n\n.. _PRecord:\n\nPRecord\n~~~~~~~\nA PRecord is a PMap with a fixed set of specified fields. Records are declared as python classes inheriting\nfrom PRecord. Because it is a PMap it has full support for all Mapping methods such as iteration and element\naccess using subscript notation.\n\n.. code:: python\n\n    >>> from pyrsistent import PRecord, field\n    >>> class ARecord(PRecord):\n    ...     x = field()\n    ...\n    >>> r = ARecord(x=3)\n    >>> r\n    ARecord(x=3)\n    >>> r.x\n    3\n    >>> r.set(x=2)\n    ARecord(x=2)\n    >>> r.set(y=2)\n    Traceback (most recent call last):\n    AttributeError: 'y' is not among the specified fields for ARecord\n\nType information\n****************\nIt is possible to add type information to the record to enforce type checks. Multiple allowed types can be specified\nby providing an iterable of types.\n\n.. code:: python\n\n    >>> class BRecord(PRecord):\n    ...     x = field(type=int)\n    ...     y = field(type=(int, type(None)))\n    ...\n    >>> BRecord(x=3, y=None)\n    BRecord(y=None, x=3)\n    >>> BRecord(x=3.0)\n    Traceback (most recent call last):\n    PTypeError: Invalid type for field BRecord.x, was float\n\n\nCustom types (classes) that are iterable should be wrapped in a tuple to prevent their\nmembers being added to the set of valid types.  Although Enums in particular are now\nsupported without wrapping, see #83 for more information.\n\nMandatory fields\n****************\nFields are not mandatory by default but can be specified as such. If fields are missing an\n*InvariantException* will be thrown which contains information about the missing fields.\n\n.. code:: python\n\n    >>> from pyrsistent import InvariantException\n    >>> class CRecord(PRecord):\n    ...     x = field(mandatory=True)\n    ...\n    >>> r = CRecord(x=3)\n    >>> try:\n    ...    r.discard('x')\n    ... except InvariantException as e:\n    ...    print(e.missing_fields)\n    ...\n    ('CRecord.x',)\n\nInvariants\n**********\nIt is possible to add invariants that must hold when evolving the record. Invariants can be\nspecified on both field and record level. If invariants fail an *InvariantException* will be\nthrown which contains information about the failing invariants. An invariant function should\nreturn a tuple consisting of a boolean that tells if the invariant holds or not and an object\ndescribing the invariant. This object can later be used to identify which invariant that failed.\n\nThe global invariant function is only executed if all field invariants hold.\n\nGlobal invariants are inherited to subclasses.\n\n.. code:: python\n\n    >>> class RestrictedVector(PRecord):\n    ...     __invariant__ = lambda r: (r.y >= r.x, 'x larger than y')\n    ...     x = field(invariant=lambda x: (x > 0, 'x negative'))\n    ...     y = field(invariant=lambda y: (y > 0, 'y negative'))\n    ...\n    >>> r = RestrictedVector(y=3, x=2)\n    >>> try:\n    ...    r.set(x=-1, y=-2)\n    ... except InvariantException as e:\n    ...    print(e.invariant_errors)\n    ...\n    ('y negative', 'x negative')\n    >>> try:\n    ...    r.set(x=2, y=1)\n    ... except InvariantException as e:\n    ...    print(e.invariant_errors)\n    ...\n    ('x larger than y',)\n\nInvariants may also contain multiple assertions. For those cases the invariant function should\nreturn a tuple of invariant tuples as described above. This structure is reflected in the\ninvariant_errors attribute of the exception which will contain tuples with data from all failed\ninvariants. Eg:\n\n.. code:: python\n\n    >>> class EvenX(PRecord):\n    ...     x = field(invariant=lambda x: ((x > 0, 'x negative'), (x % 2 == 0, 'x odd')))\n    ...\n    >>> try:\n    ...    EvenX(x=-1)\n    ... except InvariantException as e:\n    ...    print(e.invariant_errors)\n    ...\n    (('x negative', 'x odd'),)\n\n\nFactories\n*********\nIt's possible to specify factory functions for fields. The factory function receives whatever\nis supplied as field value and the actual returned by the factory is assigned to the field\ngiven that any type and invariant checks hold.\nPRecords have a default factory specified as a static function on the class, create(). It takes\na *Mapping* as argument and returns an instance of the specific record.\nIf a record has fields of type PRecord the create() method of that record will\nbe called to create the \"sub record\" if no factory has explicitly been specified to override\nthis behaviour.\n\n.. code:: python\n\n    >>> class DRecord(PRecord):\n    ...     x = field(factory=int)\n    ...\n    >>> class ERecord(PRecord):\n    ...     d = field(type=DRecord)\n    ...\n    >>> ERecord.create({'d': {'x': '1'}})\n    ERecord(d=DRecord(x=1))\n\nCollection fields\n*****************\nIt is also possible to have fields with ``pyrsistent`` collections.\n\n.. code:: python\n\n   >>> from pyrsistent import pset_field, pmap_field, pvector_field\n   >>> class MultiRecord(PRecord):\n   ...     set_of_ints = pset_field(int)\n   ...     map_int_to_str = pmap_field(int, str)\n   ...     vector_of_strs = pvector_field(str)\n   ...\n\nSerialization\n*************\nPRecords support serialization back to dicts. Default serialization will take keys and values\n\"as is\" and output them into a dict. It is possible to specify custom serialization functions\nto take care of fields that require special treatment.\n\n.. code:: python\n\n    >>> from datetime import date\n    >>> class Person(PRecord):\n    ...     name = field(type=unicode)\n    ...     birth_date = field(type=date,\n    ...                        serializer=lambda format, d: d.strftime(format['date']))\n    ...\n    >>> john = Person(name=u'John', birth_date=date(1985, 10, 21))\n    >>> john.serialize({'date': '%Y-%m-%d'})\n    {'birth_date': '1985-10-21', 'name': u'John'}\n\n\n.. _instar: https://github.com/boxed/instar/\n\n.. _PClass:\n\nPClass\n~~~~~~\nA PClass is a python class with a fixed set of specified fields. PClasses are declared as python classes inheriting\nfrom PClass. It is defined the same way that PRecords are and behaves like a PRecord in all aspects except that it\nis not a PMap and hence not a collection but rather a plain Python object.\n\n.. code:: python\n\n    >>> from pyrsistent import PClass, field\n    >>> class AClass(PClass):\n    ...     x = field()\n    ...\n    >>> a = AClass(x=3)\n    >>> a\n    AClass(x=3)\n    >>> a.x\n    3\n\n\nChecked collections\n~~~~~~~~~~~~~~~~~~~\nChecked collections currently come in three flavors: CheckedPVector, CheckedPMap and CheckedPSet.\n\n.. code:: python\n\n    >>> from pyrsistent import CheckedPVector, CheckedPMap, CheckedPSet, thaw\n    >>> class Positives(CheckedPSet):\n    ...     __type__ = (long, int)\n    ...     __invariant__ = lambda n: (n >= 0, 'Negative')\n    ...\n    >>> class Lottery(PRecord):\n    ...     name = field(type=str)\n    ...     numbers = field(type=Positives, invariant=lambda p: (len(p) > 0, 'No numbers'))\n    ...\n    >>> class Lotteries(CheckedPVector):\n    ...     __type__ = Lottery\n    ...\n    >>> class LotteriesByDate(CheckedPMap):\n    ...     __key_type__ = date\n    ...     __value_type__ = Lotteries\n    ...\n    >>> lotteries = LotteriesByDate.create({date(2015, 2, 15): [{'name': 'SuperLotto', 'numbers': {1, 2, 3}},\n    ...                                                         {'name': 'MegaLotto',  'numbers': {4, 5, 6}}],\n    ...                                     date(2015, 2, 16): [{'name': 'SuperLotto', 'numbers': {3, 2, 1}},\n    ...                                                         {'name': 'MegaLotto',  'numbers': {6, 5, 4}}]})\n    >>> lotteries\n    LotteriesByDate({datetime.date(2015, 2, 15): Lotteries([Lottery(numbers=Positives([1, 2, 3]), name='SuperLotto'), Lottery(numbers=Positives([4, 5, 6]), name='MegaLotto')]), datetime.date(2015, 2, 16): Lotteries([Lottery(numbers=Positives([1, 2, 3]), name='SuperLotto'), Lottery(numbers=Positives([4, 5, 6]), name='MegaLotto')])})\n\n    # The checked versions support all operations that the corresponding\n    # unchecked types do\n    >>> lottery_0215 = lotteries[date(2015, 2, 15)]\n    >>> lottery_0215.transform([0, 'name'], 'SuperDuperLotto')\n    Lotteries([Lottery(numbers=Positives([1, 2, 3]), name='SuperDuperLotto'), Lottery(numbers=Positives([4, 5, 6]), name='MegaLotto')])\n\n    # But also makes asserts that types and invariants hold\n    >>> lottery_0215.transform([0, 'name'], 999)\n    Traceback (most recent call last):\n    PTypeError: Invalid type for field Lottery.name, was int\n\n    >>> lottery_0215.transform([0, 'numbers'], set())\n    Traceback (most recent call last):\n    InvariantException: Field invariant failed\n\n    # They can be converted back to python built ins with either thaw()\n    # or serialize() (which provides possibilities to customize serialization)\n    >>> thaw(lottery_0215)\n    [{'numbers': set([1, 2, 3]), 'name': 'SuperLotto'}, {'numbers': set([4, 5, 6]), 'name': 'MegaLotto'}]\n    >>> lottery_0215.serialize()\n    [{'numbers': set([1, 2, 3]), 'name': 'SuperLotto'}, {'numbers': set([4, 5, 6]), 'name': 'MegaLotto'}]\n\n.. _transformations:\n\nTransformations\n~~~~~~~~~~~~~~~\nTransformations are inspired by the cool library instar_ for Clojure. They let you evolve PMaps and PVectors\nwith arbitrarily deep/complex nesting using simple syntax and flexible matching syntax.\n\nThe first argument to transformation is the path that points out the value to transform. The\nsecond is the transformation to perform. If the transformation is callable it will be applied\nto the value(s) matching the path. The path may also contain callables. In that case they are\ntreated as matchers. If the matcher returns True for a specific key it is considered for transformation.\n\n.. code:: python\n\n    # Basic examples\n    >>> from pyrsistent import inc, freeze, thaw, rex, ny, discard\n    >>> v1 = freeze([1, 2, 3, 4, 5])\n    >>> v1.transform([2], inc)\n    pvector([1, 2, 4, 4, 5])\n    >>> v1.transform([lambda ix: 0 < ix < 4], 8)\n    pvector([1, 8, 8, 8, 5])\n    >>> v1.transform([lambda ix, v: ix == 0 or v == 5], 0)\n    pvector([0, 2, 3, 4, 0])\n\n    # The (a)ny matcher can be used to match anything\n    >>> v1.transform([ny], 8)\n    pvector([8, 8, 8, 8, 8])\n\n    # Regular expressions can be used for matching\n    >>> scores = freeze({'John': 12, 'Joseph': 34, 'Sara': 23})\n    >>> scores.transform([rex('^Jo')], 0)\n    pmap({'Joseph': 0, 'Sara': 23, 'John': 0})\n\n    # Transformations can be done on arbitrarily deep structures\n    >>> news_paper = freeze({'articles': [{'author': 'Sara', 'content': 'A short article'},\n    ...                                   {'author': 'Steve', 'content': 'A slightly longer article'}],\n    ...                      'weather': {'temperature': '11C', 'wind': '5m/s'}})\n    >>> short_news = news_paper.transform(['articles', ny, 'content'], lambda c: c[:25] + '...' if len(c) > 25 else c)\n    >>> very_short_news = news_paper.transform(['articles', ny, 'content'], lambda c: c[:15] + '...' if len(c) > 15 else c)\n    >>> very_short_news.articles[0].content\n    'A short article'\n    >>> very_short_news.articles[1].content\n    'A slightly long...'\n\n    # When nothing has been transformed the original data structure is kept\n    >>> short_news is news_paper\n    True\n    >>> very_short_news is news_paper\n    False\n    >>> very_short_news.articles[0] is news_paper.articles[0]\n    True\n\n    # There is a special transformation that can be used to discard elements. Also\n    # multiple transformations can be applied in one call\n    >>> thaw(news_paper.transform(['weather'], discard, ['articles', ny, 'content'], discard))\n    {'articles': [{'author': 'Sara'}, {'author': 'Steve'}]}\n\nEvolvers\n~~~~~~~~\nPVector, PMap and PSet all have support for a concept dubbed *evolvers*. An evolver acts like a mutable\nview of the underlying persistent data structure with \"transaction like\" semantics. No updates of the original\ndata structure is ever performed, it is still fully immutable.\n\nThe evolvers have a very limited API by design to discourage excessive, and inappropriate, usage as that would\ntake us down the mutable road. In principle only basic mutation and element access functions are supported.\nCheck out the documentation_ of each data structure for specific examples.\n\nExamples of when you may want to use an evolver instead of working directly with the data structure include:\n\n* Multiple updates are done to the same data structure and the intermediate results are of no\n  interest. In this case using an evolver may be a more efficient and easier to work with.\n* You need to pass a vector into a legacy function or a function that you have no control\n  over which performs in place mutations. In this case pass an evolver instance\n  instead and then create a new pvector from the evolver once the function returns.\n\n.. code:: python\n\n    >>> from pyrsistent import v\n\n    # In place mutation as when working with the built in counterpart\n    >>> v1 = v(1, 2, 3)\n    >>> e = v1.evolver()\n    >>> e[1] = 22\n    >>> e = e.append(4)\n    >>> e = e.extend([5, 6])\n    >>> e[5] += 1\n    >>> len(e)\n    6\n\n    # The evolver is considered *dirty* when it contains changes compared to the underlying vector\n    >>> e.is_dirty()\n    True\n\n    # But the underlying pvector still remains untouched\n    >>> v1\n    pvector([1, 2, 3])\n\n    # Once satisfied with the updates you can produce a new pvector containing the updates.\n    # The new pvector will share data with the original pvector in the same way that would have\n    # been done if only using operations on the pvector.\n    >>> v2 = e.persistent()\n    >>> v2\n    pvector([1, 22, 3, 4, 5, 7])\n\n    # The evolver is now no longer considered *dirty* as it contains no differences compared to the\n    # pvector just produced.\n    >>> e.is_dirty()\n    False\n\n    # You may continue to work with the same evolver without affecting the content of v2\n    >>> e[0] = 11\n\n    # Or create a new evolver from v2. The two evolvers can be updated independently but will both\n    # share data with v2 where possible.\n    >>> e2 = v2.evolver()\n    >>> e2[0] = 1111\n    >>> e.persistent()\n    pvector([11, 22, 3, 4, 5, 7])\n    >>> e2.persistent()\n    pvector([1111, 22, 3, 4, 5, 7])\n\n.. _freeze:\n.. _thaw:\n\nfreeze and thaw\n~~~~~~~~~~~~~~~\nThese functions are great when your cozy immutable world has to interact with the evil mutable world outside.\n\n.. code:: python\n\n    >>> from pyrsistent import freeze, thaw, v, m\n    >>> freeze([1, {'a': 3}])\n    pvector([1, pmap({'a': 3})])\n    >>> thaw(v(1, m(a=3)))\n    [1, {'a': 3}]\n\nCompatibility\n-------------\n\nPyrsistent is developed and tested on Python 3.5, 3.6, 3.7, 3.8 and PyPy3.\n\nPerformance\n-----------\n\nPyrsistent is developed with performance in mind. Still, while some operations are nearly on par with their built in,\nmutable, counterparts in terms of speed, other operations are slower. In the cases where attempts at\noptimizations have been done, speed has generally been valued over space.\n\nPyrsistent comes with two API compatible flavors of PVector (on which PMap and PSet are based), one pure Python\nimplementation and one implemented as a C extension. The latter generally being 2 - 20 times faster than the former.\nThe C extension will be used automatically when possible.\n\nThe pure python implementation is fully PyPy compatible. Running it under PyPy speeds operations up considerably if\nthe structures are used heavily (if JITed), for some cases the performance is almost on par with the built in counterparts.\n\nType hints\n----------\n\nPEP 561 style type hints for use with mypy and various editors are available for most types and functions in pyrsistent.\n\nType classes for annotating your own code with pyrsistent types are also available under pyrsistent.typing.\n\nInstallation\n------------\n\npip install pyrsistent\n\nDocumentation\n-------------\n\nAvailable at http://pyrsistent.readthedocs.org/\n\nBrief presentation available at http://slides.com/tobiasgustafsson/immutability-and-python/\n\nContributors\n------------\n\nTobias Gustafsson https://github.com/tobgu\n\nChristopher Armstrong https://github.com/radix\n\nAnders Hovmöller https://github.com/boxed\n\nItamar Turner-Trauring https://github.com/itamarst\n\nJonathan Lange https://github.com/jml\n\nRichard Futrell https://github.com/Futrell\n\nJakob Hollenstein https://github.com/jkbjh\n\nDavid Honour https://github.com/foolswood\n\nDavid R. MacIver https://github.com/DRMacIver\n\nMarcus Ewert https://github.com/sarum90\n\nJean-Paul Calderone https://github.com/exarkun\n\nDouglas Treadwell https://github.com/douglas-treadwell\n\nTravis Parker https://github.com/teepark\n\nJulian Berman https://github.com/Julian\n\nDennis Tomas https://github.com/dtomas\n\nNeil Vyas https://github.com/neilvyas\n\ndoozr https://github.com/doozr\n\nKamil Galuszka https://github.com/galuszkak\n\nTsuyoshi Hombashi https://github.com/thombashi\n\nnattofriends https://github.com/nattofriends\n\nagberk https://github.com/agberk\n\nWaleed Khan https://github.com/arxanas\n\nJean-Louis Fuchs https://github.com/ganwell\n\nCarlos Corbacho https://github.com/ccorbacho\n\nFelix Yan https://github.com/felixonmars\n\nbenrg https://github.com/benrg\n\nJere Lahelma https://github.com/je-l\n\nMax Taggart https://github.com/MaxTaggart\n\nVincent Philippon https://github.com/vphilippon\n\nSemen Zhydenko https://github.com/ss18\n\nTill Varoquaux  https://github.com/till-varoquaux\n\nMichal Kowalik https://github.com/michalvi\n\nossdev07 https://github.com/ossdev07\n\nKerry Olesen https://github.com/qhesz\n\njohnthagen https://github.com/johnthagen\n\nBastien Vallet https://github.com/djailla\n\nRam Rachum  https://github.com/cool-RR\n\nVincent Philippon https://github.com/vphilippon\n\nContributing\n------------\n\nWant to contribute? That's great! If you experience problems please log them on GitHub. If you want to contribute code,\nplease fork the repository and submit a pull request.\n\nRun tests\n~~~~~~~~~\n.. _tox: https://tox.readthedocs.io/en/latest/\n\nTests can be executed using tox_.\n\nInstall tox: ``pip install tox``\n\nRun test for Python 3.8: ``tox -e py38``\n\nRelease\n~~~~~~~\n* `pip install -r requirements.txt`\n* Update CHANGES.txt\n* Update README with any new contributors and potential info needed.\n* Update _pyrsistent_version.py\n* `rm -rf dist/* && python setup.py sdist`\n* (`twine upload -r testpypi dist/*`), if testing the distribution on testpypi\n* `twine upload dist/*`\n* Commit and tag with new version: `git add -u . && git commit -m 'Prepare version vX.Y.Z' && git tag -a vX.Y.Z -m 'vX.Y.Z'`\n* Push commit and tags: `git push && git push --tags`\n\nProject status\n--------------\nPyrsistent can be considered stable and mature (who knows, there may even be a 1.0 some day :-)). The project is\nmaintained, bugs fixed, PRs reviewed and merged and new releases made. I currently do not have time for development\nof new features or functionality which I don't have use for myself. I'm more than happy to take PRs for new\nfunctionality though!\n\nThere are a bunch of issues marked with ``enhancement`` and ``help wanted`` that contain requests for new functionality\nthat would be nice to include. The level of difficulty and extend of the issues varies, please reach out to me if you're\ninterested in working on any of them.\n\nIf you feel that you have a grand master plan for where you would like Pyrsistent to go and have the time to put into\nit please don't hesitate to discuss this with me and submit PRs for it. If all goes well I'd be more than happy to add\nadditional maintainers to the project!",
          "name": "pyrsistent",
          "author": [
            {
              "type": "Person",
              "name": "Tobias Gustafsson",
              "email": [
                "tobias.l.gustafsson@gmail.com"
              ],
              "familyName": [
                "Gustafsson"
              ],
              "givenName": [
                "Tobias"
              ]
            }
          ],
          "license": "MIT",
          "version": "==0.17.3",
          "codeRepository": "https://pypi.org/project/pyrsistent/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python"
        },
        {
          "type": "SoftwarePackage",
          "description": "PySocks\n=======\n\nPySocks lets you send traffic through SOCKS and HTTP proxy servers. It is a modern fork of [SocksiPy](http://socksipy.sourceforge.net/) with bug fixes and extra features.\n\nActs as a drop-in replacement to the socket module. Seamlessly configure SOCKS proxies for any socket object by calling `socket_object.set_proxy()`.\n\n----------------\n\nFeatures\n========\n\n* SOCKS proxy client for Python 2.7 and 3.4+\n* TCP supported\n* UDP mostly supported (issues may occur in some edge cases)\n* HTTP proxy client included but not supported or recommended (you should use urllib2's or requests' own HTTP proxy interface)\n* urllib2 handler included. `pip install` / `setup.py install` will automatically install the `sockshandler` module.\n\nInstallation\n============\n\n    pip install PySocks\n\nOr download the tarball / `git clone` and...\n\n    python setup.py install\n\nThese will install both the `socks` and `sockshandler` modules.\n\nAlternatively, include just `socks.py` in your project.\n\n--------------------------------------------\n\n*Warning:* PySocks/SocksiPy only supports HTTP proxies that use CONNECT tunneling. Certain HTTP proxies may not work with this library. If you wish to use HTTP (not SOCKS) proxies, it is recommended that you rely on your HTTP client's native proxy support (`proxies` dict for `requests`, or `urllib2.ProxyHandler` for `urllib2`) instead.\n\n--------------------------------------------\n\nUsage\n=====\n\n## socks.socksocket ##\n\n    import socks\n\n    s = socks.socksocket() # Same API as socket.socket in the standard lib\n\n    s.set_proxy(socks.SOCKS5, \"localhost\") # SOCKS4 and SOCKS5 use port 1080 by default\n    # Or\n    s.set_proxy(socks.SOCKS4, \"localhost\", 4444)\n    # Or\n    s.set_proxy(socks.HTTP, \"5.5.5.5\", 8888)\n\n    # Can be treated identical to a regular socket object\n    s.connect((\"www.somesite.com\", 80))\n    s.sendall(\"GET / HTTP/1.1 ...\")\n    print s.recv(4096)\n\n## Monkeypatching ##\n\nTo monkeypatch the entire standard library with a single default proxy:\n\n    import urllib2\n    import socket\n    import socks\n\n    socks.set_default_proxy(socks.SOCKS5, \"localhost\")\n    socket.socket = socks.socksocket\n\n    urllib2.urlopen(\"http://www.somesite.com/\") # All requests will pass through the SOCKS proxy\n\nNote that monkeypatching may not work for all standard modules or for all third party modules, and generally isn't recommended. Monkeypatching is usually an anti-pattern in Python.\n\n## urllib2 Handler ##\n\nExample use case with the `sockshandler` urllib2 handler. Note that you must import both `socks` and `sockshandler`, as the handler is its own module separate from PySocks. The module is included in the PyPI package.\n\n    import urllib2\n    import socks\n    from sockshandler import SocksiPyHandler\n\n    opener = urllib2.build_opener(SocksiPyHandler(socks.SOCKS5, \"127.0.0.1\", 9050))\n    print opener.open(\"http://www.somesite.com/\") # All requests made by the opener will pass through the SOCKS proxy\n\n--------------------------------------------\n\nOriginal SocksiPy README attached below, amended to reflect API changes.\n\n--------------------------------------------\n\nSocksiPy\n\nA Python SOCKS module.\n\n(C) 2006 Dan-Haim. All rights reserved.\n\nSee LICENSE file for details.\n\n\n*WHAT IS A SOCKS PROXY?*\n\nA SOCKS proxy is a proxy server at the TCP level. In other words, it acts as\na tunnel, relaying all traffic going through it without modifying it.\nSOCKS proxies can be used to relay traffic using any network protocol that\nuses TCP.\n\n*WHAT IS SOCKSIPY?*\n\nThis Python module allows you to create TCP connections through a SOCKS\nproxy without any special effort.\nIt also supports relaying UDP packets with a SOCKS5 proxy.\n\n*PROXY COMPATIBILITY*\n\nSocksiPy is compatible with three different types of proxies:\n\n1. SOCKS Version 4 (SOCKS4), including the SOCKS4a extension.\n2. SOCKS Version 5 (SOCKS5).\n3. HTTP Proxies which support tunneling using the CONNECT method.\n\n*SYSTEM REQUIREMENTS*\n\nBeing written in Python, SocksiPy can run on any platform that has a Python\ninterpreter and TCP/IP support.\nThis module has been tested with Python 2.3 and should work with greater versions\njust as well.\n\n\nINSTALLATION\n-------------\n\nSimply copy the file \"socks.py\" to your Python's `lib/site-packages` directory,\nand you're ready to go. [Editor's note: it is better to use `python setup.py install` for PySocks]\n\n\nUSAGE\n------\n\nFirst load the socks module with the command:\n\n    >>> import socks\n    >>>\n\nThe socks module provides a class called `socksocket`, which is the base to all of the module's functionality.\n\nThe `socksocket` object has the same initialization parameters as the normal socket\nobject to ensure maximal compatibility, however it should be noted that `socksocket` will only function with family being `AF_INET` and\ntype being either `SOCK_STREAM` or `SOCK_DGRAM`.\nGenerally, it is best to initialize the `socksocket` object with no parameters\n\n    >>> s = socks.socksocket()\n    >>>\n\nThe `socksocket` object has an interface which is very similiar to socket's (in fact\nthe `socksocket` class is derived from socket) with a few extra methods.\nTo select the proxy server you would like to use, use the `set_proxy` method, whose\nsyntax is:\n\n    set_proxy(proxy_type, addr[, port[, rdns[, username[, password]]]])\n\nExplanation of the parameters:\n\n`proxy_type` - The type of the proxy server. This can be one of three possible\nchoices: `PROXY_TYPE_SOCKS4`, `PROXY_TYPE_SOCKS5` and `PROXY_TYPE_HTTP` for SOCKS4,\nSOCKS5 and HTTP servers respectively. `SOCKS4`, `SOCKS5`, and `HTTP` are all aliases, respectively.\n\n`addr` - The IP address or DNS name of the proxy server.\n\n`port` - The port of the proxy server. Defaults to 1080 for socks and 8080 for http.\n\n`rdns` - This is a boolean flag than modifies the behavior regarding DNS resolving.\nIf it is set to True, DNS resolving will be preformed remotely, on the server.\nIf it is set to False, DNS resolving will be preformed locally. Please note that\nsetting this to True with SOCKS4 servers actually use an extension to the protocol,\ncalled SOCKS4a, which may not be supported on all servers (SOCKS5 and http servers\nalways support DNS). The default is True.\n\n`username` - For SOCKS5 servers, this allows simple username / password authentication\nwith the server. For SOCKS4 servers, this parameter will be sent as the userid.\nThis parameter is ignored if an HTTP server is being used. If it is not provided,\nauthentication will not be used (servers may accept unauthenticated requests).\n\n`password` - This parameter is valid only for SOCKS5 servers and specifies the\nrespective password for the username provided.\n\nExample of usage:\n\n    >>> s.set_proxy(socks.SOCKS5, \"socks.example.com\") # uses default port 1080\n    >>> s.set_proxy(socks.SOCKS4, \"socks.test.com\", 1081)\n\nAfter the set_proxy method has been called, simply call the connect method with the\ntraditional parameters to establish a connection through the proxy:\n\n    >>> s.connect((\"www.sourceforge.net\", 80))\n    >>>\n\nConnection will take a bit longer to allow negotiation with the proxy server.\nPlease note that calling connect without calling `set_proxy` earlier will connect\nwithout a proxy (just like a regular socket).\n\nErrors: Any errors in the connection process will trigger exceptions. The exception\nmay either be generated by the underlying socket layer or may be custom module\nexceptions, whose details follow:\n\nclass `ProxyError` - This is a base exception class. It is not raised directly but\nrather all other exception classes raised by this module are derived from it.\nThis allows an easy way to catch all proxy-related errors. It descends from `IOError`.\n\nAll `ProxyError` exceptions have an attribute `socket_err`, which will contain either a\ncaught `socket.error` exception, or `None` if there wasn't any.\n\nclass `GeneralProxyError` - When thrown, it indicates a problem which does not fall\ninto another category.\n\n* `Sent invalid data` - This error means that unexpected data has been received from\nthe server. The most common reason is that the server specified as the proxy is\nnot really a SOCKS4/SOCKS5/HTTP proxy, or maybe the proxy type specified is wrong.\n\n* `Connection closed unexpectedly` - The proxy server unexpectedly closed the connection.\nThis may indicate that the proxy server is experiencing network or software problems.\n\n* `Bad proxy type` - This will be raised if the type of the proxy supplied to the\nset_proxy function was not one of `SOCKS4`/`SOCKS5`/`HTTP`.\n\n* `Bad input` - This will be raised if the `connect()` method is called with bad input\nparameters.\n\nclass `SOCKS5AuthError` - This indicates that the connection through a SOCKS5 server\nfailed due to an authentication problem.\n\n* `Authentication is required` - This will happen if you use a SOCKS5 server which\nrequires authentication without providing a username / password at all.\n\n* `All offered authentication methods were rejected` - This will happen if the proxy\nrequires a special authentication method which is not supported by this module.\n\n* `Unknown username or invalid password` - Self descriptive.\n\nclass `SOCKS5Error` - This will be raised for SOCKS5 errors which are not related to\nauthentication.\nThe parameter is a tuple containing a code, as given by the server,\nand a description of the\nerror. The possible errors, according to the RFC, are:\n\n* `0x01` - General SOCKS server failure - If for any reason the proxy server is unable to\nfulfill your request (internal server error).\n* `0x02` - connection not allowed by ruleset - If the address you're trying to connect to\nis blacklisted on the server or requires authentication.\n* `0x03` - Network unreachable - The target could not be contacted. A router on the network\nhad replied with a destination net unreachable error.\n* `0x04` - Host unreachable - The target could not be contacted. A router on the network\nhad replied with a destination host unreachable error.\n* `0x05` - Connection refused - The target server has actively refused the connection\n(the requested port is closed).\n* `0x06` - TTL expired - The TTL value of the SYN packet from the proxy to the target server\nhas expired. This usually means that there are network problems causing the packet\nto be caught in a router-to-router \"ping-pong\".\n* `0x07` - Command not supported - For instance if the server does not support UDP.\n* `0x08` - Address type not supported - The client has provided an invalid address type.\nWhen using this module, this error should not occur.\n\nclass `SOCKS4Error` - This will be raised for SOCKS4 errors. The parameter is a tuple\ncontaining a code and a description of the error, as given by the server. The\npossible error, according to the specification are:\n\n* `0x5B` - Request rejected or failed - Will be raised in the event of an failure for any\nreason other then the two mentioned next.\n* `0x5C` - request rejected because SOCKS server cannot connect to identd on the client -\nThe Socks server had tried an ident lookup on your computer and has failed. In this\ncase you should run an identd server and/or configure your firewall to allow incoming\nconnections to local port 113 from the remote server.\n* `0x5D` - request rejected because the client program and identd report different user-ids -\nThe Socks server had performed an ident lookup on your computer and has received a\ndifferent userid than the one you have provided. Change your userid (through the\nusername parameter of the set_proxy method) to match and try again.\n\nclass `HTTPError` - This will be raised for HTTP errors. The message will contain\nthe HTTP status code and provided error message.\n\nAfter establishing the connection, the object behaves like a standard socket.\n\nMethods like `makefile()` and `settimeout()` should behave just like regular sockets.\nCall the `close()` method to close the connection.\n\nIn addition to the `socksocket` class, an additional function worth mentioning is the\n`set_default_proxy` function. The parameters are the same as the `set_proxy` method.\nThis function will set default proxy settings for newly created `socksocket` objects,\nin which the proxy settings haven't been changed via the `set_proxy` method.\nThis is quite useful if you wish to force 3rd party modules to use a SOCKS proxy,\nby overriding the socket object.\nFor example:\n\n    >>> socks.set_default_proxy(socks.SOCKS5, \"socks.example.com\")\n    >>> socket.socket = socks.socksocket\n    >>> urllib.urlopen(\"http://www.sourceforge.net/\")\n\n\nPROBLEMS\n---------\n\nPlease open a GitHub issue at https://github.com/Anorov/PySocks\n\n\n",
          "name": "PySocks",
          "author": [
            {
              "type": "Person",
              "name": "Anorov <anorov.vorona@gmail.com>",
              "familyName": [
                "<anorov.vorona@gmail.com>"
              ],
              "givenName": [
                "Anorov"
              ]
            }
          ],
          "keywords": "socks,proxy",
          "license": "BSD",
          "codeRepository": "https://pypi.org/project/PySocks/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python"
        },
        {
          "type": "SoftwarePackage",
          "description": ".. image:: https://docs.pytest.org/en/stable/_static/pytest1.png\n   :target: https://docs.pytest.org/en/stable/\n   :align: center\n   :alt: pytest\n\n\n------\n\n.. image:: https://img.shields.io/pypi/v/pytest.svg\n    :target: https://pypi.org/project/pytest/\n\n.. image:: https://img.shields.io/conda/vn/conda-forge/pytest.svg\n    :target: https://anaconda.org/conda-forge/pytest\n\n.. image:: https://img.shields.io/pypi/pyversions/pytest.svg\n    :target: https://pypi.org/project/pytest/\n\n.. image:: https://codecov.io/gh/pytest-dev/pytest/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/pytest-dev/pytest\n    :alt: Code coverage Status\n\n.. image:: https://travis-ci.org/pytest-dev/pytest.svg?branch=master\n    :target: https://travis-ci.org/pytest-dev/pytest\n\n.. image:: https://github.com/pytest-dev/pytest/workflows/main/badge.svg\n    :target: https://github.com/pytest-dev/pytest/actions?query=workflow%3Amain\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/psf/black\n\n.. image:: https://www.codetriage.com/pytest-dev/pytest/badges/users.svg\n    :target: https://www.codetriage.com/pytest-dev/pytest\n\n.. image:: https://readthedocs.org/projects/pytest/badge/?version=latest\n    :target: https://pytest.readthedocs.io/en/latest/?badge=latest\n    :alt: Documentation Status\n\nThe ``pytest`` framework makes it easy to write small tests, yet\nscales to support complex functional testing for applications and libraries.\n\nAn example of a simple test:\n\n.. code-block:: python\n\n    # content of test_sample.py\n    def inc(x):\n        return x + 1\n\n\n    def test_answer():\n        assert inc(3) == 5\n\n\nTo execute it::\n\n    $ pytest\n    ============================= test session starts =============================\n    collected 1 items\n\n    test_sample.py F\n\n    ================================== FAILURES ===================================\n    _________________________________ test_answer _________________________________\n\n        def test_answer():\n    >       assert inc(3) == 5\n    E       assert 4 == 5\n    E        +  where 4 = inc(3)\n\n    test_sample.py:5: AssertionError\n    ========================== 1 failed in 0.04 seconds ===========================\n\n\nDue to ``pytest``'s detailed assertion introspection, only plain ``assert`` statements are used. See `getting-started <https://docs.pytest.org/en/stable/getting-started.html#our-first-test-run>`_ for more examples.\n\n\nFeatures\n--------\n\n- Detailed info on failing `assert statements <https://docs.pytest.org/en/stable/assert.html>`_ (no need to remember ``self.assert*`` names)\n\n- `Auto-discovery\n  <https://docs.pytest.org/en/stable/goodpractices.html#python-test-discovery>`_\n  of test modules and functions\n\n- `Modular fixtures <https://docs.pytest.org/en/stable/fixture.html>`_ for\n  managing small or parametrized long-lived test resources\n\n- Can run `unittest <https://docs.pytest.org/en/stable/unittest.html>`_ (or trial),\n  `nose <https://docs.pytest.org/en/stable/nose.html>`_ test suites out of the box\n\n- Python 3.6+ and PyPy3\n\n- Rich plugin architecture, with over 850+ `external plugins <http://plugincompat.herokuapp.com>`_ and thriving community\n\n\nDocumentation\n-------------\n\nFor full documentation, including installation, tutorials and PDF documents, please see https://docs.pytest.org/en/stable/.\n\n\nBugs/Requests\n-------------\n\nPlease use the `GitHub issue tracker <https://github.com/pytest-dev/pytest/issues>`_ to submit bugs or request features.\n\n\nChangelog\n---------\n\nConsult the `Changelog <https://docs.pytest.org/en/stable/changelog.html>`__ page for fixes and enhancements of each version.\n\n\nSupport pytest\n--------------\n\n`Open Collective`_ is an online funding platform for open and transparent communities.\nIt provides tools to raise money and share your finances in full transparency.\n\nIt is the platform of choice for individuals and companies that want to make one-time or\nmonthly donations directly to the project.\n\nSee more details in the `pytest collective`_.\n\n.. _Open Collective: https://opencollective.com\n.. _pytest collective: https://opencollective.com/pytest\n\n\npytest for enterprise\n---------------------\n\nAvailable as part of the Tidelift Subscription.\n\nThe maintainers of pytest and thousands of other packages are working with Tidelift to deliver commercial support and\nmaintenance for the open source dependencies you use to build your applications.\nSave time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use.\n\n`Learn more. <https://tidelift.com/subscription/pkg/pypi-pytest?utm_source=pypi-pytest&utm_medium=referral&utm_campaign=enterprise&utm_term=repo>`_\n\nSecurity\n^^^^^^^^\n\npytest has never been associated with a security vulnerability, but in any case, to report a\nsecurity vulnerability please use the `Tidelift security contact <https://tidelift.com/security>`_.\nTidelift will coordinate the fix and disclosure.\n\n\nLicense\n-------\n\nCopyright Holger Krekel and others, 2004-2020.\n\nDistributed under the terms of the `MIT`_ license, pytest is free and open source software.\n\n.. _`MIT`: https://github.com/pytest-dev/pytest/blob/master/LICENSE\n\n\n",
          "name": "pytest",
          "author": [
            {
              "type": "Person",
              "name": "Holger Krekel,",
              "familyName": [
                "Krekel,"
              ],
              "givenName": [
                "Holger"
              ]
            }
          ],
          "keywords": "test,unittest",
          "license": "MIT",
          "version": "==4.6.11",
          "codeRepository": "https://pypi.org/project/pytest/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python",
          "applicationCategory": [
            "Software Development",
            "Utilities"
          ],
          "applicationSubCategory": [
            "Libraries",
            "Testing"
          ],
          "operatingSystem": [
            {
              "type": "OperatingSystem",
              "name": "macOS"
            },
            {
              "type": "OperatingSystem",
              "name": "Windows"
            }
          ]
        },
        {
          "type": "SoftwarePackage",
          "description": "dateutil - powerful extensions to datetime\n==========================================\n\n|pypi| |support| |licence|\n\n|gitter| |readthedocs|\n\n|travis| |appveyor| |pipelines| |coverage|\n\n.. |pypi| image:: https://img.shields.io/pypi/v/python-dateutil.svg?style=flat-square\n    :target: https://pypi.org/project/python-dateutil/\n    :alt: pypi version\n\n.. |support| image:: https://img.shields.io/pypi/pyversions/python-dateutil.svg?style=flat-square\n    :target: https://pypi.org/project/python-dateutil/\n    :alt: supported Python version\n\n.. |travis| image:: https://img.shields.io/travis/dateutil/dateutil/master.svg?style=flat-square&label=Travis%20Build\n    :target: https://travis-ci.org/dateutil/dateutil\n    :alt: travis build status\n\n.. |appveyor| image:: https://img.shields.io/appveyor/ci/dateutil/dateutil/master.svg?style=flat-square&logo=appveyor\n    :target: https://ci.appveyor.com/project/dateutil/dateutil\n    :alt: appveyor build status\n\n.. |pipelines| image:: https://dev.azure.com/pythondateutilazure/dateutil/_apis/build/status/dateutil.dateutil?branchName=master\n    :target: https://dev.azure.com/pythondateutilazure/dateutil/_build/latest?definitionId=1&branchName=master\n    :alt: azure pipelines build status\n\n.. |coverage| image:: https://codecov.io/github/dateutil/dateutil/coverage.svg?branch=master\n    :target: https://codecov.io/github/dateutil/dateutil?branch=master\n    :alt: Code coverage\n\n.. |gitter| image:: https://badges.gitter.im/dateutil/dateutil.svg\n   :alt: Join the chat at https://gitter.im/dateutil/dateutil\n   :target: https://gitter.im/dateutil/dateutil\n\n.. |licence| image:: https://img.shields.io/pypi/l/python-dateutil.svg?style=flat-square\n    :target: https://pypi.org/project/python-dateutil/\n    :alt: licence\n\n.. |readthedocs| image:: https://img.shields.io/readthedocs/dateutil/latest.svg?style=flat-square&label=Read%20the%20Docs\n   :alt: Read the documentation at https://dateutil.readthedocs.io/en/latest/\n   :target: https://dateutil.readthedocs.io/en/latest/\n\nThe `dateutil` module provides powerful extensions to\nthe standard `datetime` module, available in Python.\n\nInstallation\n============\n`dateutil` can be installed from PyPI using `pip` (note that the package name is\ndifferent from the importable name)::\n\n    pip install python-dateutil\n\nDownload\n========\ndateutil is available on PyPI\nhttps://pypi.org/project/python-dateutil/\n\nThe documentation is hosted at:\nhttps://dateutil.readthedocs.io/en/stable/\n\nCode\n====\nThe code and issue tracker are hosted on GitHub:\nhttps://github.com/dateutil/dateutil/\n\nFeatures\n========\n\n* Computing of relative deltas (next month, next year,\n  next Monday, last week of month, etc);\n* Computing of relative deltas between two given\n  date and/or datetime objects;\n* Computing of dates based on very flexible recurrence rules,\n  using a superset of the `iCalendar <https://www.ietf.org/rfc/rfc2445.txt>`_\n  specification. Parsing of RFC strings is supported as well.\n* Generic parsing of dates in almost any string format;\n* Timezone (tzinfo) implementations for tzfile(5) format\n  files (/etc/localtime, /usr/share/zoneinfo, etc), TZ\n  environment string (in all known formats), iCalendar\n  format files, given ranges (with help from relative deltas),\n  local machine timezone, fixed offset timezone, UTC timezone,\n  and Windows registry-based time zones.\n* Internal up-to-date world timezone information based on\n  Olson's database.\n* Computing of Easter Sunday dates for any given year,\n  using Western, Orthodox or Julian algorithms;\n* A comprehensive test suite.\n\nQuick example\n=============\nHere's a snapshot, just to give an idea about the power of the\npackage. For more examples, look at the documentation.\n\nSuppose you want to know how much time is left, in\nyears/months/days/etc, before the next easter happening on a\nyear with a Friday 13th in August, and you want to get today's\ndate out of the \"date\" unix system command. Here is the code:\n\n.. code-block:: python3\n\n    >>> from dateutil.relativedelta import *\n    >>> from dateutil.easter import *\n    >>> from dateutil.rrule import *\n    >>> from dateutil.parser import *\n    >>> from datetime import *\n    >>> now = parse(\"Sat Oct 11 17:13:46 UTC 2003\")\n    >>> today = now.date()\n    >>> year = rrule(YEARLY,dtstart=now,bymonth=8,bymonthday=13,byweekday=FR)[0].year\n    >>> rdelta = relativedelta(easter(year), today)\n    >>> print(\"Today is: %s\" % today)\n    Today is: 2003-10-11\n    >>> print(\"Year with next Aug 13th on a Friday is: %s\" % year)\n    Year with next Aug 13th on a Friday is: 2004\n    >>> print(\"How far is the Easter of that year: %s\" % rdelta)\n    How far is the Easter of that year: relativedelta(months=+6)\n    >>> print(\"And the Easter of that year is: %s\" % (today+rdelta))\n    And the Easter of that year is: 2004-04-11\n\nBeing exactly 6 months ahead was **really** a coincidence :)\n\nContributing\n============\n\nWe welcome many types of contributions - bug reports, pull requests (code, infrastructure or documentation fixes). For more information about how to contribute to the project, see the ``CONTRIBUTING.md`` file in the repository.\n\n\nAuthor\n======\nThe dateutil module was written by Gustavo Niemeyer <gustavo@niemeyer.net>\nin 2003.\n\nIt is maintained by:\n\n* Gustavo Niemeyer <gustavo@niemeyer.net> 2003-2011\n* Tomi Pieviläinen <tomi.pievilainen@iki.fi> 2012-2014\n* Yaron de Leeuw <me@jarondl.net> 2014-2016\n* Paul Ganssle <paul@ganssle.io> 2015-\n\nStarting with version 2.4.1, all source and binary distributions will be signed\nby a PGP key that has, at the very least, been signed by the key which made the\nprevious release. A table of release signing keys can be found below:\n\n===========  ============================\nReleases     Signing key fingerprint\n===========  ============================\n2.4.1-       `6B49 ACBA DCF6 BD1C A206 67AB CD54 FCE3 D964 BEFB`_ (|pgp_mirror|_)\n===========  ============================\n\n\nContact\n=======\nOur mailing list is available at `dateutil@python.org <https://mail.python.org/mailman/listinfo/dateutil>`_. As it is hosted by the PSF, it is subject to the `PSF code of\nconduct <https://www.python.org/psf/codeofconduct/>`_.\n\nLicense\n=======\n\nAll contributions after December 1, 2017 released under dual license - either `Apache 2.0 License <https://www.apache.org/licenses/LICENSE-2.0>`_ or the `BSD 3-Clause License <https://opensource.org/licenses/BSD-3-Clause>`_. Contributions before December 1, 2017 - except those those explicitly relicensed - are released only under the BSD 3-Clause License.\n\n\n.. _6B49 ACBA DCF6 BD1C A206 67AB CD54 FCE3 D964 BEFB:\n   https://pgp.mit.edu/pks/lookup?op=vindex&search=0xCD54FCE3D964BEFB\n\n.. |pgp_mirror| replace:: mirror\n.. _pgp_mirror: https://sks-keyservers.net/pks/lookup?op=vindex&search=0xCD54FCE3D964BEFB\n\n\n",
          "name": "python-dateutil",
          "author": [
            {
              "type": "Person",
              "name": "Gustavo Niemeyer",
              "email": [
                "gustavo@niemeyer.net"
              ],
              "familyName": [
                "Niemeyer"
              ],
              "givenName": [
                "Gustavo"
              ]
            }
          ],
          "license": "Dual License",
          "version": "==2.8.1",
          "codeRepository": "https://pypi.org/project/python-dateutil/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python",
          "applicationCategory": [
            "Software Development"
          ],
          "applicationSubCategory": [
            "Libraries"
          ]
        },
        {
          "type": "SoftwarePackage",
          "description": "LibSBML is a library for reading, writing and manipulating the Systems Biology Markup Language (SBML).  It is written in ISO C and C++, supports SBML Levels 1, 2 and 3, and runs on Linux, Microsoft Windows, and Apple MacOS X.  For more information about SBML, please see http://sbml.org.\r\n\r\n\r\n",
          "name": "python-libsbml",
          "author": [
            {
              "type": "Person",
              "name": "SBML Team",
              "email": [
                "libsbml-team@googlegroups.com"
              ],
              "familyName": [
                "Team"
              ],
              "givenName": [
                "SBML"
              ]
            }
          ],
          "license": "LGPL",
          "version": "==5.19.0",
          "codeRepository": "https://pypi.org/project/python-libsbml/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python"
        },
        {
          "type": "SoftwarePackage",
          "description": "pytz - World Timezone Definitions for Python\n============================================\n\n:Author: Stuart Bishop <stuart@stuartbishop.net>\n\nIntroduction\n~~~~~~~~~~~~\n\npytz brings the Olson tz database into Python. This library allows\naccurate and cross platform timezone calculations using Python 2.4\nor higher. It also solves the issue of ambiguous times at the end\nof daylight saving time, which you can read more about in the Python\nLibrary Reference (``datetime.tzinfo``).\n\nAlmost all of the Olson timezones are supported.\n\n.. note::\n\n    This library differs from the documented Python API for\n    tzinfo implementations; if you want to create local wallclock\n    times you need to use the ``localize()`` method documented in this\n    document. In addition, if you perform date arithmetic on local\n    times that cross DST boundaries, the result may be in an incorrect\n    timezone (ie. subtract 1 minute from 2002-10-27 1:00 EST and you get\n    2002-10-27 0:59 EST instead of the correct 2002-10-27 1:59 EDT). A\n    ``normalize()`` method is provided to correct this. Unfortunately these\n    issues cannot be resolved without modifying the Python datetime\n    implementation (see PEP-431).\n\n\nInstallation\n~~~~~~~~~~~~\n\nThis package can either be installed using ``pip`` or from a tarball using the\nstandard Python distutils.\n\nIf you are installing using ``pip``, you don't need to download anything as the\nlatest version will be downloaded for you from PyPI::\n\n    pip install pytz\n\nIf you are installing from a tarball, run the following command as an\nadministrative user::\n\n    python setup.py install\n\n\npytz for Enterprise\n~~~~~~~~~~~~~~~~~~~\n\nAvailable as part of the Tidelift Subscription.\n\nThe maintainers of pytz and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. `Learn more. <https://tidelift.com/subscription/pkg/pypi-pytz?utm_source=pypi-pytz&utm_medium=referral&utm_campaign=enterprise&utm_term=repo>`_.\n\n\nExample & Usage\n~~~~~~~~~~~~~~~\n\nLocalized times and date arithmetic\n-----------------------------------\n\n>>> from datetime import datetime, timedelta\n>>> from pytz import timezone\n>>> import pytz\n>>> utc = pytz.utc\n>>> utc.zone\n'UTC'\n>>> eastern = timezone('US/Eastern')\n>>> eastern.zone\n'US/Eastern'\n>>> amsterdam = timezone('Europe/Amsterdam')\n>>> fmt = '%Y-%m-%d %H:%M:%S %Z%z'\n\nThis library only supports two ways of building a localized time. The\nfirst is to use the ``localize()`` method provided by the pytz library.\nThis is used to localize a naive datetime (datetime with no timezone\ninformation):\n\n>>> loc_dt = eastern.localize(datetime(2002, 10, 27, 6, 0, 0))\n>>> print(loc_dt.strftime(fmt))\n2002-10-27 06:00:00 EST-0500\n\nThe second way of building a localized time is by converting an existing\nlocalized time using the standard ``astimezone()`` method:\n\n>>> ams_dt = loc_dt.astimezone(amsterdam)\n>>> ams_dt.strftime(fmt)\n'2002-10-27 12:00:00 CET+0100'\n\nUnfortunately using the tzinfo argument of the standard datetime\nconstructors ''does not work'' with pytz for many timezones.\n\n>>> datetime(2002, 10, 27, 12, 0, 0, tzinfo=amsterdam).strftime(fmt)  # /!\\ Does not work this way!\n'2002-10-27 12:00:00 LMT+0020'\n\nIt is safe for timezones without daylight saving transitions though, such\nas UTC:\n\n>>> datetime(2002, 10, 27, 12, 0, 0, tzinfo=pytz.utc).strftime(fmt)  # /!\\ Not recommended except for UTC\n'2002-10-27 12:00:00 UTC+0000'\n\nThe preferred way of dealing with times is to always work in UTC,\nconverting to localtime only when generating output to be read\nby humans.\n\n>>> utc_dt = datetime(2002, 10, 27, 6, 0, 0, tzinfo=utc)\n>>> loc_dt = utc_dt.astimezone(eastern)\n>>> loc_dt.strftime(fmt)\n'2002-10-27 01:00:00 EST-0500'\n\nThis library also allows you to do date arithmetic using local\ntimes, although it is more complicated than working in UTC as you\nneed to use the ``normalize()`` method to handle daylight saving time\nand other timezone transitions. In this example, ``loc_dt`` is set\nto the instant when daylight saving time ends in the US/Eastern\ntimezone.\n\n>>> before = loc_dt - timedelta(minutes=10)\n>>> before.strftime(fmt)\n'2002-10-27 00:50:00 EST-0500'\n>>> eastern.normalize(before).strftime(fmt)\n'2002-10-27 01:50:00 EDT-0400'\n>>> after = eastern.normalize(before + timedelta(minutes=20))\n>>> after.strftime(fmt)\n'2002-10-27 01:10:00 EST-0500'\n\nCreating local times is also tricky, and the reason why working with\nlocal times is not recommended. Unfortunately, you cannot just pass\na ``tzinfo`` argument when constructing a datetime (see the next\nsection for more details)\n\n>>> dt = datetime(2002, 10, 27, 1, 30, 0)\n>>> dt1 = eastern.localize(dt, is_dst=True)\n>>> dt1.strftime(fmt)\n'2002-10-27 01:30:00 EDT-0400'\n>>> dt2 = eastern.localize(dt, is_dst=False)\n>>> dt2.strftime(fmt)\n'2002-10-27 01:30:00 EST-0500'\n\nConverting between timezones is more easily done, using the\nstandard astimezone method.\n\n>>> utc_dt = utc.localize(datetime.utcfromtimestamp(1143408899))\n>>> utc_dt.strftime(fmt)\n'2006-03-26 21:34:59 UTC+0000'\n>>> au_tz = timezone('Australia/Sydney')\n>>> au_dt = utc_dt.astimezone(au_tz)\n>>> au_dt.strftime(fmt)\n'2006-03-27 08:34:59 AEDT+1100'\n>>> utc_dt2 = au_dt.astimezone(utc)\n>>> utc_dt2.strftime(fmt)\n'2006-03-26 21:34:59 UTC+0000'\n>>> utc_dt == utc_dt2\nTrue\n\nYou can take shortcuts when dealing with the UTC side of timezone\nconversions. ``normalize()`` and ``localize()`` are not really\nnecessary when there are no daylight saving time transitions to\ndeal with.\n\n>>> utc_dt = datetime.utcfromtimestamp(1143408899).replace(tzinfo=utc)\n>>> utc_dt.strftime(fmt)\n'2006-03-26 21:34:59 UTC+0000'\n>>> au_tz = timezone('Australia/Sydney')\n>>> au_dt = au_tz.normalize(utc_dt.astimezone(au_tz))\n>>> au_dt.strftime(fmt)\n'2006-03-27 08:34:59 AEDT+1100'\n>>> utc_dt2 = au_dt.astimezone(utc)\n>>> utc_dt2.strftime(fmt)\n'2006-03-26 21:34:59 UTC+0000'\n\n\n``tzinfo`` API\n--------------\n\nThe ``tzinfo`` instances returned by the ``timezone()`` function have\nbeen extended to cope with ambiguous times by adding an ``is_dst``\nparameter to the ``utcoffset()``, ``dst()`` && ``tzname()`` methods.\n\n>>> tz = timezone('America/St_Johns')\n\n>>> normal = datetime(2009, 9, 1)\n>>> ambiguous = datetime(2009, 10, 31, 23, 30)\n\nThe ``is_dst`` parameter is ignored for most timestamps. It is only used\nduring DST transition ambiguous periods to resolve that ambiguity.\n\n>>> print(tz.utcoffset(normal, is_dst=True))\n-1 day, 21:30:00\n>>> print(tz.dst(normal, is_dst=True))\n1:00:00\n>>> tz.tzname(normal, is_dst=True)\n'NDT'\n\n>>> print(tz.utcoffset(ambiguous, is_dst=True))\n-1 day, 21:30:00\n>>> print(tz.dst(ambiguous, is_dst=True))\n1:00:00\n>>> tz.tzname(ambiguous, is_dst=True)\n'NDT'\n\n>>> print(tz.utcoffset(normal, is_dst=False))\n-1 day, 21:30:00\n>>> tz.dst(normal, is_dst=False)\ndatetime.timedelta(0, 3600)\n>>> tz.tzname(normal, is_dst=False)\n'NDT'\n\n>>> print(tz.utcoffset(ambiguous, is_dst=False))\n-1 day, 20:30:00\n>>> tz.dst(ambiguous, is_dst=False)\ndatetime.timedelta(0)\n>>> tz.tzname(ambiguous, is_dst=False)\n'NST'\n\nIf ``is_dst`` is not specified, ambiguous timestamps will raise\nan ``pytz.exceptions.AmbiguousTimeError`` exception.\n\n>>> print(tz.utcoffset(normal))\n-1 day, 21:30:00\n>>> print(tz.dst(normal))\n1:00:00\n>>> tz.tzname(normal)\n'NDT'\n\n>>> import pytz.exceptions\n>>> try:\n...     tz.utcoffset(ambiguous)\n... except pytz.exceptions.AmbiguousTimeError:\n...     print('pytz.exceptions.AmbiguousTimeError: %s' % ambiguous)\npytz.exceptions.AmbiguousTimeError: 2009-10-31 23:30:00\n>>> try:\n...     tz.dst(ambiguous)\n... except pytz.exceptions.AmbiguousTimeError:\n...     print('pytz.exceptions.AmbiguousTimeError: %s' % ambiguous)\npytz.exceptions.AmbiguousTimeError: 2009-10-31 23:30:00\n>>> try:\n...     tz.tzname(ambiguous)\n... except pytz.exceptions.AmbiguousTimeError:\n...     print('pytz.exceptions.AmbiguousTimeError: %s' % ambiguous)\npytz.exceptions.AmbiguousTimeError: 2009-10-31 23:30:00\n\n\nProblems with Localtime\n~~~~~~~~~~~~~~~~~~~~~~~\n\nThe major problem we have to deal with is that certain datetimes\nmay occur twice in a year. For example, in the US/Eastern timezone\non the last Sunday morning in October, the following sequence\nhappens:\n\n    - 01:00 EDT occurs\n    - 1 hour later, instead of 2:00am the clock is turned back 1 hour\n      and 01:00 happens again (this time 01:00 EST)\n\nIn fact, every instant between 01:00 and 02:00 occurs twice. This means\nthat if you try and create a time in the 'US/Eastern' timezone\nthe standard datetime syntax, there is no way to specify if you meant\nbefore of after the end-of-daylight-saving-time transition. Using the\npytz custom syntax, the best you can do is make an educated guess:\n\n>>> loc_dt = eastern.localize(datetime(2002, 10, 27, 1, 30, 00))\n>>> loc_dt.strftime(fmt)\n'2002-10-27 01:30:00 EST-0500'\n\nAs you can see, the system has chosen one for you and there is a 50%\nchance of it being out by one hour. For some applications, this does\nnot matter. However, if you are trying to schedule meetings with people\nin different timezones or analyze log files it is not acceptable.\n\nThe best and simplest solution is to stick with using UTC.  The pytz\npackage encourages using UTC for internal timezone representation by\nincluding a special UTC implementation based on the standard Python\nreference implementation in the Python documentation.\n\nThe UTC timezone unpickles to be the same instance, and pickles to a\nsmaller size than other pytz tzinfo instances.  The UTC implementation\ncan be obtained as pytz.utc, pytz.UTC, or pytz.timezone('UTC').\n\n>>> import pickle, pytz\n>>> dt = datetime(2005, 3, 1, 14, 13, 21, tzinfo=utc)\n>>> naive = dt.replace(tzinfo=None)\n>>> p = pickle.dumps(dt, 1)\n>>> naive_p = pickle.dumps(naive, 1)\n>>> len(p) - len(naive_p)\n17\n>>> new = pickle.loads(p)\n>>> new == dt\nTrue\n>>> new is dt\nFalse\n>>> new.tzinfo is dt.tzinfo\nTrue\n>>> pytz.utc is pytz.UTC is pytz.timezone('UTC')\nTrue\n\nNote that some other timezones are commonly thought of as the same (GMT,\nGreenwich, Universal, etc.). The definition of UTC is distinct from these\nother timezones, and they are not equivalent. For this reason, they will\nnot compare the same in Python.\n\n>>> utc == pytz.timezone('GMT')\nFalse\n\nSee the section `What is UTC`_, below.\n\nIf you insist on working with local times, this library provides a\nfacility for constructing them unambiguously:\n\n>>> loc_dt = datetime(2002, 10, 27, 1, 30, 00)\n>>> est_dt = eastern.localize(loc_dt, is_dst=True)\n>>> edt_dt = eastern.localize(loc_dt, is_dst=False)\n>>> print(est_dt.strftime(fmt) + ' / ' + edt_dt.strftime(fmt))\n2002-10-27 01:30:00 EDT-0400 / 2002-10-27 01:30:00 EST-0500\n\nIf you pass None as the is_dst flag to localize(), pytz will refuse to\nguess and raise exceptions if you try to build ambiguous or non-existent\ntimes.\n\nFor example, 1:30am on 27th Oct 2002 happened twice in the US/Eastern\ntimezone when the clocks where put back at the end of Daylight Saving\nTime:\n\n>>> dt = datetime(2002, 10, 27, 1, 30, 00)\n>>> try:\n...     eastern.localize(dt, is_dst=None)\n... except pytz.exceptions.AmbiguousTimeError:\n...     print('pytz.exceptions.AmbiguousTimeError: %s' % dt)\npytz.exceptions.AmbiguousTimeError: 2002-10-27 01:30:00\n\nSimilarly, 2:30am on 7th April 2002 never happened at all in the\nUS/Eastern timezone, as the clocks where put forward at 2:00am skipping\nthe entire hour:\n\n>>> dt = datetime(2002, 4, 7, 2, 30, 00)\n>>> try:\n...     eastern.localize(dt, is_dst=None)\n... except pytz.exceptions.NonExistentTimeError:\n...     print('pytz.exceptions.NonExistentTimeError: %s' % dt)\npytz.exceptions.NonExistentTimeError: 2002-04-07 02:30:00\n\nBoth of these exceptions share a common base class to make error handling\neasier:\n\n>>> isinstance(pytz.AmbiguousTimeError(), pytz.InvalidTimeError)\nTrue\n>>> isinstance(pytz.NonExistentTimeError(), pytz.InvalidTimeError)\nTrue\n\n\nA special case is where countries change their timezone definitions\nwith no daylight savings time switch. For example, in 1915 Warsaw\nswitched from Warsaw time to Central European time with no daylight savings\ntransition. So at the stroke of midnight on August 5th 1915 the clocks\nwere wound back 24 minutes creating an ambiguous time period that cannot\nbe specified without referring to the timezone abbreviation or the\nactual UTC offset. In this case midnight happened twice, neither time\nduring a daylight saving time period. pytz handles this transition by\ntreating the ambiguous period before the switch as daylight savings\ntime, and the ambiguous period after as standard time.\n\n\n>>> warsaw = pytz.timezone('Europe/Warsaw')\n>>> amb_dt1 = warsaw.localize(datetime(1915, 8, 4, 23, 59, 59), is_dst=True)\n>>> amb_dt1.strftime(fmt)\n'1915-08-04 23:59:59 WMT+0124'\n>>> amb_dt2 = warsaw.localize(datetime(1915, 8, 4, 23, 59, 59), is_dst=False)\n>>> amb_dt2.strftime(fmt)\n'1915-08-04 23:59:59 CET+0100'\n>>> switch_dt = warsaw.localize(datetime(1915, 8, 5, 00, 00, 00), is_dst=False)\n>>> switch_dt.strftime(fmt)\n'1915-08-05 00:00:00 CET+0100'\n>>> str(switch_dt - amb_dt1)\n'0:24:01'\n>>> str(switch_dt - amb_dt2)\n'0:00:01'\n\nThe best way of creating a time during an ambiguous time period is\nby converting from another timezone such as UTC:\n\n>>> utc_dt = datetime(1915, 8, 4, 22, 36, tzinfo=pytz.utc)\n>>> utc_dt.astimezone(warsaw).strftime(fmt)\n'1915-08-04 23:36:00 CET+0100'\n\nThe standard Python way of handling all these ambiguities is not to\nhandle them, such as demonstrated in this example using the US/Eastern\ntimezone definition from the Python documentation (Note that this\nimplementation only works for dates between 1987 and 2006 - it is\nincluded for tests only!):\n\n>>> from pytz.reference import Eastern # pytz.reference only for tests\n>>> dt = datetime(2002, 10, 27, 0, 30, tzinfo=Eastern)\n>>> str(dt)\n'2002-10-27 00:30:00-04:00'\n>>> str(dt + timedelta(hours=1))\n'2002-10-27 01:30:00-05:00'\n>>> str(dt + timedelta(hours=2))\n'2002-10-27 02:30:00-05:00'\n>>> str(dt + timedelta(hours=3))\n'2002-10-27 03:30:00-05:00'\n\nNotice the first two results? At first glance you might think they are\ncorrect, but taking the UTC offset into account you find that they are\nactually two hours appart instead of the 1 hour we asked for.\n\n>>> from pytz.reference import UTC # pytz.reference only for tests\n>>> str(dt.astimezone(UTC))\n'2002-10-27 04:30:00+00:00'\n>>> str((dt + timedelta(hours=1)).astimezone(UTC))\n'2002-10-27 06:30:00+00:00'\n\n\nCountry Information\n~~~~~~~~~~~~~~~~~~~\n\nA mechanism is provided to access the timezones commonly in use\nfor a particular country, looked up using the ISO 3166 country code.\nIt returns a list of strings that can be used to retrieve the relevant\ntzinfo instance using ``pytz.timezone()``:\n\n>>> print(' '.join(pytz.country_timezones['nz']))\nPacific/Auckland Pacific/Chatham\n\nThe Olson database comes with a ISO 3166 country code to English country\nname mapping that pytz exposes as a dictionary:\n\n>>> print(pytz.country_names['nz'])\nNew Zealand\n\n\nWhat is UTC\n~~~~~~~~~~~\n\n'UTC' is `Coordinated Universal Time`_. It is a successor to, but distinct\nfrom, Greenwich Mean Time (GMT) and the various definitions of Universal\nTime. UTC is now the worldwide standard for regulating clocks and time\nmeasurement.\n\nAll other timezones are defined relative to UTC, and include offsets like\nUTC+0800 - hours to add or subtract from UTC to derive the local time. No\ndaylight saving time occurs in UTC, making it a useful timezone to perform\ndate arithmetic without worrying about the confusion and ambiguities caused\nby daylight saving time transitions, your country changing its timezone, or\nmobile computers that roam through multiple timezones.\n\n..  _Coordinated Universal Time: https://en.wikipedia.org/wiki/Coordinated_Universal_Time\n\n\nHelpers\n~~~~~~~\n\nThere are two lists of timezones provided.\n\n``all_timezones`` is the exhaustive list of the timezone names that can\nbe used.\n\n>>> from pytz import all_timezones\n>>> len(all_timezones) >= 500\nTrue\n>>> 'Etc/Greenwich' in all_timezones\nTrue\n\n``common_timezones`` is a list of useful, current timezones. It doesn't\ncontain deprecated zones or historical zones, except for a few I've\ndeemed in common usage, such as US/Eastern (open a bug report if you\nthink other timezones are deserving of being included here). It is also\na sequence of strings.\n\n>>> from pytz import common_timezones\n>>> len(common_timezones) < len(all_timezones)\nTrue\n>>> 'Etc/Greenwich' in common_timezones\nFalse\n>>> 'Australia/Melbourne' in common_timezones\nTrue\n>>> 'US/Eastern' in common_timezones\nTrue\n>>> 'Canada/Eastern' in common_timezones\nTrue\n>>> 'Australia/Yancowinna' in all_timezones\nTrue\n>>> 'Australia/Yancowinna' in common_timezones\nFalse\n\nBoth ``common_timezones`` and ``all_timezones`` are alphabetically\nsorted:\n\n>>> common_timezones_dupe = common_timezones[:]\n>>> common_timezones_dupe.sort()\n>>> common_timezones == common_timezones_dupe\nTrue\n>>> all_timezones_dupe = all_timezones[:]\n>>> all_timezones_dupe.sort()\n>>> all_timezones == all_timezones_dupe\nTrue\n\n``all_timezones`` and ``common_timezones`` are also available as sets.\n\n>>> from pytz import all_timezones_set, common_timezones_set\n>>> 'US/Eastern' in all_timezones_set\nTrue\n>>> 'US/Eastern' in common_timezones_set\nTrue\n>>> 'Australia/Victoria' in common_timezones_set\nFalse\n\nYou can also retrieve lists of timezones used by particular countries\nusing the ``country_timezones()`` function. It requires an ISO-3166\ntwo letter country code.\n\n>>> from pytz import country_timezones\n>>> print(' '.join(country_timezones('ch')))\nEurope/Zurich\n>>> print(' '.join(country_timezones('CH')))\nEurope/Zurich\n\n\nInternationalization - i18n/l10n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nPytz is an interface to the IANA database, which uses ASCII names. The `Unicode  Consortium's Unicode Locales (CLDR) <http://cldr.unicode.org>`_\nproject provides translations. Thomas Khyn's\n`l18n <https://pypi.org/project/l18n/>`_ package can be used to access\nthese translations from Python.\n\n\nLicense\n~~~~~~~\n\nMIT license.\n\nThis code is also available as part of Zope 3 under the Zope Public\nLicense,  Version 2.1 (ZPL).\n\nI'm happy to relicense this code if necessary for inclusion in other\nopen source projects.\n\n\nLatest Versions\n~~~~~~~~~~~~~~~\n\nThis package will be updated after releases of the Olson timezone\ndatabase.  The latest version can be downloaded from the `Python Package\nIndex <https://pypi.org/project/pytz/>`_.  The code that is used\nto generate this distribution is hosted on launchpad.net and available\nusing git::\n\n    git clone https://git.launchpad.net/pytz\n\nA mirror on github is also available at https://github.com/stub42/pytz\n\nAnnouncements of new releases are made on\n`Launchpad <https://launchpad.net/pytz>`_, and the\n`Atom feed <http://feeds.launchpad.net/pytz/announcements.atom>`_\nhosted there.\n\n\nBugs, Feature Requests & Patches\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nBugs can be reported using `Launchpad Bugs <https://bugs.launchpad.net/pytz>`_.\n\n\nSecurity Issues\n~~~~~~~~~~~~~~~\n\nReports about security issues can be made via `Tidelift <https://tidelift.com/security>`_.\n\n\nIssues & Limitations\n~~~~~~~~~~~~~~~~~~~~\n\n- Offsets from UTC are rounded to the nearest whole minute, so timezones\n  such as Europe/Amsterdam pre 1937 will be up to 30 seconds out. This\n  is a limitation of the Python datetime library.\n\n- If you think a timezone definition is incorrect, I probably can't fix\n  it. pytz is a direct translation of the Olson timezone database, and\n  changes to the timezone definitions need to be made to this source.\n  If you find errors they should be reported to the time zone mailing\n  list, linked from http://www.iana.org/time-zones.\n\n\nFurther Reading\n~~~~~~~~~~~~~~~\n\nMore info than you want to know about timezones:\nhttp://www.twinsun.com/tz/tz-link.htm\n\n\nContact\n~~~~~~~\n\nStuart Bishop <stuart@stuartbishop.net>\n\n\n\n\n",
          "name": "pytz",
          "author": [
            {
              "type": "Person",
              "name": "Stuart Bishop",
              "email": [
                "stuart@stuartbishop.net"
              ],
              "familyName": [
                "Bishop"
              ],
              "givenName": [
                "Stuart"
              ]
            }
          ],
          "keywords": "timezone,tzinfo,datetime,olson,time",
          "license": "MIT",
          "codeRepository": "https://pypi.org/project/pytz/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python",
          "applicationCategory": [
            "Software Development"
          ],
          "applicationSubCategory": [
            "Libraries"
          ]
        },
        {
          "type": "SoftwarePackage",
          "description": "# PyZMQ: Python bindings for ØMQ\n\n[![Build Status](https://github.com/zeromq/pyzmq/actions/workflows/test.yml/badge.svg)](https://github.com/zeromq/pyzmq/actions/workflows/test.yml)\n\nThis package contains Python bindings for [ØMQ](http://www.zeromq.org).\nØMQ is a lightweight and fast messaging implementation.\n\nPyZMQ should work with any reasonable version of Python (≥ 3.4),\nas well as Python 2.7 and 3.3, as well as PyPy.\nThe Cython backend used by CPython supports libzmq ≥ 2.1.4 (including 3.2.x and 4.x),\nbut the CFFI backend used by PyPy only supports libzmq ≥ 3.2.2 (including 4.x).\n\nFor a summary of changes to pyzmq, see our\n[changelog](https://pyzmq.readthedocs.org/en/latest/changelog.html).\n\n### ØMQ 3.x, 4.x\n\nPyZMQ fully supports the 3.x and 4.x APIs of libzmq,\ndeveloped at [zeromq/libzmq](https://github.com/zeromq/libzmq).\nNo code to change, no flags to pass,\njust build pyzmq against the latest and it should work.\n\nPyZMQ does not support the old libzmq 2 API on PyPy.\n\n## Documentation\n\nSee PyZMQ's Sphinx-generated\n[documentation](https://zeromq.github.io/pyzmq) on GitHub for API\ndetails, and some notes on Python and Cython development. If you want to\nlearn about using ØMQ in general, the excellent [ØMQ\nGuide](http://zguide.zeromq.org/py:all) is the place to start, which has a\nPython version of every example. We also have some information on our\n[wiki](https://github.com/zeromq/pyzmq/wiki).\n\n## Downloading\n\nUnless you specifically want to develop PyZMQ, we recommend downloading\nthe PyZMQ source code or wheels from\n[PyPI](https://pypi.io/project/pyzmq),\nor install with conda.\n\nYou can also get the latest source code from our GitHub repository, but\nbuilding from the repository will require that you install recent Cython.\n\n## Building and installation\n\nFor more detail on building pyzmq, see [our Wiki](https://github.com/zeromq/pyzmq/wiki/Building-and-Installing-PyZMQ).\n\nWe build wheels for macOS, Windows, and Linux, so you can get a binary on those platforms with:\n\n    pip install pyzmq\n\nbut compiling from source with `pip install pyzmq` should work in most environments.\nEspecially on macOS, make sure you are using the latest pip (≥ 8), or it may not find the right wheels.\n\nIf the wheel doesn't work for some reason, or you want to force pyzmq to be compiled\n(this is often preferable if you already have libzmq installed and configured the way you want it),\nyou can force installation with:\n\n    pip install --no-binary=:all: pyzmq\n\nWhen compiling pyzmq (e.g. installing with pip on Linux),\nit is generally recommended that zeromq be installed separately,\nvia homebrew, apt, yum, etc:\n\n    # Debian-based\n    sudo apt-get install libzmq3-dev\n\n    # RHEL-based\n    sudo yum install libzmq3-devel\n\nIf this is not available, pyzmq will _try_ to build libzmq as a Python Extension,\nthough this is not guaranteed to work.\n\nBuilding pyzmq from the git repo (including release tags on GitHub) requires Cython.\n\n## Old versions\n\npyzmq 16 drops support Python 2.6 and 3.2.\nIf you need to use one of those Python versions, you can pin your pyzmq version to before 16:\n\n    pip install 'pyzmq<16'\n\nFor libzmq 2.0.x, use 'pyzmq<2.1'\n\npyzmq-2.1.11 was the last version of pyzmq to support Python 2.5,\nand pyzmq ≥ 2.2.0 requires Python ≥ 2.6.\npyzmq-13.0.0 introduces PyPy support via CFFI, which only supports libzmq-3.2.2 and newer.\n\nPyZMQ releases ≤ 2.2.0 matched libzmq versioning, but this is no longer the case,\nstarting with PyZMQ 13.0.0 (it was the thirteenth release, so why not?).\nPyZMQ ≥ 13.0 follows semantic versioning conventions accounting only for PyZMQ itself.\n\n\n",
          "name": "pyzmq",
          "author": [
            {
              "type": "Person",
              "name": "Brian E.",
              "familyName": [
                "E."
              ],
              "givenName": [
                "Brian"
              ]
            }
          ],
          "license": "LGPL+BSD",
          "codeRepository": "https://pypi.org/project/pyzmq/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python",
          "applicationCategory": [
            "System"
          ],
          "applicationSubCategory": [
            "Networking"
          ],
          "operatingSystem": [
            {
              "type": "OperatingSystem",
              "name": "macOS"
            },
            {
              "type": "OperatingSystem",
              "name": "Windows"
            }
          ]
        },
        {
          "type": "SoftwarePackage",
          "description": "# Requests\n\n**Requests** is a simple, yet elegant HTTP library.\n\n```python\n>>> import requests\n>>> r = requests.get('https://api.github.com/user', auth=('user', 'pass'))\n>>> r.status_code\n200\n>>> r.headers['content-type']\n'application/json; charset=utf8'\n>>> r.encoding\n'utf-8'\n>>> r.text\n'{\"type\":\"User\"...'\n>>> r.json()\n{'disk_usage': 368627, 'private_gists': 484, ...}\n```\n\nRequests allows you to send HTTP/1.1 requests extremely easily. There’s no need to manually add query strings to your URLs, or to form-encode your `PUT` & `POST` data — but nowadays, just use the `json` method!\n\nRequests is one of the most downloaded Python package today, pulling in around `14M downloads / week`— according to GitHub, Requests is currently [depended upon](https://github.com/psf/requests/network/dependents?package_id=UGFja2FnZS01NzA4OTExNg%3D%3D) by `500,000+` repositories. You may certainly put your trust in this code.\n\n[![Downloads](https://pepy.tech/badge/requests/month)](https://pepy.tech/project/requests/month)\n[![Supported Versions](https://img.shields.io/pypi/pyversions/requests.svg)](https://pypi.org/project/requests)\n[![Contributors](https://img.shields.io/github/contributors/psf/requests.svg)](https://github.com/psf/requests/graphs/contributors)\n\n## Installing Requests and Supported Versions\n\nRequests is available on PyPI:\n\n```console\n$ python -m pip install requests\n```\n\nRequests officially supports Python 2.7 & 3.5+.\n\n## Supported Features & Best–Practices\n\nRequests is ready for the demands of building robust and reliable HTTP–speaking applications, for the needs of today.\n\n- Keep-Alive & Connection Pooling\n- International Domains and URLs\n- Sessions with Cookie Persistence\n- Browser-style TLS/SSL Verification\n- Basic & Digest Authentication\n- Familiar `dict`–like Cookies\n- Automatic Content Decompression and Decoding\n- Multi-part File Uploads\n- SOCKS Proxy Support\n- Connection Timeouts\n- Streaming Downloads\n- Automatic honoring of `.netrc`\n- Chunked HTTP Requests\n\n## API Reference and User Guide available on [Read the Docs](https://requests.readthedocs.io)\n\n[![Read the Docs](https://raw.githubusercontent.com/psf/requests/master/ext/ss.png)](https://requests.readthedocs.io)\n\n---\n\n[![Kenneth Reitz](https://raw.githubusercontent.com/psf/requests/master/ext/kr.png)](https://kennethreitz.org) [![Python Software Foundation](https://raw.githubusercontent.com/psf/requests/master/ext/psf.png)](https://www.python.org/psf)\n\n\n",
          "name": "requests",
          "author": [
            {
              "type": "Person",
              "name": "Kenneth Reitz",
              "email": [
                "me@kennethreitz.org"
              ],
              "familyName": [
                "Reitz"
              ],
              "givenName": [
                "Kenneth"
              ]
            }
          ],
          "license": "Apache 2.0",
          "codeRepository": "https://pypi.org/project/requests/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python"
        },
        {
          "type": "SoftwarePackage",
          "description": "Retrying\n=========================\n.. image:: https://travis-ci.org/rholder/retrying.png?branch=master\n    :target: https://travis-ci.org/rholder/retrying\n\n.. image:: https://badge.fury.io/py/retrying.png\n    :target: https://pypi.python.org/pypi/retrying\n\n.. image:: https://pypip.in/d/retrying/badge.png\n    :target: https://pypi.python.org/pypi/retrying\n\nRetrying is an Apache 2.0 licensed general-purpose retrying library, written in\nPython, to simplify the task of adding retry behavior to just about anything.\n\n\nThe simplest use case is retrying a flaky function whenever an Exception occurs\nuntil a value is returned.\n\n.. code-block:: python\n\n    import random\n    from retrying import retry\n\n    @retry\n    def do_something_unreliable():\n        if random.randint(0, 10) > 1:\n            raise IOError(\"Broken sauce, everything is hosed!!!111one\")\n        else:\n            return \"Awesome sauce!\"\n\n    print do_something_unreliable()\n\n\nFeatures\n--------\n\n- Generic Decorator API\n- Specify stop condition (i.e. limit by number of attempts)\n- Specify wait condition (i.e. exponential backoff sleeping between attempts)\n- Customize retrying on Exceptions\n- Customize retrying on expected returned result\n\n\nInstallation\n------------\n\nTo install retrying, simply:\n\n.. code-block:: bash\n\n    $ pip install retrying\n\nOr, if you absolutely must:\n\n.. code-block:: bash\n\n    $ easy_install retrying\n\nBut, you might regret that later.\n\n\nExamples\n----------\n\nAs you saw above, the default behavior is to retry forever without waiting.\n\n.. code-block:: python\n\n    @retry\n    def never_give_up_never_surrender():\n        print \"Retry forever ignoring Exceptions, don't wait between retries\"\n\n\nLet's be a little less persistent and set some boundaries, such as the number of attempts before giving up.\n\n.. code-block:: python\n\n    @retry(stop_max_attempt_number=7)\n    def stop_after_7_attempts():\n        print \"Stopping after 7 attempts\"\n\nWe don't have all day, so let's set a boundary for how long we should be retrying stuff.\n\n.. code-block:: python\n\n    @retry(stop_max_delay=10000)\n    def stop_after_10_s():\n        print \"Stopping after 10 seconds\"\n\nMost things don't like to be polled as fast as possible, so let's just wait 2 seconds between retries.\n\n.. code-block:: python\n\n    @retry(wait_fixed=2000)\n    def wait_2_s():\n        print \"Wait 2 second between retries\"\n\n\nSome things perform best with a bit of randomness injected.\n\n.. code-block:: python\n\n    @retry(wait_random_min=1000, wait_random_max=2000)\n    def wait_random_1_to_2_s():\n        print \"Randomly wait 1 to 2 seconds between retries\"\n\nThen again, it's hard to beat exponential backoff when retrying distributed services and other remote endpoints.\n\n.. code-block:: python\n\n    @retry(wait_exponential_multiplier=1000, wait_exponential_max=10000)\n    def wait_exponential_1000():\n        print \"Wait 2^x * 1000 milliseconds between each retry, up to 10 seconds, then 10 seconds afterwards\"\n\n\nWe have a few options for dealing with retries that raise specific or general exceptions, as in the cases here.\n\n.. code-block:: python\n\n    def retry_if_io_error(exception):\n        \"\"\"Return True if we should retry (in this case when it's an IOError), False otherwise\"\"\"\n        return isinstance(exception, IOError)\n\n    @retry(retry_on_exception=retry_if_io_error)\n    def might_io_error():\n        print \"Retry forever with no wait if an IOError occurs, raise any other errors\"\n\n    @retry(retry_on_exception=retry_if_io_error, wrap_exception=True)\n    def only_raise_retry_error_when_not_io_error():\n        print \"Retry forever with no wait if an IOError occurs, raise any other errors wrapped in RetryError\"\n\nWe can also use the result of the function to alter the behavior of retrying.\n\n.. code-block:: python\n\n    def retry_if_result_none(result):\n        \"\"\"Return True if we should retry (in this case when result is None), False otherwise\"\"\"\n        return result is None\n\n    @retry(retry_on_result=retry_if_result_none)\n    def might_return_none():\n        print \"Retry forever ignoring Exceptions with no wait if return value is None\"\n\n\nAny combination of stop, wait, etc. is also supported to give you the freedom to mix and match.\n\nContribute\n----------\n\n#. Check for open issues or open a fresh issue to start a discussion around a feature idea or a bug.\n#. Fork `the repository`_ on GitHub to start making your changes to the **master** branch (or branch off of it).\n#. Write a test which shows that the bug was fixed or that the feature works as expected.\n#. Send a pull request and bug the maintainer until it gets merged and published. :) Make sure to add yourself to AUTHORS_.\n\n.. _`the repository`: http://github.com/rholder/retrying\n.. _AUTHORS: https://github.com/rholder/retrying/blob/master/AUTHORS.rst\n\n\n.. :changelog:\n\nHistory\n-------\n1.3.3 (2014-12-14)\n++++++++++++++++++\n- Add minimum six version of 1.7.0 since anything less will break things\n\n1.3.2 (2014-11-09)\n++++++++++++++++++\n- Ensure we wrap the decorated functions to prevent information loss\n- Allow a jitter value to be passed in\n\n1.3.1 (2014-09-30)\n++++++++++++++++++\n- Add requirements.txt to MANIFEST.in to fix pip installs\n\n1.3.0 (2014-09-30)\n++++++++++++++++++\n- Add upstream six dependency, remove embedded six functionality\n\n1.2.3 (2014-08-25)\n++++++++++++++++++\n- Add support for custom wait and stop functions\n\n1.2.2 (2014-06-20)\n++++++++++++++++++\n- Bug fix to not raise a RetryError on failure when exceptions aren't being wrapped\n\n1.2.1 (2014-05-05)\n++++++++++++++++++\n- Bug fix for explicitly passing in a wait type\n\n1.2.0 (2014-05-04)\n++++++++++++++++++\n- Remove the need for explicit specification of stop/wait types when they can be inferred\n- Add a little checking for exception propagation\n\n1.1.0 (2014-03-31)\n++++++++++++++++++\n- Added proper exception propagation through reraising with Python 2.6, 2.7, and 3.2 compatibility\n- Update test suite for behavior changes\n\n1.0.1 (2013-03-20)\n++++++++++++++++++\n- Fixed a bug where classes not extending from the Python exception hierarchy could slip through\n- Update test suite for custom Python exceptions\n\n1.0.0 (2013-01-21)\n++++++++++++++++++\n- First stable, tested version now exists\n- Apache 2.0 license applied\n- Sanitizing some setup.py and test suite running\n- Added Travis CI support",
          "name": "retrying",
          "author": [
            {
              "type": "Person",
              "name": "Ray Holder",
              "email": [
                "UNKNOWN"
              ],
              "familyName": [
                "Holder"
              ],
              "givenName": [
                "Ray"
              ]
            }
          ],
          "keywords": "decorator decorators retry retrying exception exponential backoff",
          "license": "Apache 2.0",
          "version": "==1.3.3",
          "codeRepository": "https://pypi.org/project/retrying/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python",
          "applicationCategory": [
            "Internet",
            "Utilities"
          ]
        },
        {
          "type": "SoftwarePackage",
          "description": "rfc3986\n=======\n\nA Python implementation of `RFC 3986`_ including validation and authority \nparsing.\n\nInstallation\n------------\n\nUse pip to install ``rfc3986`` like so::\n\n    pip install rfc3986\n\nLicense\n-------\n\n`Apache License Version 2.0`_\n\nExample Usage\n-------------\n\nThe following are the two most common use cases envisioned for ``rfc3986``.\n\nReplacing ``urlparse``\n``````````````````````\n\nTo parse a URI and receive something very similar to the standard library's\n``urllib.parse.urlparse``\n\n.. code-block:: python\n\n    from rfc3986 import urlparse\n\n    ssh = urlparse('ssh://user@git.openstack.org:29418/openstack/glance.git')\n    print(ssh.scheme)  # => ssh\n    print(ssh.userinfo)  # => user\n    print(ssh.params)  # => None\n    print(ssh.port)  # => 29418\n\nTo create a copy of it with new pieces you can use ``copy_with``:\n\n.. code-block:: python\n\n    new_ssh = ssh.copy_with(\n        scheme='https'\n        userinfo='',\n        port=443,\n        path='/openstack/glance'\n    )\n    print(new_ssh.scheme)  # => https\n    print(new_ssh.userinfo)  # => None\n    # etc.\n\nStrictly Parsing a URI and Applying Validation\n``````````````````````````````````````````````\n\nTo parse a URI into a convenient named tuple, you can simply:\n\n.. code-block:: python\n\n    from rfc3986 import uri_reference\n\n    example = uri_reference('http://example.com')\n    email = uri_reference('mailto:user@domain.com')\n    ssh = uri_reference('ssh://user@git.openstack.org:29418/openstack/keystone.git')\n\nWith a parsed URI you can access data about the components:\n\n.. code-block:: python\n\n    print(example.scheme)  # => http\n    print(email.path)  # => user@domain.com\n    print(ssh.userinfo)  # => user\n    print(ssh.host)  # => git.openstack.org\n    print(ssh.port)  # => 29418\n\nIt can also parse URIs with unicode present:\n\n.. code-block:: python\n\n    uni = uri_reference(b'http://httpbin.org/get?utf8=\\xe2\\x98\\x83')  # ☃\n    print(uni.query)  # utf8=%E2%98%83\n\nWith a parsed URI you can also validate it:\n\n.. code-block:: python\n\n    if ssh.is_valid():\n        subprocess.call(['git', 'clone', ssh.unsplit()])\n\nYou can also take a parsed URI and normalize it:\n\n.. code-block:: python\n\n    mangled = uri_reference('hTTp://exAMPLe.COM')\n    print(mangled.scheme)  # => hTTp\n    print(mangled.authority)  # => exAMPLe.COM\n\n    normal = mangled.normalize()\n    print(normal.scheme)  # => http\n    print(mangled.authority)  # => example.com\n\nBut these two URIs are (functionally) equivalent:\n\n.. code-block:: python\n\n    if normal == mangled:\n        webbrowser.open(normal.unsplit())\n\nYour paths, queries, and fragments are safe with us though:\n\n.. code-block:: python\n\n    mangled = uri_reference('hTTp://exAMPLe.COM/Some/reallY/biZZare/pAth')\n    normal = mangled.normalize()\n    assert normal == 'hTTp://exAMPLe.COM/Some/reallY/biZZare/pAth'\n    assert normal == 'http://example.com/Some/reallY/biZZare/pAth'\n    assert normal != 'http://example.com/some/really/bizzare/path'\n\nIf you do not actually need a real reference object and just want to normalize\nyour URI:\n\n.. code-block:: python\n\n    from rfc3986 import normalize_uri\n\n    assert (normalize_uri('hTTp://exAMPLe.COM/Some/reallY/biZZare/pAth') ==\n            'http://example.com/Some/reallY/biZZare/pAth')\n\nYou can also very simply validate a URI:\n\n.. code-block:: python\n\n    from rfc3986 import is_valid_uri\n\n    assert is_valid_uri('hTTp://exAMPLe.COM/Some/reallY/biZZare/pAth')\n\nRequiring Components\n~~~~~~~~~~~~~~~~~~~~\n\nYou can validate that a particular string is a valid URI and require\nindependent components:\n\n.. code-block:: python\n\n    from rfc3986 import is_valid_uri\n\n    assert is_valid_uri('http://localhost:8774/v2/resource',\n                        require_scheme=True,\n                        require_authority=True,\n                        require_path=True)\n\n    # Assert that a mailto URI is invalid if you require an authority\n    # component\n    assert is_valid_uri('mailto:user@example.com', require_authority=True) is False\n\nIf you have an instance of a ``URIReference``, you can pass the same arguments\nto ``URIReference#is_valid``, e.g.,\n\n.. code-block:: python\n\n    from rfc3986 import uri_reference\n\n    http = uri_reference('http://localhost:8774/v2/resource')\n    assert uri.is_valid(require_scheme=True,\n                        require_authority=True,\n                        require_path=True)\n\n    # Assert that a mailto URI is invalid if you require an authority\n    # component\n    mailto = uri_reference('mailto:user@example.com')\n    assert uri.is_valid(require_authority=True) is False\n\nAlternatives\n------------\n\n- `rfc3987 <https://pypi.python.org/pypi/rfc3987/1.3.4>`_\n\n  This is a direct competitor to this library, with extra features,\n  licensed under the GPL.\n\n- `uritools <https://pypi.python.org/pypi/uritools/0.5.1>`_\n\n  This can parse URIs in the manner of RFC 3986 but provides no validation and\n  only recently added Python 3 support.\n\n- Standard library's `urlparse`/`urllib.parse`\n\n  The functions in these libraries can only split a URI (valid or not) and\n  provide no validation.\n\nContributing\n------------\n\nThis project follows and enforces the Python Software Foundation's `Code of\nConduct <https://www.python.org/psf/codeofconduct/>`_.\n\nIf you would like to contribute but do not have a bug or feature in mind, feel\nfree to email Ian and find out how you can help.\n\nThe git repository for this project is maintained at\nhttps://github.com/python-hyper/rfc3986\n\n.. _RFC 3986: http://tools.ietf.org/html/rfc3986\n.. _Apache License Version 2.0: https://www.apache.org/licenses/LICENSE-2.0\n\n\n",
          "name": "rfc3986",
          "author": [
            {
              "type": "Person",
              "name": "Ian Stapleton",
              "familyName": [
                "Stapleton"
              ],
              "givenName": [
                "Ian"
              ]
            }
          ],
          "license": "Apache 2.0",
          "version": "==1.4.0",
          "codeRepository": "https://pypi.org/project/rfc3986/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python"
        },
        {
          "type": "SoftwarePackage",
          "description": "[![Downloads](https://pepy.tech/badge/rich/month)](https://pepy.tech/project/rich)\n[![PyPI version](https://badge.fury.io/py/rich.svg)](https://badge.fury.io/py/rich)\n[![codecov](https://codecov.io/gh/willmcgugan/rich/branch/master/graph/badge.svg)](https://codecov.io/gh/willmcgugan/rich)\n[![Rich blog](https://img.shields.io/badge/blog-rich%20news-yellowgreen)](https://www.willmcgugan.com/tag/rich/)\n[![Twitter Follow](https://img.shields.io/twitter/follow/willmcgugan.svg?style=social)](https://twitter.com/willmcgugan)\n\n![Logo](https://github.com/willmcgugan/rich/raw/master/imgs/logo.svg)\n\n[中文 readme](https://github.com/willmcgugan/rich/blob/master/README.cn.md) • [Lengua española readme](https://github.com/willmcgugan/rich/blob/master/README.es.md) • [Deutsche readme](https://github.com/willmcgugan/rich/blob/master/README.de.md) • [Läs på svenska](https://github.com/willmcgugan/rich/blob/master/README.sv.md) • [日本語 readme](https://github.com/willmcgugan/rich/blob/master/README.ja.md) • [한국어 readme](https://github.com/willmcgugan/rich/blob/master/README.kr.md)\n\nRich is a Python library for _rich_ text and beautiful formatting in the terminal.\n\nThe [Rich API](https://rich.readthedocs.io/en/latest/) makes it easy to add color and style to terminal output. Rich can also render pretty tables, progress bars, markdown, syntax highlighted source code, tracebacks, and more — out of the box.\n\n![Features](https://github.com/willmcgugan/rich/raw/master/imgs/features.png)\n\nFor a video introduction to Rich see [calmcode.io](https://calmcode.io/rich/introduction.html) by [@fishnets88](https://twitter.com/fishnets88).\n\nSee what [people are saying about Rich](https://www.willmcgugan.com/blog/pages/post/rich-tweets/).\n\n## Compatibility\n\nRich works with Linux, OSX, and Windows. True color / emoji works with new Windows Terminal, classic terminal is limited to 16 colors. Rich requires Python 3.6.1 or later.\n\nRich works with [Jupyter notebooks](https://jupyter.org/) with no additional configuration required.\n\n## Installing\n\nInstall with `pip` or your favorite PyPi package manager.\n\n```\npip install rich\n```\n\nRun the following to test Rich output on your terminal:\n\n```\npython -m rich\n```\n\n## Rich Print\n\nTo effortlessly add rich output to your application, you can import the [rich print](https://rich.readthedocs.io/en/latest/introduction.html#quick-start) method, which has the same signature as the builtin Python function. Try this:\n\n```python\nfrom rich import print\n\nprint(\"Hello, [bold magenta]World[/bold magenta]!\", \":vampire:\", locals())\n```\n\n![Hello World](https://github.com/willmcgugan/rich/raw/master/imgs/print.png)\n\n## Rich REPL\n\nRich can be installed in the Python REPL, so that any data structures will be pretty printed and highlighted.\n\n```python\n>>> from rich import pretty\n>>> pretty.install()\n```\n\n![REPL](https://github.com/willmcgugan/rich/raw/master/imgs/repl.png)\n\n## Using the Console\n\nFor more control over rich terminal content, import and construct a [Console](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console) object.\n\n```python\nfrom rich.console import Console\n\nconsole = Console()\n```\n\nThe Console object has a `print` method which has an intentionally similar interface to the builtin `print` function. Here's an example of use:\n\n```python\nconsole.print(\"Hello\", \"World!\")\n```\n\nAs you might expect, this will print `\"Hello World!\"` to the terminal. Note that unlike the builtin `print` function, Rich will word-wrap your text to fit within the terminal width.\n\nThere are a few ways of adding color and style to your output. You can set a style for the entire output by adding a `style` keyword argument. Here's an example:\n\n```python\nconsole.print(\"Hello\", \"World!\", style=\"bold red\")\n```\n\nThe output will be something like the following:\n\n![Hello World](https://github.com/willmcgugan/rich/raw/master/imgs/hello_world.png)\n\nThat's fine for styling a line of text at a time. For more finely grained styling, Rich renders a special markup which is similar in syntax to [bbcode](https://en.wikipedia.org/wiki/BBCode). Here's an example:\n\n```python\nconsole.print(\"Where there is a [bold cyan]Will[/bold cyan] there [u]is[/u] a [i]way[/i].\")\n```\n\n![Console Markup](https://github.com/willmcgugan/rich/raw/master/imgs/where_there_is_a_will.png)\n\nYou can use a Console object to generate sophisticated output with minimal effort. See the [Console API](https://rich.readthedocs.io/en/latest/console.html) docs for details.\n\n## Rich Inspect\n\nRich has an [inspect](https://rich.readthedocs.io/en/latest/reference/init.html?highlight=inspect#rich.inspect) function which can produce a report on any Python object, such as class, instance, or builtin.\n\n```python\n>>> my_list = [\"foo\", \"bar\"]\n>>> from rich import inspect\n>>> inspect(my_list, methods=True)\n```\n\n![Log](https://github.com/willmcgugan/rich/raw/master/imgs/inspect.png)\n\nSee the [inspect docs](https://rich.readthedocs.io/en/latest/reference/init.html#rich.inspect) for details.\n\n# Rich Library\n\nRich contains a number of builtin _renderables_ you can use to create elegant output in your CLI and help you debug your code.\n\nClick the following headings for details:\n\n<details>\n<summary>Log</summary>\n\nThe Console object has a `log()` method which has a similar interface to `print()`, but also renders a column for the current time and the file and line which made the call. By default Rich will do syntax highlighting for Python structures and for repr strings. If you log a collection (i.e. a dict or a list) Rich will pretty print it so that it fits in the available space. Here's an example of some of these features.\n\n```python\nfrom rich.console import Console\nconsole = Console()\n\ntest_data = [\n    {\"jsonrpc\": \"2.0\", \"method\": \"sum\", \"params\": [None, 1, 2, 4, False, True], \"id\": \"1\",},\n    {\"jsonrpc\": \"2.0\", \"method\": \"notify_hello\", \"params\": [7]},\n    {\"jsonrpc\": \"2.0\", \"method\": \"subtract\", \"params\": [42, 23], \"id\": \"2\"},\n]\n\ndef test_log():\n    enabled = False\n    context = {\n        \"foo\": \"bar\",\n    }\n    movies = [\"Deadpool\", \"Rise of the Skywalker\"]\n    console.log(\"Hello from\", console, \"!\")\n    console.log(test_data, log_locals=True)\n\n\ntest_log()\n```\n\nThe above produces the following output:\n\n![Log](https://github.com/willmcgugan/rich/raw/master/imgs/log.png)\n\nNote the `log_locals` argument, which outputs a table containing the local variables where the log method was called.\n\nThe log method could be used for logging to the terminal for long running applications such as servers, but is also a very nice debugging aid.\n\n</details>\n<details>\n<summary>Logging Handler</summary>\n\nYou can also use the builtin [Handler class](https://rich.readthedocs.io/en/latest/logging.html) to format and colorize output from Python's logging module. Here's an example of the output:\n\n![Logging](https://github.com/willmcgugan/rich/raw/master/imgs/logging.png)\n\n</details>\n\n<details>\n<summary>Emoji</summary>\n\nTo insert an emoji in to console output place the name between two colons. Here's an example:\n\n```python\n>>> console.print(\":smiley: :vampire: :pile_of_poo: :thumbs_up: :raccoon:\")\n😃 🧛 💩 👍 🦝\n```\n\nPlease use this feature wisely.\n\n</details>\n\n<details>\n<summary>Tables</summary>\n\nRich can render flexible [tables](https://rich.readthedocs.io/en/latest/tables.html) with unicode box characters. There is a large variety of formatting options for borders, styles, cell alignment etc.\n\n![table movie](https://github.com/willmcgugan/rich/raw/master/imgs/table_movie.gif)\n\nThe animation above was generated with [table_movie.py](https://github.com/willmcgugan/rich/blob/master/examples/table_movie.py) in the examples directory.\n\nHere's a simpler table example:\n\n```python\nfrom rich.console import Console\nfrom rich.table import Table\n\nconsole = Console()\n\ntable = Table(show_header=True, header_style=\"bold magenta\")\ntable.add_column(\"Date\", style=\"dim\", width=12)\ntable.add_column(\"Title\")\ntable.add_column(\"Production Budget\", justify=\"right\")\ntable.add_column(\"Box Office\", justify=\"right\")\ntable.add_row(\n    \"Dev 20, 2019\", \"Star Wars: The Rise of Skywalker\", \"$275,000,000\", \"$375,126,118\"\n)\ntable.add_row(\n    \"May 25, 2018\",\n    \"[red]Solo[/red]: A Star Wars Story\",\n    \"$275,000,000\",\n    \"$393,151,347\",\n)\ntable.add_row(\n    \"Dec 15, 2017\",\n    \"Star Wars Ep. VIII: The Last Jedi\",\n    \"$262,000,000\",\n    \"[bold]$1,332,539,889[/bold]\",\n)\n\nconsole.print(table)\n```\n\nThis produces the following output:\n\n![table](https://github.com/willmcgugan/rich/raw/master/imgs/table.png)\n\nNote that console markup is rendered in the same way as `print()` and `log()`. In fact, anything that is renderable by Rich may be included in the headers / rows (even other tables).\n\nThe `Table` class is smart enough to resize columns to fit the available width of the terminal, wrapping text as required. Here's the same example, with the terminal made smaller than the table above:\n\n![table2](https://github.com/willmcgugan/rich/raw/master/imgs/table2.png)\n\n</details>\n\n<details>\n<summary>Progress Bars</summary>\n\nRich can render multiple flicker-free [progress](https://rich.readthedocs.io/en/latest/progress.html) bars to track long-running tasks.\n\nFor basic usage, wrap any sequence in the `track` function and iterate over the result. Here's an example:\n\n```python\nfrom rich.progress import track\n\nfor step in track(range(100)):\n    do_step(step)\n```\n\nIt's not much harder to add multiple progress bars. Here's an example taken from the docs:\n\n![progress](https://github.com/willmcgugan/rich/raw/master/imgs/progress.gif)\n\nThe columns may be configured to show any details you want. Built-in columns include percentage complete, file size, file speed, and time remaining. Here's another example showing a download in progress:\n\n![progress](https://github.com/willmcgugan/rich/raw/master/imgs/downloader.gif)\n\nTo try this out yourself, see [examples/downloader.py](https://github.com/willmcgugan/rich/blob/master/examples/downloader.py) which can download multiple URLs simultaneously while displaying progress.\n\n</details>\n\n<details>\n<summary>Status</summary>\n\nFor situations where it is hard to calculate progress, you can use the [status](https://rich.readthedocs.io/en/latest/reference/console.html#rich.console.Console.status) method which will display a 'spinner' animation and message. The animation won't prevent you from using the console as normal. Here's an example:\n\n```python\nfrom time import sleep\nfrom rich.console import Console\n\nconsole = Console()\ntasks = [f\"task {n}\" for n in range(1, 11)]\n\nwith console.status(\"[bold green]Working on tasks...\") as status:\n    while tasks:\n        task = tasks.pop(0)\n        sleep(1)\n        console.log(f\"{task} complete\")\n```\n\nThis generates the following output in the terminal.\n\n![status](https://github.com/willmcgugan/rich/raw/master/imgs/status.gif)\n\nThe spinner animations were borrowed from [cli-spinners](https://www.npmjs.com/package/cli-spinners). You can select a spinner by specifying the `spinner` parameter. Run the following command to see the available values:\n\n```\npython -m rich.spinner\n```\n\nThe above command generate the following output in the terminal:\n\n![spinners](https://github.com/willmcgugan/rich/raw/master/imgs/spinners.gif)\n\n</details>\n\n<details>\n<summary>Tree</summary>\n\nRich can render a [tree](https://rich.readthedocs.io/en/latest/tree.html) with guide lines. A tree is ideal for displaying a file structure, or any other hierarchical data.\n\nThe labels of the tree can be simple text or anything else Rich can render. Run the following for a demonstration:\n\n```\npython -m rich.tree\n```\n\nThis generates the following output:\n\n![markdown](https://github.com/willmcgugan/rich/raw/master/imgs/tree.png)\n\nSee the [tree.py](https://github.com/willmcgugan/rich/blob/master/examples/tree.py) example for a script that displays a tree view of any directory, similar to the linux `tree` command.\n\n</details>\n\n<details>\n<summary>Columns</summary>\n\nRich can render content in neat [columns](https://rich.readthedocs.io/en/latest/columns.html) with equal or optimal width. Here's a very basic clone of the (MacOS / Linux) `ls` command which displays a directory listing in columns:\n\n```python\nimport os\nimport sys\n\nfrom rich import print\nfrom rich.columns import Columns\n\ndirectory = os.listdir(sys.argv[1])\nprint(Columns(directory))\n```\n\nThe following screenshot is the output from the [columns example](https://github.com/willmcgugan/rich/blob/master/examples/columns.py) which displays data pulled from an API in columns:\n\n![columns](https://github.com/willmcgugan/rich/raw/master/imgs/columns.png)\n\n</details>\n\n<details>\n<summary>Markdown</summary>\n\nRich can render [markdown](https://rich.readthedocs.io/en/latest/markdown.html) and does a reasonable job of translating the formatting to the terminal.\n\nTo render markdown import the `Markdown` class and construct it with a string containing markdown code. Then print it to the console. Here's an example:\n\n```python\nfrom rich.console import Console\nfrom rich.markdown import Markdown\n\nconsole = Console()\nwith open(\"README.md\") as readme:\n    markdown = Markdown(readme.read())\nconsole.print(markdown)\n```\n\nThis will produce output something like the following:\n\n![markdown](https://github.com/willmcgugan/rich/raw/master/imgs/markdown.png)\n\n</details>\n\n<details>\n<summary>Syntax Highlighting</summary>\n\nRich uses the [pygments](https://pygments.org/) library to implement [syntax highlighting](https://rich.readthedocs.io/en/latest/syntax.html). Usage is similar to rendering markdown; construct a `Syntax` object and print it to the console. Here's an example:\n\n```python\nfrom rich.console import Console\nfrom rich.syntax import Syntax\n\nmy_code = '''\ndef iter_first_last(values: Iterable[T]) -> Iterable[Tuple[bool, bool, T]]:\n    \"\"\"Iterate and generate a tuple with a flag for first and last value.\"\"\"\n    iter_values = iter(values)\n    try:\n        previous_value = next(iter_values)\n    except StopIteration:\n        return\n    first = True\n    for value in iter_values:\n        yield first, False, previous_value\n        first = False\n        previous_value = value\n    yield first, True, previous_value\n'''\nsyntax = Syntax(my_code, \"python\", theme=\"monokai\", line_numbers=True)\nconsole = Console()\nconsole.print(syntax)\n```\n\nThis will produce the following output:\n\n![syntax](https://github.com/willmcgugan/rich/raw/master/imgs/syntax.png)\n\n</details>\n\n<details>\n<summary>Tracebacks</summary>\n\nRich can render [beautiful tracebacks](https://rich.readthedocs.io/en/latest/traceback.html) which are easier to read and show more code than standard Python tracebacks. You can set Rich as the default traceback handler so all uncaught exceptions will be rendered by Rich.\n\nHere's what it looks like on OSX (similar on Linux):\n\n![traceback](https://github.com/willmcgugan/rich/raw/master/imgs/traceback.png)\n\n</details>\n\nAll Rich renderables make use of the [Console Protocol](https://rich.readthedocs.io/en/latest/protocol.html), which you can also use to implement your own Rich content.\n\n# Rich for enterprise\n\nAvailable as part of the Tidelift Subscription.\n\nThe maintainers of Rich and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source packages you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact packages you use. [Learn more.](https://tidelift.com/subscription/pkg/pypi-rich?utm_source=pypi-rich&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)\n\n# Project using Rich\n\nHere are a few projects using Rich:\n\n- [BrancoLab/BrainRender](https://github.com/BrancoLab/BrainRender)\n  a python package for the visualization of three dimensional neuro-anatomical data\n- [Ciphey/Ciphey](https://github.com/Ciphey/Ciphey)\n  Automated decryption tool\n- [emeryberger/scalene](https://github.com/emeryberger/scalene)\n  a high-performance, high-precision CPU and memory profiler for Python\n- [hedythedev/StarCli](https://github.com/hedythedev/starcli)\n  Browse GitHub trending projects from your command line\n- [intel/cve-bin-tool](https://github.com/intel/cve-bin-tool)\n  This tool scans for a number of common, vulnerable components (openssl, libpng, libxml2, expat and a few others) to let you know if your system includes common libraries with known vulnerabilities.\n- [nf-core/tools](https://github.com/nf-core/tools)\n  Python package with helper tools for the nf-core community.\n- [cansarigol/pdbr](https://github.com/cansarigol/pdbr)\n  pdb + Rich library for enhanced debugging\n- [plant99/felicette](https://github.com/plant99/felicette)\n  Satellite imagery for dummies.\n- [seleniumbase/SeleniumBase](https://github.com/seleniumbase/SeleniumBase)\n  Automate & test 10x faster with Selenium & pytest. Batteries included.\n- [smacke/ffsubsync](https://github.com/smacke/ffsubsync)\n  Automagically synchronize subtitles with video.\n- [tryolabs/norfair](https://github.com/tryolabs/norfair)\n  Lightweight Python library for adding real-time 2D object tracking to any detector.\n- [ansible/ansible-lint](https://github.com/ansible/ansible-lint) Ansible-lint checks playbooks for practices and behaviour that could potentially be improved\n- [ansible-community/molecule](https://github.com/ansible-community/molecule) Ansible Molecule testing framework\n- +[Many more](https://github.com/willmcgugan/rich/network/dependents)!\n\n<!-- This is a test, no need to translate -->\n",
          "name": "rich",
          "author": [
            {
              "type": "Person",
              "name": "Will McGugan",
              "email": [
                "willmcgugan@gmail.com"
              ],
              "familyName": [
                "McGugan"
              ],
              "givenName": [
                "Will"
              ]
            }
          ],
          "license": "MIT",
          "version": "==6.2.0",
          "codeRepository": "https://pypi.org/project/rich/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python",
          "operatingSystem": [
            {
              "type": "OperatingSystem",
              "name": "macOS"
            },
            {
              "type": "OperatingSystem",
              "name": "Windows"
            },
            {
              "type": "OperatingSystem",
              "name": "Linux"
            }
          ]
        },
        {
          "type": "SoftwarePackage",
          "description": "ruamel.yaml\n===========\n\n``ruamel.yaml`` is a YAML 1.2 loader/dumper package for Python.\n\n:version:       0.17.9\n:updated:       2021-06-10\n:documentation: http://yaml.readthedocs.io\n:repository:    https://sourceforge.net/projects/ruamel-yaml/\n:pypi:          https://pypi.org/project/ruamel.yaml/\n\n*The 0.16.13 release was the last that will tested to be working on Python 2.7.\nThe 0.17 series will still be tested on Python 3.5, but the 0.18 will not. The\n0.17 series will also stop support for the old PyYAML functions, so a `YAML()` instance\nwill need to be created.*\n\n*The 0.17 series will also see changes in how comments are attached during\nroundtrip. This will result in backwards incompatibilities on the `.ca` data and\nit might even be necessary for documented methods that handle comments.*\n\n*Please adjust your dependencies accordingly if necessary. (`ruamel.yaml<0.17`)*\n\n\nStarting with version 0.15.0 the way YAML files are loaded and dumped\nis changing. See the API doc for details.  Currently existing\nfunctionality will throw a warning before being changed/removed.\n**For production systems you should pin the version being used with\n``ruamel.yaml<=0.15``**. There might be bug fixes in the 0.14 series,\nbut new functionality is likely only to be available via the new API.\n\nIf your package uses ``ruamel.yaml`` and is not listed on PyPI, drop\nme an email, preferably with some information on how you use the\npackage (or a link to the repository) and I'll keep you informed\nwhen the status of the API is stable enough to make the transition.\n\n* `Overview <http://yaml.readthedocs.org/en/latest/overview.html>`_\n* `Installing <http://yaml.readthedocs.org/en/latest/install.html>`_\n* `Basic Usage <http://yaml.readthedocs.org/en/latest/basicuse.html>`_\n* `Details <http://yaml.readthedocs.org/en/latest/detail.html>`_\n* `Examples <http://yaml.readthedocs.org/en/latest/example.html>`_\n* `API <http://yaml.readthedocs.org/en/latest/api.html>`_\n* `Differences with PyYAML <http://yaml.readthedocs.org/en/latest/pyyaml.html>`_\n\n.. image:: https://readthedocs.org/projects/yaml/badge/?version=stable\n   :target: https://yaml.readthedocs.org/en/stable\n\n.. image:: https://bestpractices.coreinfrastructure.org/projects/1128/badge\n   :target: https://bestpractices.coreinfrastructure.org/projects/1128\n\n.. image:: https://sourceforge.net/p/ruamel-yaml/code/ci/default/tree/_doc/_static/license.svg?format=raw\n   :target: https://opensource.org/licenses/MIT\n\n.. image:: https://sourceforge.net/p/ruamel-yaml/code/ci/default/tree/_doc/_static/pypi.svg?format=raw\n   :target: https://pypi.org/project/ruamel.yaml/\n\n.. image:: https://sourceforge.net/p/oitnb/code/ci/default/tree/_doc/_static/oitnb.svg?format=raw\n   :target: https://pypi.org/project/oitnb/\n\n.. image:: http://www.mypy-lang.org/static/mypy_badge.svg\n   :target: http://mypy-lang.org/\n\nChangeLog\n=========\n\n.. should insert NEXT: at the beginning of line for next key (with empty line)\n\n0.17.9 (2021-06-10):\n  - fix issue with updating CommentedMap (reported by sri on\n    `StackOverlow <https://stackoverflow.com/q/67911659/1307905>`__)\n\n0.17.8 (2021-06-09):\n  - fix for issue 387 where templated anchors on tagged object did get set\n    resulting in potential id reuse. (reported by `Artem Ploujnikov \n    <https://sourceforge.net/u/flexthink/>`__)\n\n0.17.7 (2021-05-31):\n  - issue 385 also affected other deprecated loaders (reported via email \n    by Oren Watson)\n\n0.17.6 (2021-05-31):\n  - merged type annotations update provided by \n    `Jochen Sprickerhof <https://sourceforge.net/u/jspricke/>`__\n  - fix for issue 385: deprecated round_trip_loader function not working\n    (reported by `Mike Gouline <https://sourceforge.net/u/gouline/>`__)\n  - wasted a few hours getting rid of mypy warnings/errors\n  \n0.17.5 (2021-05-30):\n  - fix for issue 384 !!set with aliased entry resulting in broken YAML on rt\n    reported by  `William Kimball <https://sourceforge.net/u/william303/>`__)\n\n0.17.4 (2021-04-07):\n  - prevent (empty) comments from throwing assertion error (issue 351 \n    reported by  `William Kimball <https://sourceforge.net/u/william303/>`__)\n    comments (or empty line) will be dropped \n\n0.17.3 (2021-04-07):\n  - fix for issue 382 caused by an error in a format string (reported by\n    `William Kimball <https://sourceforge.net/u/william303/>`__)\n  - allow expansion of aliases by setting ``yaml.composer.return_alias = lambda s: copy.deepcopy(s)``\n     (as per `Stackoverflow answer <https://stackoverflow.com/a/66983530/1307905>`__)\n\n0.17.2 (2021-03-29):\n  - change -py2.py3-none-any.whl to -py3-none-any.whl, and remove 0.17.1\n\n0.17.1 (2021-03-29):\n   - added 'Programming Language :: Python :: 3 :: Only', and removing\n     0.17.0 from PyPI (reported by `Alasdair Nicol <https://sourceforge.net/u/alasdairnicol/>`__)\n\n0.17.0 (2021-03-26):\n  - removed because of incomplete classifiers\n  - this release no longer supports Python 2.7, most if not all Python 2\n    specific code is removed. The 0.17.x series is the last to  support Python 3.5\n    (this also allowed for removal of the dependency  on ``ruamel.std.pathlib``)\n  - remove Python2 specific code branches and adaptations (u-strings)\n  - prepare % code for f-strings using ``_F``\n  - allow PyOxidisation (`issue 324 <https://sourceforge.net/p/ruamel-yaml/tickets/324/>`__\n    resp. `issue 171 <https://github.com/indygreg/PyOxidizer/issues/171>`__)\n  - replaced Python 2 compatible enforcement of keyword arguments with '*'\n  - the old top level *functions* ``load``, ``safe_load``, ``round_trip_load``,\n    ``dump``, ``safe_dump``, ``round_trip_dump``, ``scan``, ``parse``,\n    ``compose``, ``emit``, ``serialize`` as well as their ``_all`` variants for\n    multi-document streams, now issue a ``PendingDeprecationning`` (e.g. when run\n    from pytest, but also Python is started with ``-Wd``). Use the methods on\n    ``YAML()``, which have been extended.\n  - fix for issue 376: indentation changes could put literal/folded scalar to start\n    before the ``#`` column of a following comment. Effectively making the comment\n    part of the scalar in the output. (reported by\n    `Bence Nagy <https://sourceforge.net/u/underyx/>`__)\n\n\n0.16.13 (2021-03-05):\n  - fix for issue 359: could not update() CommentedMap with keyword arguments\n    (reported by `Steve Franchak <https://sourceforge.net/u/binaryadder/>`__)\n  - fix for issue 365: unable to dump mutated TimeStamp objects\n    (reported by Anton Akmerov <https://sourceforge.net/u/akhmerov/>`__)\n  - fix for issue 371: unable to addd comment without starting space\n    (reported by 'Mark Grandi <https://sourceforge.net/u/mgrandi>`__)\n  - fix for issue 373: recursive call to walk_tree not preserving all params\n    (reported by `eulores <https://sourceforge.net/u/eulores/>`__)\n  - a None value in a flow-style sequence is now dumped as `null` instead\n    of `!!null ''` (reported by mcarans on\n    `StackOverlow <https://stackoverflow.com/a/66489600/1307905>`__)\n\n0.16.12 (2020-09-04):\n  - update links in doc\n\n0.16.11 (2020-09-03):\n  - workaround issue with setuptools 0.50 and importing pip ( fix by jaraco\n    https://github.com/pypa/setuptools/issues/2355#issuecomment-685159580 )\n\n0.16.10 (2020-02-12):\n  - (auto) updated image references in README to sourceforge\n\n0.16.9 (2020-02-11):\n  - update CHANGES\n\n0.16.8 (2020-02-11):\n  - update requirements so that ruamel.yaml.clib is installed for 3.8,\n    as it has become available (via manylinux builds)\n\n0.16.7 (2020-01-30):\n  - fix typchecking issue on TaggedScalar (reported by Jens Nielsen)\n  - fix error in dumping literal scalar in sequence with comments before element\n    (reported by `EJ Etherington <https://sourceforge.net/u/ejether/>`__)\n\n0.16.6 (2020-01-20):\n  - fix empty string mapping key roundtripping with preservation of quotes as `? ''`\n    (reported via email by Tomer Aharoni).\n  - fix incorrect state setting in class constructor (reported by `Douglas Raillard\n    <https://bitbucket.org/%7Bcf052d92-a278-4339-9aa8-de41923bb556%7D/>`__)\n  - adjust deprecation warning test for Hashable, as that no longer warns (reported\n    by `Jason Montleon <https://bitbucket.org/%7B8f377d12-8d5b-4069-a662-00a2674fee4e%7D/>`__)\n\n0.16.5 (2019-08-18):\n  - allow for ``YAML(typ=['unsafe', 'pytypes'])``\n\n0.16.4 (2019-08-16):\n  - fix output of TAG directives with # (reported by `Thomas Smith\n    <https://bitbucket.org/%7Bd4c57a72-f041-4843-8217-b4d48b6ece2f%7D/>`__)\n\n\n0.16.3 (2019-08-15):\n  - split construct_object\n  - change stuff back to keep mypy happy\n  - move setting of version based on YAML directive to scanner, allowing to\n    check for file version during TAG directive scanning\n\n0.16.2 (2019-08-15):\n  - preserve YAML and TAG directives on roundtrip, correctly output #\n    in URL for YAML 1.2 (both reported by `Thomas Smith\n    <https://bitbucket.org/%7Bd4c57a72-f041-4843-8217-b4d48b6ece2f%7D/>`__)\n\n0.16.1 (2019-08-08):\n  - Force the use of new version of ruamel.yaml.clib (reported by `Alex Joz\n    <https://bitbucket.org/%7B9af55900-2534-4212-976c-61339b6ffe14%7D/>`__)\n  - Allow '#' in tag URI as these are allowed in YAML 1.2 (reported by\n    `Thomas Smith\n    <https://bitbucket.org/%7Bd4c57a72-f041-4843-8217-b4d48b6ece2f%7D/>`__)\n\n0.16.0 (2019-07-25):\n  - split of C source that generates .so file to ruamel.yaml.clib\n  - duplicate keys are now an error when working with the old API as well\n\n\n----\n\nFor older changes see the file\n`CHANGES <https://sourceforge.net/p/ruamel-yaml/code/ci/default/tree/CHANGES>`_",
          "name": "ruamel.yaml",
          "author": [
            {
              "type": "Person",
              "name": "Anthon van",
              "familyName": [
                "van"
              ],
              "givenName": [
                "Anthon"
              ]
            }
          ],
          "keywords": "yaml 1.2 parser round-trip preserve quotes order config",
          "license": "MIT license",
          "version": "==0.17.4",
          "codeRepository": "https://pypi.org/project/ruamel.yaml/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python",
          "applicationCategory": [
            "Software Development",
            "Text Processing"
          ],
          "applicationSubCategory": [
            "Libraries",
            "Markup"
          ]
        },
        {
          "type": "SoftwarePackage",
          "description": "ruamel.yaml.clib\n================\n\n``ruamel.yaml.clib`` is the C based reader/scanner and emitter for ruamel.yaml\n\n:version:       0.2.2\n:updated:       2020-09-04\n:documentation: http://yaml.readthedocs.io\n:repository:    https://sourceforge.net/projects/ruamel-yaml-clib/\n:pypi:          https://pypi.org/project/ruamel.yaml.clib/\n\nThis package was split of from ruamel.yaml, so that ruamel.yaml can be build as  \na universal wheel. Apart from the C code seldom changing, and taking a long\ntime to compile for all platforms, this allows installation of the .so\non Linux systems under /usr/lib64/pythonX.Y (without a .pth file or a ruamel \ndirectory) and the Python code for ruamel.yaml under /usr/lib/pythonX.Y.\n\n\n.. image:: https://bestpractices.coreinfrastructure.org/projects/1128/badge\n   :target: https://bestpractices.coreinfrastructure.org/projects/1128\n\n.. image:: https://sourceforge.net/p/ruamel-yaml-clib/code/ci/default/tree/_doc/_static/license.svg?format=raw\n   :target: https://opensource.org/licenses/MIT",
          "name": "ruamel.yaml.clib",
          "author": [
            {
              "type": "Person",
              "name": "Anthon van",
              "familyName": [
                "van"
              ],
              "givenName": [
                "Anthon"
              ]
            }
          ],
          "keywords": "yaml 1.2 parser c-library config",
          "license": "MIT",
          "version": "==0.2.2",
          "codeRepository": "https://pypi.org/project/ruamel.yaml.clib/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python",
          "applicationCategory": [
            "Software Development"
          ],
          "applicationSubCategory": [
            "Libraries"
          ]
        },
        {
          "type": "SoftwarePackage",
          "description": "SciPy (pronounced \"Sigh Pie\") is open-source software for mathematics,\nscience, and engineering. The SciPy library\ndepends on NumPy, which provides convenient and fast N-dimensional\narray manipulation. The SciPy library is built to work with NumPy\narrays, and provides many user-friendly and efficient numerical\nroutines such as routines for numerical integration and optimization.\nTogether, they run on all popular operating systems, are quick to\ninstall, and are free of charge.  NumPy and SciPy are easy to use,\nbut powerful enough to be depended upon by some of the world's\nleading scientists and engineers. If you need to manipulate\nnumbers on a computer and display or publish the results,\ngive SciPy a try!\n\n\n\n",
          "name": "scipy",
          "license": "BSD",
          "codeRepository": "https://pypi.org/project/scipy/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python",
          "applicationCategory": [
            "Scientific/Engineering",
            "Software Development"
          ],
          "operatingSystem": [
            {
              "type": "OperatingSystem",
              "name": "macOS"
            },
            {
              "type": "OperatingSystem",
              "name": "Windows"
            },
            {
              "type": "OperatingSystem",
              "name": "Linux"
            },
            {
              "type": "OperatingSystem",
              "name": "Unix"
            }
          ]
        },
        {
          "type": "SoftwarePackage",
          "description": "Seaborn is a library for making statistical graphics in Python. It is built on top of `matplotlib <https://matplotlib.org/>`_ and closely integrated with `pandas <https://pandas.pydata.org/>`_ data structures.\n\nHere is some of the functionality that seaborn offers:\n\n- A dataset-oriented API for examining relationships between multiple variables\n- Specialized support for using categorical variables to show observations or aggregate statistics\n- Options for visualizing univariate or bivariate distributions and for comparing them between subsets of data\n- Automatic estimation and plotting of linear regression models for different kinds dependent variables\n- Convenient views onto the overall structure of complex datasets\n- High-level abstractions for structuring multi-plot grids that let you easily build complex visualizations\n- Concise control over matplotlib figure styling with several built-in themes\n- Tools for choosing color palettes that faithfully reveal patterns in your data\n\nSeaborn aims to make visualization a central part of exploring and understanding data. Its dataset-oriented plotting functions operate on dataframes and arrays containing whole datasets and internally perform the necessary semantic mapping and statistical aggregation to produce informative plots.\n\n\n",
          "name": "seaborn",
          "author": [
            {
              "type": "Person",
              "name": "Michael Waskom",
              "email": [
                "mwaskom@nyu.edu"
              ],
              "familyName": [
                "Waskom"
              ],
              "givenName": [
                "Michael"
              ]
            }
          ],
          "license": "BSD (3-clause)",
          "codeRepository": "https://pypi.org/project/seaborn/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python",
          "applicationCategory": [
            "Multimedia",
            "Scientific/Engineering"
          ],
          "applicationSubCategory": [
            "Graphics",
            "Visualization"
          ]
        },
        {
          "type": "SoftwarePackage",
          "description": "==================================================\nSend2Trash -- Send files to trash on all platforms\n==================================================\n\nSend2Trash is a small package that sends files to the Trash (or Recycle Bin) *natively* and on\n*all platforms*. On OS X, it uses native ``FSMoveObjectToTrashSync`` Cocoa calls, on Windows, it\nuses native (and ugly) ``SHFileOperation`` win32 calls. On other platforms, if `PyGObject`_ and\n`GIO`_ are available, it will use this.  Otherwise, it will fallback to its own implementation\nof the `trash specifications from freedesktop.org`_.\n\n``ctypes`` is used to access native libraries, so no compilation is necessary.\n\nSend2Trash supports Python 2.7 and up (Python 3 is supported).\n\nInstallation\n------------\n\nYou can download it with pip::\n\n    pip install Send2Trash\n\nor you can download the source from http://github.com/hsoft/send2trash and install it with::\n\n    >>> python setup.py install\n\nUsage\n-----\n\n>>> from send2trash import send2trash\n>>> send2trash('some_file')\n\nOn Freedesktop platforms (Linux, BSD, etc.), you may not be able to efficiently\ntrash some files. In these cases, an exception ``send2trash.TrashPermissionError``\nis raised, so that the application can handle this case. This inherits from\n``PermissionError`` (``OSError`` on Python 2). Specifically, this affects\nfiles on a different device to the user's home directory, where the root of the\ndevice does not have a ``.Trash`` directory, and we don't have permission to\ncreate a ``.Trash-$UID`` directory.\n\nFor any other problem, ``OSError`` is raised.\n\n.. _PyGObject: https://wiki.gnome.org/PyGObject\n.. _GIO: https://developer.gnome.org/gio/\n.. _trash specifications from freedesktop.org: http://freedesktop.org/wiki/Specifications/trash-spec/\n\n\nChanges\n=======\n\nVersion 1.5.0 -- 2018/02/16\n---------------------------\n\n* More specific error when failing to create XDG fallback trash directory (#20)\n* Windows: Workaround for long paths (#23)\n\nVersion 1.4.2 -- 2017/11/17\n---------------------------\n\n* Fix incompatibility with Python 3.6 on Windows. (#18)\n\nVersion 1.4.1 -- 2017/08/07\n---------------------------\n\n* Fix crash on Windows introduced in v1.4.0. Oops... (#14)\n\nVersion 1.4.0 -- 2017/08/07\n---------------------------\n\n* Use ``bytes`` instead of ``str`` for internal path handling in ``plat_other``. (#13)\n\nVersion 1.3.1 -- 2017/07/31\n---------------------------\n\n* Throw ``WindowsError`` instead of ``OSError`` in ``plat_win``. (#7)\n* Fix ``TypeError`` on python 2 in ``plat_other``. (#12)\n\nVersion 1.3.0 -- 2013/07/19\n---------------------------\n\n* Added support for Gnome's GIO.\n* Merged Python 3 and Python 2 versions in a single codebase.\n\nVersion 1.2.0 -- 2011/03/16\n---------------------------\n\n* Improved ``plat_other`` to follow freedesktop.org trash specification.\n\nVersion 1.1.0 -- 2010/10/18\n---------------------------\n\n* Converted compiled modules to ctypes so that cross-platform compilation isn't necessary anymore.\n\nVersion 1.0.2 -- 2010/07/10\n---------------------------\n\n* Fixed bugs with external volumes in plat_other.\n\nVersion 1.0.1 -- 2010/04/19\n---------------------------\n\n* Fixed memory leak in OS X module.\n\nVersion 1.0.0 -- 2010/04/07\n---------------------------\n\n* Initial Release\n",
          "name": "Send2Trash",
          "author": [
            {
              "type": "Person",
              "name": "Virgil Dupras",
              "email": [
                "hsoft@hardcoded.net"
              ],
              "familyName": [
                "Dupras"
              ],
              "givenName": [
                "Virgil"
              ]
            }
          ],
          "license": "BSD License",
          "version": "==1.5.0",
          "codeRepository": "https://pypi.org/project/Send2Trash/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python",
          "applicationCategory": [
            "Desktop Environment"
          ],
          "applicationSubCategory": [
            "File Managers"
          ],
          "operatingSystem": [
            {
              "type": "OperatingSystem",
              "name": "macOS"
            },
            {
              "type": "OperatingSystem",
              "name": "Windows"
            }
          ]
        },
        {
          "type": "SoftwarePackage",
          "description": ".. image:: https://img.shields.io/pypi/v/six.svg\n   :target: https://pypi.org/project/six/\n   :alt: six on PyPI\n\n.. image:: https://travis-ci.org/benjaminp/six.svg?branch=master\n   :target: https://travis-ci.org/benjaminp/six\n   :alt: six on TravisCI\n\n.. image:: https://readthedocs.org/projects/six/badge/?version=latest\n   :target: https://six.readthedocs.io/\n   :alt: six's documentation on Read the Docs\n\n.. image:: https://img.shields.io/badge/license-MIT-green.svg\n   :target: https://github.com/benjaminp/six/blob/master/LICENSE\n   :alt: MIT License badge\n\nSix is a Python 2 and 3 compatibility library.  It provides utility functions\nfor smoothing over the differences between the Python versions with the goal of\nwriting Python code that is compatible on both Python versions.  See the\ndocumentation for more information on what is provided.\n\nSix supports Python 2.7 and 3.3+.  It is contained in only one Python\nfile, so it can be easily copied into your project. (The copyright and license\nnotice must be retained.)\n\nOnline documentation is at https://six.readthedocs.io/.\n\nBugs can be reported to https://github.com/benjaminp/six.  The code can also\nbe found there.\n\n\n",
          "name": "six",
          "author": [
            {
              "type": "Person",
              "name": "Benjamin Peterson",
              "email": [
                "benjamin@python.org"
              ],
              "familyName": [
                "Peterson"
              ],
              "givenName": [
                "Benjamin"
              ]
            }
          ],
          "license": "MIT",
          "codeRepository": "https://pypi.org/project/six/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python",
          "applicationCategory": [
            "Software Development",
            "Utilities"
          ],
          "applicationSubCategory": [
            "Libraries"
          ]
        },
        {
          "type": "SoftwarePackage",
          "description": ".. image:: https://img.shields.io/badge/chat-join%20now-blue.svg\n   :target: https://gitter.im/python-trio/general\n   :alt: Join chatroom\n\n.. image:: https://img.shields.io/badge/docs-read%20now-blue.svg\n   :target: https://sniffio.readthedocs.io/en/latest/?badge=latest\n   :alt: Documentation Status\n\n.. image:: https://img.shields.io/pypi/v/sniffio.svg\n   :target: https://pypi.org/project/sniffio\n   :alt: Latest PyPi version\n\n.. image:: https://img.shields.io/conda/vn/conda-forge/sniffio.svg\n   :target: https://anaconda.org/conda-forge/sniffio \n   :alt: Latest conda-forge version   \n\n.. image:: https://travis-ci.org/python-trio/sniffio.svg?branch=master\n   :target: https://travis-ci.org/python-trio/sniffio\n   :alt: Automated test status\n\n.. image:: https://codecov.io/gh/python-trio/sniffio/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/python-trio/sniffio\n   :alt: Test coverage\n\n=================================================================\nsniffio: Sniff out which async library your code is running under\n=================================================================\n\nYou're writing a library. You've decided to be ambitious, and support\nmultiple async I/O packages, like `Trio\n<https://trio.readthedocs.io>`__, and `asyncio\n<https://docs.python.org/3/library/asyncio.html>`__, and ... You've\nwritten a bunch of clever code to handle all the differences. But...\nhow do you know *which* piece of clever code to run?\n\nThis is a tiny package whose only purpose is to let you detect which\nasync library your code is running under.\n\n* Documentation: https://sniffio.readthedocs.io\n\n* Bug tracker and source code: https://github.com/python-trio/sniffio\n\n* License: MIT or Apache License 2.0, your choice\n\n* Contributor guide: https://trio.readthedocs.io/en/latest/contributing.html\n\n* Code of conduct: Contributors are requested to follow our `code of\n  conduct\n  <https://trio.readthedocs.io/en/latest/code-of-conduct.html>`_\n  in all project spaces.\n\nThis library is maintained by the Trio project, as a service to the\nasync Python community as a whole.\n\n\nQuickstart\n----------\n\n.. code-block:: python3\n\n   from sniffio import current_async_library\n   import trio\n   import asyncio\n\n   async def print_library():\n       library = current_async_library()\n       print(\"This is:\", library)\n\n   # Prints \"This is trio\"\n   trio.run(print_library)\n\n   # Prints \"This is asyncio\"\n   asyncio.run(print_library())\n\nFor more details, including how to add support to new async libraries,\n`please peruse our fine manual <https://sniffio.readthedocs.io>`__.\n\n\n",
          "name": "sniffio",
          "author": [
            {
              "type": "Person",
              "name": "Nathaniel J.",
              "familyName": [
                "J."
              ],
              "givenName": [
                "Nathaniel"
              ]
            }
          ],
          "keywords": "async,trio,asyncio",
          "license": "MIT -or- Apache License 2.0",
          "version": "==1.2.0",
          "codeRepository": "https://pypi.org/project/sniffio/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python",
          "operatingSystem": [
            {
              "type": "OperatingSystem",
              "name": "macOS"
            },
            {
              "type": "OperatingSystem",
              "name": "Windows"
            },
            {
              "type": "OperatingSystem",
              "name": "Linux"
            }
          ]
        },
        {
          "type": "SoftwarePackage",
          "description": "|PyPI Version| |Conda Version| |License| |Travis Build Status| |Azure CI Build Status|\n|Appveyor Build Status| |Coveralls Coverage| |PyPI downloads| |Conda downloads|\n\nAbout statsmodels\n=================\n\nstatsmodels is a Python package that provides a complement to scipy for\nstatistical computations including descriptive statistics and estimation\nand inference for statistical models.\n\n\nDocumentation\n=============\n\nThe documentation for the latest release is at\n\nhttps://www.statsmodels.org/stable/\n\nThe documentation for the development version is at\n\nhttps://www.statsmodels.org/dev/\n\nRecent improvements are highlighted in the release notes\n\nhttps://www.statsmodels.org/stable/release/version0.9.html\n\nBackups of documentation are available at https://statsmodels.github.io/stable/\nand https://statsmodels.github.io/dev/.\n\n\nMain Features\n=============\n\n* Linear regression models:\n\n  - Ordinary least squares\n  - Generalized least squares\n  - Weighted least squares\n  - Least squares with autoregressive errors\n  - Quantile regression\n  - Recursive least squares\n\n* Mixed Linear Model with mixed effects and variance components\n* GLM: Generalized linear models with support for all of the one-parameter\n  exponential family distributions\n* Bayesian Mixed GLM for Binomial and Poisson\n* GEE: Generalized Estimating Equations for one-way clustered or longitudinal data\n* Discrete models:\n\n  - Logit and Probit\n  - Multinomial logit (MNLogit)\n  - Poisson and Generalized Poisson regression\n  - Negative Binomial regression\n  - Zero-Inflated Count models\n\n* RLM: Robust linear models with support for several M-estimators.\n* Time Series Analysis: models for time series analysis\n\n  - Complete StateSpace modeling framework\n\n    - Seasonal ARIMA and ARIMAX models\n    - VARMA and VARMAX models\n    - Dynamic Factor models\n    - Unobserved Component models\n\n  - Markov switching models (MSAR), also known as Hidden Markov Models (HMM)\n  - Univariate time series analysis: AR, ARIMA\n  - Vector autoregressive models, VAR and structural VAR\n  - Vector error correction modle, VECM\n  - exponential smoothing, Holt-Winters\n  - Hypothesis tests for time series: unit root, cointegration and others\n  - Descriptive statistics and process models for time series analysis\n\n* Survival analysis:\n\n  - Proportional hazards regression (Cox models)\n  - Survivor function estimation (Kaplan-Meier)\n  - Cumulative incidence function estimation\n\n* Multivariate:\n\n  - Principal Component Analysis with missing data\n  - Factor Analysis with rotation\n  - MANOVA\n  - Canonical Correlation\n\n* Nonparametric statistics: Univariate and multivariate kernel density estimators\n* Datasets: Datasets used for examples and in testing\n* Statistics: a wide range of statistical tests\n\n  - diagnostics and specification tests\n  - goodness-of-fit and normality tests\n  - functions for multiple testing\n  - various additional statistical tests\n\n* Imputation with MICE, regression on order statistic and Gaussian imputation\n* Mediation analysis\n* Graphics includes plot functions for visual analysis of data and model results\n\n* I/O\n\n  - Tools for reading Stata .dta files, but pandas has a more recent version\n  - Table output to ascii, latex, and html\n\n* Miscellaneous models\n* Sandbox: statsmodels contains a sandbox folder with code in various stages of\n  development and testing which is not considered \"production ready\".  This covers\n  among others\n\n  - Generalized method of moments (GMM) estimators\n  - Kernel regression\n  - Various extensions to scipy.stats.distributions\n  - Panel data models\n  - Information theoretic measures\n\nHow to get it\n=============\nThe master branch on GitHub is the most up to date code\n\nhttps://www.github.com/statsmodels/statsmodels\n\nSource download of release tags are available on GitHub\n\nhttps://github.com/statsmodels/statsmodels/tags\n\nBinaries and source distributions are available from PyPi\n\nhttps://pypi.org/project/statsmodels/\n\nBinaries can be installed in Anaconda\n\nconda install statsmodels\n\n\nInstalling from sources\n=======================\n\nSee INSTALL.txt for requirements or see the documentation\n\nhttps://statsmodels.github.io/dev/install.html\n\nContributing\n============\nContributions in any form are welcome, including:\n\n* Documentation improvements\n* Additional tests\n* New features to existing models\n* New models\n\nhttps://www.statsmodels.org/stable/dev/test_notes\n\nfor instructions on installing statsmodels in *editable* mode.\n\nLicense\n=======\n\nModified BSD (3-clause)\n\nDiscussion and Development\n==========================\n\nDiscussions take place on the mailing list\n\nhttps://groups.google.com/group/pystatsmodels\n\nand in the issue tracker. We are very interested in feedback\nabout usability and suggestions for improvements.\n\nBug Reports\n===========\n\nBug reports can be submitted to the issue tracker at\n\nhttps://github.com/statsmodels/statsmodels/issues\n\n.. |Travis Build Status| image:: https://travis-ci.org/statsmodels/statsmodels.svg?branch=master\n   :target: https://travis-ci.org/statsmodels/statsmodels\n.. |Azure CI Build Status| image:: https://dev.azure.com/statsmodels/statsmodels-testing/_apis/build/status/statsmodels.statsmodels?branch=master\n   :target: https://dev.azure.com/statsmodels/statsmodels-testing/_build/latest?definitionId=1&branch=master\n.. |Appveyor Build Status| image:: https://ci.appveyor.com/api/projects/status/gx18sd2wc63mfcuc/branch/master?svg=true\n   :target: https://ci.appveyor.com/project/josef-pkt/statsmodels/branch/master\n.. |Coveralls Coverage| image:: https://coveralls.io/repos/github/statsmodels/statsmodels/badge.svg?branch=master\n   :target: https://coveralls.io/github/statsmodels/statsmodels?branch=master\n.. |PyPI downloads| image:: https://img.shields.io/pypi/dm/statsmodels.svg?label=Pypi%20downloads\n   :target: https://pypi.org/project/statsmodels/\n.. |Conda downloads| image:: https://img.shields.io/conda/dn/conda-forge/statsmodels.svg?label=Conda%20downloads\n   :target: https://anaconda.org/conda-forge/statsmodels/\n.. |PyPI Version| image:: https://img.shields.io/pypi/v/statsmodels.svg\n   :target: https://pypi.org/project/statsmodels/\n.. |Conda Version| image:: https://anaconda.org/conda-forge/statsmodels/badges/version.svg\n   :target: https://anaconda.org/conda-forge/statsmodels/\n.. |License| image:: https://img.shields.io/pypi/l/statsmodels.svg\n   :target: https://github.com/statsmodels/statsmodels/blob/master/LICENSE.txt\n\n\n",
          "name": "statsmodels",
          "license": "BSD License",
          "codeRepository": "https://pypi.org/project/statsmodels/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python",
          "applicationCategory": [
            "Office/Business",
            "Scientific/Engineering"
          ],
          "applicationSubCategory": [
            "Financial"
          ]
        },
        {
          "type": "SoftwarePackage",
          "description": "swiglpk\n=======\n\n*Plain python bindings for the GNU Linear Programming Kit (GLPK)*\n\n|PyPI| |License| |Build Status|\n\nWhy?\n~~~~\n\n*swiglpk* is not a high-level wrapper for GLPK (take a look at\n`optlang <https://github.com/biosustain/optlang>`__ if you are\ninterested in a python-based mathematical programming language). It just\nprovides plain vanilla `swig <http://www.swig.org/>`__ bindings to the\nunderlying C library. In constrast to other GLPK wrappers for python\n(e.g. `PyGLPK <http://tfinley.net/software/pyglpk/>`__,\n`Python-GLPK <http://www.dcc.fc.up.pt/~jpp/code/python-glpk/>`__,\n`ctypes-glpk <https://code.google.com/p/ctypes-glpk/>`__,\n`ecyglpki <https://github.com/equaeghe/ecyglpki>`__ etc.) it is fairly\nversion agnostic: it will try to guess the location of the glpk.h header\nfile (using ``which glpsol``) and then compile the extension for your\nparticular GLPK installation. Furthermore, swiglpk provides binary wheels\nfor all major platforms, which are always up-to-date with the most\nrecent GLPK version (swiglpk versions follow GLPK versioning in the major\nand minor version digits to emphasize that).\n\nPlease show us some love by staring this repo if you find swiglpk useful!\n\nInstallation\n~~~~~~~~~~~~\n\n::\n\n    pip install swiglpk\n\nThat's it. swiglpk comes with binary wheels for Windows, Mac, and Linux. No installation of third-party dependencies necessary.\n\nExample\n~~~~~~~\n\nRunning the following (slightly adapted) example from the `GLPK\nmanual <http://kam.mff.cuni.cz/~elias/glpk.pdf>`__ ...\n\n::\n\n    from swiglpk import *\n\n    ia = intArray(1+1000); ja = intArray(1+1000);\n    ar = doubleArray(1+1000);\n    lp = glp_create_prob();\n    glp_set_prob_name(lp, \"sample\");\n    glp_set_obj_dir(lp, GLP_MAX);\n    glp_add_rows(lp, 3);\n    glp_set_row_name(lp, 1, \"p\");\n    glp_set_row_bnds(lp, 1, GLP_UP, 0.0, 100.0);\n    glp_set_row_name(lp, 2, \"q\");\n    glp_set_row_bnds(lp, 2, GLP_UP, 0.0, 600.0);\n    glp_set_row_name(lp, 3, \"r\");\n    glp_set_row_bnds(lp, 3, GLP_UP, 0.0, 300.0);\n    glp_add_cols(lp, 3);\n    glp_set_col_name(lp, 1, \"x1\");\n    glp_set_col_bnds(lp, 1, GLP_LO, 0.0, 0.0);\n    glp_set_obj_coef(lp, 1, 10.0);\n    glp_set_col_name(lp, 2, \"x2\");\n    glp_set_col_bnds(lp, 2, GLP_LO, 0.0, 0.0);\n    glp_set_obj_coef(lp, 2, 6.0);\n    glp_set_col_name(lp, 3, \"x3\");\n    glp_set_col_bnds(lp, 3, GLP_LO, 0.0, 0.0);\n    glp_set_obj_coef(lp, 3, 4.0);\n    ia[1] = 1; ja[1] = 1; ar[1] = 1.0; # a[1,1] = 1\n    ia[2] = 1; ja[2] = 2; ar[2] = 1.0; # a[1,2] = 1\n    ia[3] = 1; ja[3] = 3; ar[3] = 1.0; # a[1,3] = 1\n    ia[4] = 2; ja[4] = 1; ar[4] = 10.0; # a[2,1] = 10\n    ia[5] = 3; ja[5] = 1; ar[5] = 2.0; # a[3,1] = 2\n    ia[6] = 2; ja[6] = 2; ar[6] = 4.0; # a[2,2] = 4\n    ia[7] = 3; ja[7] = 2; ar[7] = 2.0; # a[3,2] = 2\n    ia[8] = 2; ja[8] = 3; ar[8] = 5.0; # a[2,3] = 5\n    ia[9] = 3; ja[9] = 3; ar[9] = 6.0; # a[3,3] = 6\n    glp_load_matrix(lp, 9, ia, ja, ar);\n    glp_simplex(lp, None);\n    Z = glp_get_obj_val(lp);\n    x1 = glp_get_col_prim(lp, 1);\n    x2 = glp_get_col_prim(lp, 2);\n    x3 = glp_get_col_prim(lp, 3);\n    print(\"\\nZ = %g; x1 = %g; x2 = %g; x3 = %g\\n\" % (Z, x1, x2, x3))\n    glp_delete_prob(lp);\n\n... will produce the following output (the example can also be found at\nexamples/example.py):\n\n::\n\n    GLPK Simplex Optimizer, v4.52\n    3 rows, 3 columns, 9 non-zeros\n    *     0: obj =   0.000000000e+00  infeas =  0.000e+00 (0)\n    *     2: obj =   7.333333333e+02  infeas =  0.000e+00 (0)\n    OPTIMAL LP SOLUTION FOUND\n\n    Z = 733.333; x1 = 33.3333; x2 = 66.6667; x3 = 0\n\nPretty ugly right? Consider using `optlang <https://github.com/biosustain/optlang>`__ for formulating and solving your optimization problems.\n\nDocumentation\n~~~~~~~~~~~~~\n\nYou can find documentation on GLPK's C API `here <http://kam.mff.cuni.cz/~elias/glpk.pdf>`__\n\nDevelopment\n~~~~~~~~~~~\n\nYou still want to install it from source? Then you'll need to install the following\ndependencies first.\n\n-  GLPK\n-  swig\n\nIf you're on OS X, swig and GLPK can easily be installed with\n`homebrew <http://brew.sh/>`__.\n\n::\n\n    brew install swig glpk\n\nIf you're using ubuntu linux, you can install swig and GLPK using\n``apt-get``.\n\n::\n\n    apt-get install glpk-utils libglpk-dev swig\n\nIf you're on Windows, you are on your own (checkout the `appveyor.yml <https://github.com/biosustain/swiglpk/blob/master/appveyor.yml>`_ config file for directions).\n\nThen clone the repo and run the following.\n::\n\n    python setup.py install\n\n\n.. |PyPI| image:: https://img.shields.io/pypi/v/swiglpk.svg\n   :target: https://pypi.python.org/pypi/swiglpk\n.. |License| image:: https://img.shields.io/badge/License-GPL%20v3-blue.svg\n   :target: http://www.gnu.org/licenses/gpl-3.0\n.. |Build Status| image:: https://github.com/biosustain/swiglpk/actions/workflows/main.yml/badge.svg\n   :target: https://github.com/biosustain/swiglpk/actions/workflows/main.yml\n\n\n",
          "name": "swiglpk",
          "author": [
            {
              "type": "Person",
              "name": "Nikolaus Sonnenschein",
              "email": [
                "niko.sonnenschein@gmail.com"
              ],
              "familyName": [
                "Sonnenschein"
              ],
              "givenName": [
                "Nikolaus"
              ]
            }
          ],
          "keywords": "optimization swig glpk",
          "license": "GPL v3",
          "version": "==5.0.3",
          "codeRepository": "https://pypi.org/project/swiglpk/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python",
          "applicationCategory": [
            "Scientific/Engineering",
            "Software Development"
          ]
        },
        {
          "type": "SoftwarePackage",
          "description": "# SymPy\n\n[![pypi version](https://img.shields.io/pypi/v/sympy.svg)](https://pypi.python.org/pypi/sympy)\n[![Build status](https://secure.travis-ci.org/sympy/sympy.svg?branch=master)](https://travis-ci.org/sympy/sympy)\n[![Join the chat at https://gitter.im/sympy/sympy](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/sympy/sympy?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![Zenodo Badge](https://zenodo.org/badge/18918/sympy/sympy.svg)](https://zenodo.org/badge/latestdoi/18918/sympy/sympy)\n[![codecov Badge](https://codecov.io/gh/sympy/sympy/branch/master/graph/badge.svg)](https://codecov.io/gh/sympy/sympy)\n\n[![SymPy Banner](banner.svg)](https://sympy.org/)\n\n\nSee the AUTHORS file for the list of authors.\n\nAnd many more people helped on the SymPy mailing list, reported bugs,\nhelped organize SymPy's participation in the Google Summer of Code, the\nGoogle Highly Open Participation Contest, Google Code-In, wrote and\nblogged about SymPy...\n\nLicense: New BSD License (see the LICENSE file for details) covers all\nfiles in the sympy repository unless stated otherwise.\n\nOur mailing list is at\n<https://groups.google.com/forum/?fromgroups#!forum/sympy>.\n\nWe have community chat at [Gitter](https://gitter.im/sympy/sympy). Feel\nfree to ask us anything there. We have a very welcoming and helpful\ncommunity.\n\n## Download\n\nThe recommended installation method is through Anaconda,\n<https://www.anaconda.com/download/>\n\nYou can also get the latest version of SymPy from\n<https://pypi.python.org/pypi/sympy/>\n\nTo get the git version do\n\n    $ git clone git://github.com/sympy/sympy.git\n\nFor other options (tarballs, debs, etc.), see\n<https://docs.sympy.org/dev/install.html>.\n\n## Documentation and Usage\n\nFor in-depth instructions on installation and building the\ndocumentation, see the [SymPy Documentation Style Guide](https://docs.sympy.org/dev/documentation-style-guide.html).\n\nEverything is at:\n\n<https://docs.sympy.org/>\n\nYou can generate everything at the above site in your local copy of\nSymPy by:\n\n    $ cd doc\n    $ make html\n\nThen the docs will be in <span class=\"title-ref\">\\_build/html</span>. If\nyou don't want to read that, here is a short usage:\n\nFrom this directory, start Python and:\n\n``` python\n>>> from sympy import Symbol, cos\n>>> x = Symbol('x')\n>>> e = 1/cos(x)\n>>> print(e.series(x, 0, 10))\n1 + x**2/2 + 5*x**4/24 + 61*x**6/720 + 277*x**8/8064 + O(x**10)\n```\n\nSymPy also comes with a console that is a simple wrapper around the\nclassic python console (or IPython when available) that loads the SymPy\nnamespace and executes some common commands for you.\n\nTo start it, issue:\n\n    $ bin/isympy\n\nfrom this directory, if SymPy is not installed or simply:\n\n    $ isympy\n\nif SymPy is installed.\n\n## Installation\n\nSymPy has a hard dependency on the [mpmath](http://mpmath.org/) library\n(version \\>= 0.19). You should install it first, please refer to the\nmpmath installation guide:\n\n<https://github.com/fredrik-johansson/mpmath#1-download--installation>\n\nTo install SymPy using PyPI, run the following command:\n\n    $ pip install sympy\n\nTo install SymPy using Anaconda, run the following command:\n\n    $ conda install -c anaconda sympy\n\nTo install SymPy from GitHub source, first clone SymPy using `git`:\n\n    $ git clone https://github.com/sympy/sympy.git\n\nThen, in the `sympy` repository that you cloned, simply run:\n\n    $ python setup.py install\n\nSee <https://docs.sympy.org/dev/install.html> for more information.\n\n## Contributing\n\nWe welcome contributions from anyone, even if you are new to open\nsource. Please read our [Introduction to Contributing](https://github.com/sympy/sympy/wiki/Introduction-to-contributing)\npage and the [SymPy Documentation Style Guide](https://docs.sympy.org/dev/documentation-style-guide.html). If you\nare new and looking for some way to contribute, a good place to start is\nto look at the issues tagged [Easy to Fix](https://github.com/sympy/sympy/issues?q=is%3Aopen+is%3Aissue+label%3A%22Easy+to+Fix%22).\n\nPlease note that all participants in this project are expected to follow\nour Code of Conduct. By participating in this project you agree to abide\nby its terms. See [CODE\\_OF\\_CONDUCT.md](CODE_OF_CONDUCT.md).\n\n## Tests\n\nTo execute all tests, run:\n\n    $./setup.py test\n\nin the current directory.\n\nFor the more fine-grained running of tests or doctests, use `bin/test`\nor respectively `bin/doctest`. The master branch is automatically tested\nby Travis CI.\n\nTo test pull requests, use\n[sympy-bot](https://github.com/sympy/sympy-bot).\n\n## Regenerate Experimental <span class=\"title-ref\">LaTeX</span> Parser/Lexer\n\nThe parser and lexer generated with the [ANTLR4](http://antlr4.org)\ntoolchain in `sympy/parsing/latex/_antlr` and checked into the repo.\nPresently, most users should not need to regenerate these files, but\nif you plan to work on this feature, you will need the `antlr4`\ncommand-line tool (and you must ensure that it is in your `PATH`).\nOne way to get it is:\n\n    $ conda install -c conda-forge antlr=4.7.2\n\nAlternatively, follow the instructions on the ANTLR website and download\nthe `antlr-4.7.2-complete.jar`. Then export the `CLASSPATH` as instructed\nand instead of creating `antlr4` as an alias, make it an executable file\nwith the following contents:\n``` bash\n#!/bin/bash\njava -jar /usr/local/lib/antlr-4.7.2-complete.jar \"$@\"\n```\n\nAfter making changes to `sympy/parsing/latex/LaTeX.g4`, run:\n\n    $ ./setup.py antlr\n\n## Clean\n\nTo clean everything (thus getting the same tree as in the repository):\n\n    $ ./setup.py clean\n\nYou can also clean things with git using:\n\n    $ git clean -Xdf\n\nwhich will clear everything ignored by `.gitignore`, and:\n\n    $ git clean -df\n\nto clear all untracked files. You can revert the most recent changes in\ngit with:\n\n    $ git reset --hard\n\nWARNING: The above commands will all clear changes you may have made,\nand you will lose them forever. Be sure to check things with `git\nstatus`, `git diff`, `git clean -Xn` and `git clean -n` before doing any\nof those.\n\n## Bugs\n\nOur issue tracker is at <https://github.com/sympy/sympy/issues>. Please\nreport any bugs that you find. Or, even better, fork the repository on\nGitHub and create a pull request. We welcome all changes, big or small,\nand we will help you make the pull request if you are new to git (just\nask on our mailing list or Gitter Channel). If you further have any queries, you can find answers\non Stack Overflow using the [sympy](https://stackoverflow.com/questions/tagged/sympy) tag.\n\n## Brief History\n\nSymPy was started by Ondřej Čertík in 2005, he wrote some code during\nthe summer, then he wrote some more code during summer 2006. In February\n2007, Fabian Pedregosa joined the project and helped fixed many things,\ncontributed documentation and made it alive again. 5 students (Mateusz\nPaprocki, Brian Jorgensen, Jason Gedge, Robert Schwarz, and Chris Wu)\nimproved SymPy incredibly during summer 2007 as part of the Google\nSummer of Code. Pearu Peterson joined the development during the summer\n2007 and he has made SymPy much more competitive by rewriting the core\nfrom scratch, that has made it from 10x to 100x faster. Jurjen N.E. Bos\nhas contributed pretty-printing and other patches. Fredrik Johansson has\nwritten mpmath and contributed a lot of patches.\n\nSymPy has participated in every Google Summer of Code since 2007. You\ncan see <https://github.com/sympy/sympy/wiki#google-summer-of-code> for\nfull details. Each year has improved SymPy by bounds. Most of SymPy's\ndevelopment has come from Google Summer of Code students.\n\nIn 2011, Ondřej Čertík stepped down as lead developer, with Aaron\nMeurer, who also started as a Google Summer of Code student, taking his\nplace. Ondřej Čertík is still active in the community but is too busy\nwith work and family to play a lead development role.\n\nSince then, a lot more people have joined the development and some\npeople have also left. You can see the full list in doc/src/aboutus.rst,\nor online at:\n\n<https://docs.sympy.org/dev/aboutus.html#sympy-development-team>\n\nThe git history goes back to 2007 when development moved from svn to hg.\nTo see the history before that point, look at\n<https://github.com/sympy/sympy-old>.\n\nYou can use git to see the biggest developers. The command:\n\n    $ git shortlog -ns\n\nwill show each developer, sorted by commits to the project. The command:\n\n    $ git shortlog -ns --since=\"1 year\"\n\nwill show the top developers from the last year.\n\n## Citation\n\nTo cite SymPy in publications use\n\n> Meurer A, Smith CP, Paprocki M, Čertík O, Kirpichev SB, Rocklin M,\n> Kumar A, Ivanov S, Moore JK, Singh S, Rathnayake T, Vig S, Granger BE,\n> Muller RP, Bonazzi F, Gupta H, Vats S, Johansson F, Pedregosa F, Curry\n> MJ, Terrel AR, Roučka Š, Saboo A, Fernando I, Kulal S, Cimrman R,\n> Scopatz A. (2017) SymPy: symbolic computing in Python. *PeerJ Computer\n> Science* 3:e103 <https://doi.org/10.7717/peerj-cs.103>\n\nA BibTeX entry for LaTeX users is\n\n``` bibtex\n@article{10.7717/peerj-cs.103,\n title = {SymPy: symbolic computing in Python},\n author = {Meurer, Aaron and Smith, Christopher P. and Paprocki, Mateusz and \\v{C}ert\\'{i}k, Ond\\v{r}ej and Kirpichev, Sergey B. and Rocklin, Matthew and Kumar, Amit and Ivanov, Sergiu and Moore, Jason K. and Singh, Sartaj and Rathnayake, Thilina and Vig, Sean and Granger, Brian E. and Muller, Richard P. and Bonazzi, Francesco and Gupta, Harsh and Vats, Shivam and Johansson, Fredrik and Pedregosa, Fabian and Curry, Matthew J. and Terrel, Andy R. and Rou\\v{c}ka, \\v{S}t\\v{e}p\\'{a}n and Saboo, Ashutosh and Fernando, Isuru and Kulal, Sumith and Cimrman, Robert and Scopatz, Anthony},\n year = 2017,\n month = Jan,\n keywords = {Python, Computer algebra system, Symbolics},\n abstract = {\n            SymPy is an open-source computer algebra system written in pure Python. It is built with a focus on extensibility and ease of use, through both interactive and programmatic applications. These characteristics have led SymPy to become a popular symbolic library for the scientific Python ecosystem. This paper presents the architecture of SymPy, a description of its features, and a discussion of select submodules. The supplementary material provides additional examples and further outlines details of the architecture and features of SymPy.\n         },\n volume = 3,\n pages = {e103},\n journal = {PeerJ Computer Science},\n issn = {2376-5992},\n url = {https://doi.org/10.7717/peerj-cs.103},\n doi = {10.7717/peerj-cs.103}\n}\n```\n\nSymPy is BSD licensed, so you are free to use it whatever you like, be\nit academic, commercial, creating forks or derivatives, as long as you\ncopy the BSD statement if you redistribute it (see the LICENSE file for\ndetails). That said, although not required by the SymPy license, if it\nis convenient for you, please cite SymPy when using it in your work and\nalso consider contributing all your changes back, so that we can\nincorporate it and all of us will benefit in the end.\n\n\n",
          "name": "sympy",
          "author": [
            {
              "type": "Person",
              "name": "SymPy development",
              "familyName": [
                "development"
              ],
              "givenName": [
                "SymPy"
              ]
            }
          ],
          "keywords": "Math CAS",
          "license": "BSD",
          "version": "==1.8",
          "codeRepository": "https://pypi.org/project/sympy/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python",
          "applicationCategory": [
            "Scientific/Engineering"
          ],
          "applicationSubCategory": [
            "Mathematics",
            "Physics"
          ]
        },
        {
          "type": "SoftwarePackage",
          "description": "This is a `Tornado <http://tornadoweb.org/>`_ websocket backend for the\n`Xterm.js <https://xtermjs.org/>`_ Javascript terminal emulator\nlibrary.\n\nIt evolved out of `pyxterm <https://github.com/mitotic/pyxterm>`_, which was\npart of `GraphTerm <https://github.com/mitotic/graphterm>`_ (as lineterm.py),\nv0.57.0 (2014-07-18), and ultimately derived from the public-domain `Ajaxterm\n<http://antony.lesuisse.org/software/ajaxterm/>`_ code, v0.11 (2008-11-13) (also\non Github as part of `QWeb <https://github.com/antonylesuisse/qweb>`_).\n\nModules:\n\n* ``terminado.management``: controls launching virtual terminals,\n  connecting them to Tornado's event loop, and closing them down.\n* ``terminado.websocket``: Provides a websocket handler for communicating with\n  a terminal.\n* ``terminado.uimodule``: Provides a ``Terminal`` Tornado `UI Module\n  <http://www.tornadoweb.org/en/stable/guide/templates.html#ui-modules>`_.\n\nJS:\n\n* ``terminado/_static/terminado.js``: A lightweight wrapper to set up a\n  term.js terminal with a websocket.\n\nLocal Installation:\n\n    $ pip install -e .[test]\n\n\nUsage example:\n\n.. code:: python\n\n    import os.path\n    import tornado.web\n    import tornado.ioloop\n    # This demo requires tornado_xstatic and XStatic-term.js\n    import tornado_xstatic\n\n    import terminado\n    STATIC_DIR = os.path.join(os.path.dirname(terminado.__file__), \"_static\")\n\n    class TerminalPageHandler(tornado.web.RequestHandler):\n        def get(self):\n            return self.render(\"termpage.html\", static=self.static_url,\n                               xstatic=self.application.settings['xstatic_url'],\n                               ws_url_path=\"/websocket\")\n\n    if __name__ == '__main__':\n        term_manager = terminado.SingleTermManager(shell_command=['bash'])\n        handlers = [\n                    (r\"/websocket\", terminado.TermSocket,\n                         {'term_manager': term_manager}),\n                    (r\"/\", TerminalPageHandler),\n                    (r\"/xstatic/(.*)\", tornado_xstatic.XStaticFileHandler,\n                         {'allowed_modules': ['termjs']})\n                   ]\n        app = tornado.web.Application(handlers, static_path=STATIC_DIR,\n                          xstatic_url = tornado_xstatic.url_maker('/xstatic/'))\n        # Serve at http://localhost:8765/ N.B. Leaving out 'localhost' here will\n        # work, but it will listen on the public network interface as well.\n        # Given what terminado does, that would be rather a security hole.\n        app.listen(8765, 'localhost')\n        try:\n            tornado.ioloop.IOLoop.instance().start()\n        finally:\n            term_manager.shutdown()\n\nSee the `demos directory <https://github.com/takluyver/terminado/tree/master/demos>`_\nfor more examples. This is a simplified version of the ``single.py`` demo.\n\nRun the unit tests with:\n\n    $ pytest\n\n\n",
          "name": "terminado",
          "author": [
            {
              "type": "Person",
              "name": "Jupyter Development",
              "familyName": [
                "Development"
              ],
              "givenName": [
                "Jupyter"
              ]
            }
          ],
          "version": "==0.9.4",
          "codeRepository": "https://pypi.org/project/terminado/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python",
          "applicationCategory": [
            "Terminals"
          ],
          "applicationSubCategory": [
            "Terminal Emulators/X Terminals"
          ]
        },
        {
          "type": "SoftwarePackage",
          "description": "Testpath is a collection of utilities for Python code working with files and commands.\n\nIt contains functions to check things on the filesystem, and tools for mocking\nsystem commands and recording calls to those.\n\n`Documentation on ReadTheDocs <https://testpath.readthedocs.io/en/latest/>`_\n\ne.g.::\n\n    import testpath\n    testpath.assert_isfile(path)\n    \n    with testpath.assert_calls('git', ['add', path]):\n        function_under_test()\n",
          "name": "testpath",
          "version": "==0.4.4",
          "codeRepository": "https://pypi.org/project/testpath/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python",
          "applicationCategory": [
            "Software Development"
          ],
          "applicationSubCategory": [
            "Testing"
          ]
        },
        {
          "type": "SoftwarePackage",
          "description": "Tornado Web Server\n==================\n\n.. image:: https://badges.gitter.im/Join%20Chat.svg\n   :alt: Join the chat at https://gitter.im/tornadoweb/tornado\n   :target: https://gitter.im/tornadoweb/tornado?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge\n\n`Tornado <http://www.tornadoweb.org>`_ is a Python web framework and\nasynchronous networking library, originally developed at `FriendFeed\n<http://friendfeed.com>`_.  By using non-blocking network I/O, Tornado\ncan scale to tens of thousands of open connections, making it ideal for\n`long polling <http://en.wikipedia.org/wiki/Push_technology#Long_Polling>`_,\n`WebSockets <http://en.wikipedia.org/wiki/WebSocket>`_, and other\napplications that require a long-lived connection to each user.\n\nHello, world\n------------\n\nHere is a simple \"Hello, world\" example web app for Tornado:\n\n.. code-block:: python\n\n    import tornado.ioloop\n    import tornado.web\n\n    class MainHandler(tornado.web.RequestHandler):\n        def get(self):\n            self.write(\"Hello, world\")\n\n    def make_app():\n        return tornado.web.Application([\n            (r\"/\", MainHandler),\n        ])\n\n    if __name__ == \"__main__\":\n        app = make_app()\n        app.listen(8888)\n        tornado.ioloop.IOLoop.current().start()\n\nThis example does not use any of Tornado's asynchronous features; for\nthat see this `simple chat room\n<https://github.com/tornadoweb/tornado/tree/stable/demos/chat>`_.\n\nDocumentation\n-------------\n\nDocumentation and links to additional resources are available at\nhttps://www.tornadoweb.org\n\n\n",
          "name": "tornado",
          "author": [
            {
              "type": "Person",
              "name": "Facebook <python-tornado@googlegroups.com>",
              "familyName": [
                "<python-tornado@googlegroups.com>"
              ],
              "givenName": [
                "Facebook"
              ]
            }
          ],
          "license": "http://www.apache.org/licenses/LICENSE-2.0",
          "codeRepository": "https://pypi.org/project/tornado/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python"
        },
        {
          "type": "SoftwarePackage",
          "description": "|Logo|\n\ntqdm\n====\n\n|Py-Versions| |Versions| |Conda-Forge-Status| |Docker| |Snapcraft|\n\n|Build-Status| |Coverage-Status| |Branch-Coverage-Status| |Codacy-Grade| |Libraries-Rank| |PyPI-Downloads|\n\n|LICENCE| |OpenHub-Status| |binder-demo| |awesome-python|\n\n``tqdm`` derives from the Arabic word *taqaddum* (تقدّم) which can mean \"progress,\"\nand is an abbreviation for \"I love you so much\" in Spanish (*te quiero demasiado*).\n\nInstantly make your loops show a smart progress meter - just wrap any\niterable with ``tqdm(iterable)``, and you're done!\n\n.. code:: python\n\n    from tqdm import tqdm\n    for i in tqdm(range(10000)):\n        ...\n\n``76%|████████████████████████        | 7568/10000 [00:33<00:10, 229.00it/s]``\n\n``trange(N)`` can be also used as a convenient shortcut for\n``tqdm(range(N))``.\n\n|Screenshot|\n    |Video| |Slides| |Merch|\n\nIt can also be executed as a module with pipes:\n\n.. code:: sh\n\n    $ seq 9999999 | tqdm --bytes | wc -l\n    75.2MB [00:00, 217MB/s]\n    9999999\n\n    $ tar -zcf - docs/ | tqdm --bytes --total `du -sb docs/ | cut -f1` \\\n        > backup.tgz\n     32%|██████████▍                      | 8.89G/27.9G [00:42<01:31, 223MB/s]\n\nOverhead is low -- about 60ns per iteration (80ns with ``tqdm.gui``), and is\nunit tested against performance regression.\nBy comparison, the well-established\n`ProgressBar <https://github.com/niltonvolpato/python-progressbar>`__ has\nan 800ns/iter overhead.\n\nIn addition to its low overhead, ``tqdm`` uses smart algorithms to predict\nthe remaining time and to skip unnecessary iteration displays, which allows\nfor a negligible overhead in most cases.\n\n``tqdm`` works on any platform\n(Linux, Windows, Mac, FreeBSD, NetBSD, Solaris/SunOS),\nin any console or in a GUI, and is also friendly with IPython/Jupyter notebooks.\n\n``tqdm`` does not require any dependencies (not even ``curses``!), just\nPython and an environment supporting ``carriage return \\r`` and\n``line feed \\n`` control characters.\n\n------------------------------------------\n\n.. contents:: Table of contents\n   :backlinks: top\n   :local:\n\n\nInstallation\n------------\n\nLatest PyPI stable release\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n|Versions| |PyPI-Downloads| |Libraries-Dependents|\n\n.. code:: sh\n\n    pip install tqdm\n\nLatest development release on GitHub\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n|GitHub-Status| |GitHub-Stars| |GitHub-Commits| |GitHub-Forks| |GitHub-Updated|\n\nPull and install pre-release ``devel`` branch:\n\n.. code:: sh\n\n    pip install \"git+https://github.com/tqdm/tqdm.git@devel#egg=tqdm\"\n\nLatest Conda release\n~~~~~~~~~~~~~~~~~~~~\n\n|Conda-Forge-Status|\n\n.. code:: sh\n\n    conda install -c conda-forge tqdm\n\nLatest Snapcraft release\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n|Snapcraft|\n\nThere are 3 channels to choose from:\n\n.. code:: sh\n\n    snap install tqdm  # implies --stable, i.e. latest tagged release\n    snap install tqdm  --candidate  # master branch\n    snap install tqdm  --edge  # devel branch\n\nNote that ``snap`` binaries are purely for CLI use (not ``import``-able), and\nautomatically set up ``bash`` tab-completion.\n\nLatest Docker release\n~~~~~~~~~~~~~~~~~~~~~\n\n|Docker|\n\n.. code:: sh\n\n    docker pull tqdm/tqdm\n    docker run -i --rm tqdm/tqdm --help\n\nOther\n~~~~~\n\nThere are other (unofficial) places where ``tqdm`` may be downloaded, particularly for CLI use:\n\n|Repology|\n\n.. |Repology| image:: https://repology.org/badge/tiny-repos/python:tqdm.svg\n   :target: https://repology.org/project/python:tqdm/versions\n\nChangelog\n---------\n\nThe list of all changes is available either on GitHub's Releases:\n|GitHub-Status|, on the\n`wiki <https://github.com/tqdm/tqdm/wiki/Releases>`__, or on the\n`website <https://tqdm.github.io/releases>`__.\n\n\nUsage\n-----\n\n``tqdm`` is very versatile and can be used in a number of ways.\nThe three main ones are given below.\n\nIterable-based\n~~~~~~~~~~~~~~\n\nWrap ``tqdm()`` around any iterable:\n\n.. code:: python\n\n    from tqdm import tqdm\n    from time import sleep\n\n    text = \"\"\n    for char in tqdm([\"a\", \"b\", \"c\", \"d\"]):\n        sleep(0.25)\n        text = text + char\n\n``trange(i)`` is a special optimised instance of ``tqdm(range(i))``:\n\n.. code:: python\n\n    from tqdm import trange\n\n    for i in trange(100):\n        sleep(0.01)\n\nInstantiation outside of the loop allows for manual control over ``tqdm()``:\n\n.. code:: python\n\n    pbar = tqdm([\"a\", \"b\", \"c\", \"d\"])\n    for char in pbar:\n        sleep(0.25)\n        pbar.set_description(\"Processing %s\" % char)\n\nManual\n~~~~~~\n\nManual control of ``tqdm()`` updates using a ``with`` statement:\n\n.. code:: python\n\n    with tqdm(total=100) as pbar:\n        for i in range(10):\n            sleep(0.1)\n            pbar.update(10)\n\nIf the optional variable ``total`` (or an iterable with ``len()``) is\nprovided, predictive stats are displayed.\n\n``with`` is also optional (you can just assign ``tqdm()`` to a variable,\nbut in this case don't forget to ``del`` or ``close()`` at the end:\n\n.. code:: python\n\n    pbar = tqdm(total=100)\n    for i in range(10):\n        sleep(0.1)\n        pbar.update(10)\n    pbar.close()\n\nModule\n~~~~~~\n\nPerhaps the most wonderful use of ``tqdm`` is in a script or on the command\nline. Simply inserting ``tqdm`` (or ``python -m tqdm``) between pipes will pass\nthrough all ``stdin`` to ``stdout`` while printing progress to ``stderr``.\n\nThe example below demonstrate counting the number of lines in all Python files\nin the current directory, with timing information included.\n\n.. code:: sh\n\n    $ time find . -name '*.py' -type f -exec cat \\{} \\; | wc -l\n    857365\n\n    real    0m3.458s\n    user    0m0.274s\n    sys     0m3.325s\n\n    $ time find . -name '*.py' -type f -exec cat \\{} \\; | tqdm | wc -l\n    857366it [00:03, 246471.31it/s]\n    857365\n\n    real    0m3.585s\n    user    0m0.862s\n    sys     0m3.358s\n\nNote that the usual arguments for ``tqdm`` can also be specified.\n\n.. code:: sh\n\n    $ find . -name '*.py' -type f -exec cat \\{} \\; |\n        tqdm --unit loc --unit_scale --total 857366 >> /dev/null\n    100%|█████████████████████████████████| 857K/857K [00:04<00:00, 246Kloc/s]\n\nBacking up a large directory?\n\n.. code:: sh\n\n    $ tar -zcf - docs/ | tqdm --bytes --total `du -sb docs/ | cut -f1` \\\n      > backup.tgz\n     44%|██████████████▊                   | 153M/352M [00:14<00:18, 11.0MB/s]\n\nThis can be beautified further:\n\n.. code:: sh\n\n    $ BYTES=\"$(du -sb docs/ | cut -f1)\"\n    $ tar -cf - docs/ \\\n      | tqdm --bytes --total \"$BYTES\" --desc Processing | gzip \\\n      | tqdm --bytes --total \"$BYTES\" --desc Compressed --position 1 \\\n      > ~/backup.tgz\n    Processing: 100%|██████████████████████| 352M/352M [00:14<00:00, 30.2MB/s]\n    Compressed:  42%|█████████▎            | 148M/352M [00:14<00:19, 10.9MB/s]\n\nOr done on a file level using 7-zip:\n\n.. code:: sh\n\n    $ 7z a -bd -r backup.7z docs/ | grep Compressing \\\n      | tqdm --total $(find docs/ -type f | wc -l) --unit files \\\n      | grep -v Compressing\n    100%|██████████████████████████▉| 15327/15327 [01:00<00:00, 712.96files/s]\n\nPre-existing CLI programs already outputting basic progress information will\nbenefit from ``tqdm``'s ``--update`` and ``--update_to`` flags:\n\n.. code:: sh\n\n    $ seq 3 0.1 5 | tqdm --total 5 --update_to --null\n    100%|████████████████████████████████████| 5.0/5 [00:00<00:00, 9673.21it/s]\n    $ seq 10 | tqdm --update --null  # 1 + 2 + ... + 10 = 55 iterations\n    55it [00:00, 90006.52it/s]\n\nFAQ and Known Issues\n--------------------\n\n|GitHub-Issues|\n\nThe most common issues relate to excessive output on multiple lines, instead\nof a neat one-line progress bar.\n\n- Consoles in general: require support for carriage return (``CR``, ``\\r``).\n- Nested progress bars:\n\n  * Consoles in general: require support for moving cursors up to the\n    previous line. For example,\n    `IDLE <https://github.com/tqdm/tqdm/issues/191#issuecomment-230168030>`__,\n    `ConEmu <https://github.com/tqdm/tqdm/issues/254>`__ and\n    `PyCharm <https://github.com/tqdm/tqdm/issues/203>`__ (also\n    `here <https://github.com/tqdm/tqdm/issues/208>`__,\n    `here <https://github.com/tqdm/tqdm/issues/307>`__, and\n    `here <https://github.com/tqdm/tqdm/issues/454#issuecomment-335416815>`__)\n    lack full support.\n  * Windows: additionally may require the Python module ``colorama``\n    to ensure nested bars stay within their respective lines.\n\n- Unicode:\n\n  * Environments which report that they support unicode will have solid smooth\n    progressbars. The fallback is an ``ascii``-only bar.\n  * Windows consoles often only partially support unicode and thus\n    `often require explicit ascii=True <https://github.com/tqdm/tqdm/issues/454#issuecomment-335416815>`__\n    (also `here <https://github.com/tqdm/tqdm/issues/499>`__). This is due to\n    either normal-width unicode characters being incorrectly displayed as\n    \"wide\", or some unicode characters not rendering.\n\n- Wrapping generators:\n\n  * Generator wrapper functions tend to hide the length of iterables.\n    ``tqdm`` does not.\n  * Replace ``tqdm(enumerate(...))`` with ``enumerate(tqdm(...))`` or\n    ``tqdm(enumerate(x), total=len(x), ...)``.\n    The same applies to ``numpy.ndenumerate``.\n  * Replace ``tqdm(zip(a, b))`` with ``zip(tqdm(a), b)`` or even\n    ``zip(tqdm(a), tqdm(b))``.\n  * The same applies to ``itertools``.\n  * Some useful convenience functions can be found under ``tqdm.contrib``.\n\n- `Hanging pipes in python2 <https://github.com/tqdm/tqdm/issues/359>`__:\n  when using ``tqdm`` on the CLI, you may need to use Python 3.5+ for correct\n  buffering.\n- `No intermediate output in docker-compose <https://github.com/tqdm/tqdm/issues/771>`__:\n  use ``docker-compose run`` instead of ``docker-compose up`` and ``tty: true``.\n\nIf you come across any other difficulties, browse and file |GitHub-Issues|.\n\nDocumentation\n-------------\n\n|Py-Versions| |README-Hits| (Since 19 May 2016)\n\n.. code:: python\n\n    class tqdm():\n      \"\"\"\n      Decorate an iterable object, returning an iterator which acts exactly\n      like the original iterable, but prints a dynamically updating\n      progressbar every time a value is requested.\n      \"\"\"\n\n      def __init__(self, iterable=None, desc=None, total=None, leave=True,\n                   file=None, ncols=None, mininterval=0.1,\n                   maxinterval=10.0, miniters=None, ascii=None, disable=False,\n                   unit='it', unit_scale=False, dynamic_ncols=False,\n                   smoothing=0.3, bar_format=None, initial=0, position=None,\n                   postfix=None, unit_divisor=1000):\n\nParameters\n~~~~~~~~~~\n\n* iterable  : iterable, optional  \n    Iterable to decorate with a progressbar.\n    Leave blank to manually manage the updates.\n* desc  : str, optional  \n    Prefix for the progressbar.\n* total  : int or float, optional  \n    The number of expected iterations. If unspecified,\n    len(iterable) is used if possible. If float(\"inf\") or as a last\n    resort, only basic progress statistics are displayed\n    (no ETA, no progressbar).\n    If ``gui`` is True and this parameter needs subsequent updating,\n    specify an initial arbitrary large positive number,\n    e.g. 9e9.\n* leave  : bool, optional  \n    If [default: True], keeps all traces of the progressbar\n    upon termination of iteration.\n    If ``None``, will leave only if ``position`` is ``0``.\n* file  : ``io.TextIOWrapper`` or ``io.StringIO``, optional  \n    Specifies where to output the progress messages\n    (default: sys.stderr). Uses ``file.write(str)`` and ``file.flush()``\n    methods.  For encoding, see ``write_bytes``.\n* ncols  : int, optional  \n    The width of the entire output message. If specified,\n    dynamically resizes the progressbar to stay within this bound.\n    If unspecified, attempts to use environment width. The\n    fallback is a meter width of 10 and no limit for the counter and\n    statistics. If 0, will not print any meter (only stats).\n* mininterval  : float, optional  \n    Minimum progress display update interval [default: 0.1] seconds.\n* maxinterval  : float, optional  \n    Maximum progress display update interval [default: 10] seconds.\n    Automatically adjusts ``miniters`` to correspond to ``mininterval``\n    after long display update lag. Only works if ``dynamic_miniters``\n    or monitor thread is enabled.\n* miniters  : int or float, optional  \n    Minimum progress display update interval, in iterations.\n    If 0 and ``dynamic_miniters``, will automatically adjust to equal\n    ``mininterval`` (more CPU efficient, good for tight loops).\n    If > 0, will skip display of specified number of iterations.\n    Tweak this and ``mininterval`` to get very efficient loops.\n    If your progress is erratic with both fast and slow iterations\n    (network, skipping items, etc) you should set miniters=1.\n* ascii  : bool or str, optional  \n    If unspecified or False, use unicode (smooth blocks) to fill\n    the meter. The fallback is to use ASCII characters \" 123456789#\".\n* disable  : bool, optional  \n    Whether to disable the entire progressbar wrapper\n    [default: False]. If set to None, disable on non-TTY.\n* unit  : str, optional  \n    String that will be used to define the unit of each iteration\n    [default: it].\n* unit_scale  : bool or int or float, optional  \n    If 1 or True, the number of iterations will be reduced/scaled\n    automatically and a metric prefix following the\n    International System of Units standard will be added\n    (kilo, mega, etc.) [default: False]. If any other non-zero\n    number, will scale ``total`` and ``n``.\n* dynamic_ncols  : bool, optional  \n    If set, constantly alters ``ncols`` and ``nrows`` to the\n    environment (allowing for window resizes) [default: False].\n* smoothing  : float, optional  \n    Exponential moving average smoothing factor for speed estimates\n    (ignored in GUI mode). Ranges from 0 (average speed) to 1\n    (current/instantaneous speed) [default: 0.3].\n* bar_format  : str, optional  \n    Specify a custom bar string formatting. May impact performance.\n    [default: '{l_bar}{bar}{r_bar}'], where\n    l_bar='{desc}: {percentage:3.0f}%|' and\n    r_bar='| {n_fmt}/{total_fmt} [{elapsed}<{remaining}, '\n    '{rate_fmt}{postfix}]'\n    Possible vars: l_bar, bar, r_bar, n, n_fmt, total, total_fmt,\n    percentage, elapsed, elapsed_s, ncols, nrows, desc, unit,\n    rate, rate_fmt, rate_noinv, rate_noinv_fmt,\n    rate_inv, rate_inv_fmt, postfix, unit_divisor,\n    remaining, remaining_s, eta.\n    Note that a trailing \": \" is automatically removed after {desc}\n    if the latter is empty.\n* initial  : int or float, optional  \n    The initial counter value. Useful when restarting a progress\n    bar [default: 0]. If using float, consider specifying ``{n:.3f}``\n    or similar in ``bar_format``, or specifying ``unit_scale``.\n* position  : int, optional  \n    Specify the line offset to print this bar (starting from 0)\n    Automatic if unspecified.\n    Useful to manage multiple bars at once (eg, from threads).\n* postfix  : dict or ``*``, optional  \n    Specify additional stats to display at the end of the bar.\n    Calls ``set_postfix(**postfix)`` if possible (dict).\n* unit_divisor  : float, optional  \n    [default: 1000], ignored unless ``unit_scale`` is True.\n* write_bytes  : bool, optional  \n    If (default: None) and ``file`` is unspecified,\n    bytes will be written in Python 2. If ``True`` will also write\n    bytes. In all other cases will default to unicode.\n* lock_args  : tuple, optional  \n    Passed to ``refresh`` for intermediate output\n    (initialisation, iterating, and updating).\n* nrows  : int, optional  \n    The screen height. If specified, hides nested bars outside this\n    bound. If unspecified, attempts to use environment height.\n    The fallback is 20.\n* colour  : str, optional  \n    Bar colour (e.g. 'green', '#00ff00').\n* delay  : float, optional  \n    Don't display until [default: 0] seconds have elapsed.\n\nExtra CLI Options\n~~~~~~~~~~~~~~~~~\n\n* delim  : chr, optional  \n    Delimiting character [default: '\\n']. Use '\\0' for null.\n    N.B.: on Windows systems, Python converts '\\n' to '\\r\\n'.\n* buf_size  : int, optional  \n    String buffer size in bytes [default: 256]\n    used when ``delim`` is specified.\n* bytes  : bool, optional  \n    If true, will count bytes, ignore ``delim``, and default\n    ``unit_scale`` to True, ``unit_divisor`` to 1024, and ``unit`` to 'B'.\n* tee  : bool, optional  \n    If true, passes ``stdin`` to both ``stderr`` and ``stdout``.\n* update  : bool, optional  \n    If true, will treat input as newly elapsed iterations,\n    i.e. numbers to pass to ``update()``. Note that this is slow\n    (~2e5 it/s) since every input must be decoded as a number.\n* update_to  : bool, optional  \n    If true, will treat input as total elapsed iterations,\n    i.e. numbers to assign to ``self.n``. Note that this is slow\n    (~2e5 it/s) since every input must be decoded as a number.\n* null  : bool, optional  \n    If true, will discard input (no stdout).\n* manpath  : str, optional  \n    Directory in which to install tqdm man pages.\n* comppath  : str, optional  \n    Directory in which to place tqdm completion.\n* log  : str, optional  \n    CRITICAL|FATAL|ERROR|WARN(ING)|[default: 'INFO']|DEBUG|NOTSET.\n\nReturns\n~~~~~~~\n\n* out  : decorated iterator.  \n\n.. code:: python\n\n    class tqdm():\n      def update(self, n=1):\n          \"\"\"\n          Manually update the progress bar, useful for streams\n          such as reading files.\n          E.g.:\n          >>> t = tqdm(total=filesize) # Initialise\n          >>> for current_buffer in stream:\n          ...    ...\n          ...    t.update(len(current_buffer))\n          >>> t.close()\n          The last line is highly recommended, but possibly not necessary if\n          ``t.update()`` will be called in such a way that ``filesize`` will be\n          exactly reached and printed.\n\n          Parameters\n          ----------\n          n  : int or float, optional\n              Increment to add to the internal counter of iterations\n              [default: 1]. If using float, consider specifying ``{n:.3f}``\n              or similar in ``bar_format``, or specifying ``unit_scale``.\n\n          Returns\n          -------\n          out  : bool or None\n              True if a ``display()`` was triggered.\n          \"\"\"\n\n      def close(self):\n          \"\"\"Cleanup and (if leave=False) close the progressbar.\"\"\"\n\n      def clear(self, nomove=False):\n          \"\"\"Clear current bar display.\"\"\"\n\n      def refresh(self):\n          \"\"\"\n          Force refresh the display of this bar.\n\n          Parameters\n          ----------\n          nolock  : bool, optional\n              If ``True``, does not lock.\n              If [default: ``False``]: calls ``acquire()`` on internal lock.\n          lock_args  : tuple, optional\n              Passed to internal lock's ``acquire()``.\n              If specified, will only ``display()`` if ``acquire()`` returns ``True``.\n          \"\"\"\n\n      def unpause(self):\n          \"\"\"Restart tqdm timer from last print time.\"\"\"\n\n      def reset(self, total=None):\n          \"\"\"\n          Resets to 0 iterations for repeated use.\n\n          Consider combining with ``leave=True``.\n\n          Parameters\n          ----------\n          total  : int or float, optional. Total to use for the new bar.\n          \"\"\"\n\n      def set_description(self, desc=None, refresh=True):\n          \"\"\"\n          Set/modify description of the progress bar.\n\n          Parameters\n          ----------\n          desc  : str, optional\n          refresh  : bool, optional\n              Forces refresh [default: True].\n          \"\"\"\n\n      def set_postfix(self, ordered_dict=None, refresh=True, **tqdm_kwargs):\n          \"\"\"\n          Set/modify postfix (additional stats)\n          with automatic formatting based on datatype.\n\n          Parameters\n          ----------\n          ordered_dict  : dict or OrderedDict, optional\n          refresh  : bool, optional\n              Forces refresh [default: True].\n          kwargs  : dict, optional\n          \"\"\"\n\n      @classmethod\n      def write(cls, s, file=sys.stdout, end=\"\\n\"):\n          \"\"\"Print a message via tqdm (without overlap with bars).\"\"\"\n\n      @property\n      def format_dict(self):\n          \"\"\"Public API for read-only member access.\"\"\"\n\n      def display(self, msg=None, pos=None):\n          \"\"\"\n          Use ``self.sp`` to display ``msg`` in the specified ``pos``.\n\n          Consider overloading this function when inheriting to use e.g.:\n          ``self.some_frontend(**self.format_dict)`` instead of ``self.sp``.\n\n          Parameters\n          ----------\n          msg  : str, optional. What to display (default: ``repr(self)``).\n          pos  : int, optional. Position to ``moveto``\n            (default: ``abs(self.pos)``).\n          \"\"\"\n\n      @classmethod\n      @contextmanager\n      def wrapattr(cls, stream, method, total=None, bytes=True, **tqdm_kwargs):\n          \"\"\"\n          stream  : file-like object.\n          method  : str, \"read\" or \"write\". The result of ``read()`` and\n              the first argument of ``write()`` should have a ``len()``.\n\n          >>> with tqdm.wrapattr(file_obj, \"read\", total=file_obj.size) as fobj:\n          ...     while True:\n          ...         chunk = fobj.read(chunk_size)\n          ...         if not chunk:\n          ...             break\n          \"\"\"\n\n      @classmethod\n      def pandas(cls, *targs, **tqdm_kwargs):\n          \"\"\"Registers the current `tqdm` class with `pandas`.\"\"\"\n\n    def trange(*args, **tqdm_kwargs):\n        \"\"\"\n        A shortcut for `tqdm(xrange(*args), **tqdm_kwargs)`.\n        On Python3+, `range` is used instead of `xrange`.\n        \"\"\"\n\nConvenience Functions\n~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    def tqdm.contrib.tenumerate(iterable, start=0, total=None,\n                                tqdm_class=tqdm.auto.tqdm, **tqdm_kwargs):\n        \"\"\"Equivalent of `numpy.ndenumerate` or builtin `enumerate`.\"\"\"\n\n    def tqdm.contrib.tzip(iter1, *iter2plus, **tqdm_kwargs):\n        \"\"\"Equivalent of builtin `zip`.\"\"\"\n\n    def tqdm.contrib.tmap(function, *sequences, **tqdm_kwargs):\n        \"\"\"Equivalent of builtin `map`.\"\"\"\n\nSubmodules\n~~~~~~~~~~\n\n.. code:: python\n\n    class tqdm.notebook.tqdm(tqdm.tqdm):\n        \"\"\"IPython/Jupyter Notebook widget.\"\"\"\n\n    class tqdm.auto.tqdm(tqdm.tqdm):\n        \"\"\"Automatically chooses beween `tqdm.notebook` and `tqdm.tqdm`.\"\"\"\n\n    class tqdm.asyncio.tqdm(tqdm.tqdm):\n      \"\"\"Asynchronous version.\"\"\"\n      @classmethod\n      def as_completed(cls, fs, *, loop=None, timeout=None, total=None,\n                       **tqdm_kwargs):\n          \"\"\"Wrapper for `asyncio.as_completed`.\"\"\"\n\n    class tqdm.gui.tqdm(tqdm.tqdm):\n        \"\"\"Matplotlib GUI version.\"\"\"\n\n    class tqdm.tk.tqdm(tqdm.tqdm):\n        \"\"\"Tkinter GUI version.\"\"\"\n\n    class tqdm.rich.tqdm(tqdm.tqdm):\n        \"\"\"`rich.progress` version.\"\"\"\n\n    class tqdm.keras.TqdmCallback(keras.callbacks.Callback):\n        \"\"\"Keras callback for epoch and batch progress.\"\"\"\n\n    class tqdm.dask.TqdmCallback(dask.callbacks.Callback):\n        \"\"\"Dask callback for task progress.\"\"\"\n\n\n``contrib``\n+++++++++++\n\nThe ``tqdm.contrib`` package also contains experimental modules:\n\n- ``tqdm.contrib.itertools``: Thin wrappers around ``itertools``\n- ``tqdm.contrib.concurrent``: Thin wrappers around ``concurrent.futures``\n- ``tqdm.contrib.discord``: Posts to `Discord <https://discord.com>`__ bots\n- ``tqdm.contrib.telegram``: Posts to `Telegram <https://telegram.org>`__ bots\n- ``tqdm.contrib.bells``: Automagically enables all optional features\n\n  * ``auto``, ``pandas``, ``discord``, ``telegram``\n\nExamples and Advanced Usage\n---------------------------\n\n- See the `examples <https://github.com/tqdm/tqdm/tree/master/examples>`__\n  folder;\n- import the module and run ``help()``;\n- consult the `wiki <https://github.com/tqdm/tqdm/wiki>`__;\n\n  * this has an\n    `excellent article <https://github.com/tqdm/tqdm/wiki/How-to-make-a-great-Progress-Bar>`__\n    on how to make a **great** progressbar;\n\n- check out the `slides from PyData London <https://tqdm.github.io/PyData2019/slides.html>`__, or\n- run the |binder-demo|.\n\nDescription and additional stats\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nCustom information can be displayed and updated dynamically on ``tqdm`` bars\nwith the ``desc`` and ``postfix`` arguments:\n\n.. code:: python\n\n    from tqdm import tqdm, trange\n    from random import random, randint\n    from time import sleep\n\n    with trange(10) as t:\n        for i in t:\n            # Description will be displayed on the left\n            t.set_description('GEN %i' % i)\n            # Postfix will be displayed on the right,\n            # formatted automatically based on argument's datatype\n            t.set_postfix(loss=random(), gen=randint(1,999), str='h',\n                          lst=[1, 2])\n            sleep(0.1)\n\n    with tqdm(total=10, bar_format=\"{postfix[0]} {postfix[1][value]:>8.2g}\",\n              postfix=[\"Batch\", dict(value=0)]) as t:\n        for i in range(10):\n            sleep(0.1)\n            t.postfix[1][\"value\"] = i / 2\n            t.update()\n\nPoints to remember when using ``{postfix[...]}`` in the ``bar_format`` string:\n\n- ``postfix`` also needs to be passed as an initial argument in a compatible\n  format, and\n- ``postfix`` will be auto-converted to a string if it is a ``dict``-like\n  object. To prevent this behaviour, insert an extra item into the dictionary\n  where the key is not a string.\n\nAdditional ``bar_format`` parameters may also be defined by overriding\n``format_dict``, and the bar itself may be modified using ``ascii``:\n\n.. code:: python\n\n    from tqdm import tqdm\n    class TqdmExtraFormat(tqdm):\n        \"\"\"Provides a `total_time` format parameter\"\"\"\n        @property\n        def format_dict(self):\n            d = super(TqdmExtraFormat, self).format_dict\n            total_time = d[\"elapsed\"] * (d[\"total\"] or 0) / max(d[\"n\"], 1)\n            d.update(total_time=self.format_interval(total_time) + \" in total\")\n            return d\n\n    for i in TqdmExtraFormat(\n          range(9), ascii=\" .oO0\",\n          bar_format=\"{total_time}: {percentage:.0f}%|{bar}{r_bar}\"):\n        if i == 4:\n            break\n\n.. code::\n\n    00:00 in total: 44%|0000.     | 4/9 [00:00<00:00, 962.93it/s]\n\nNote that ``{bar}`` also supports a format specifier ``[width][type]``.\n\n- ``width``\n\n  * unspecified (default): automatic to fill ``ncols``\n  * ``int >= 0``: fixed width overriding ``ncols`` logic\n  * ``int < 0``: subtract from the automatic default\n\n- ``type``\n\n  * ``a``: ascii (``ascii=True`` override)\n  * ``u``: unicode (``ascii=False`` override)\n  * ``b``: blank (``ascii=\"  \"`` override)\n\nThis means a fixed bar with right-justified text may be created by using:\n``bar_format=\"{l_bar}{bar:10}|{bar:-10b}right-justified\"``\n\nNested progress bars\n~~~~~~~~~~~~~~~~~~~~\n\n``tqdm`` supports nested progress bars. Here's an example:\n\n.. code:: python\n\n    from tqdm.auto import trange\n    from time import sleep\n\n    for i in trange(4, desc='1st loop'):\n        for j in trange(5, desc='2nd loop'):\n            for k in trange(50, desc='3rd loop', leave=False):\n                sleep(0.01)\n\nOn Windows `colorama <https://github.com/tartley/colorama>`__ will be used if\navailable to keep nested bars on their respective lines.\n\nFor manual control over positioning (e.g. for multi-processing use),\nyou may specify ``position=n`` where ``n=0`` for the outermost bar,\n``n=1`` for the next, and so on.\nHowever, it's best to check if ``tqdm`` can work without manual ``position``\nfirst.\n\n.. code:: python\n\n    from time import sleep\n    from tqdm import trange, tqdm\n    from multiprocessing import Pool, RLock, freeze_support\n\n    L = list(range(9))\n\n    def progresser(n):\n        interval = 0.001 / (n + 2)\n        total = 5000\n        text = \"#{}, est. {:<04.2}s\".format(n, interval * total)\n        for _ in trange(total, desc=text, position=n):\n            sleep(interval)\n\n    if __name__ == '__main__':\n        freeze_support()  # for Windows support\n        tqdm.set_lock(RLock())  # for managing output contention\n        p = Pool(initializer=tqdm.set_lock, initargs=(tqdm.get_lock(),))\n        p.map(progresser, L)\n\nNote that in Python 3, ``tqdm.write`` is thread-safe:\n\n.. code:: python\n\n    from time import sleep\n    from tqdm import tqdm, trange\n    from concurrent.futures import ThreadPoolExecutor\n\n    L = list(range(9))\n\n    def progresser(n):\n        interval = 0.001 / (n + 2)\n        total = 5000\n        text = \"#{}, est. {:<04.2}s\".format(n, interval * total)\n        for _ in trange(total, desc=text):\n            sleep(interval)\n        if n == 6:\n            tqdm.write(\"n == 6 completed.\")\n            tqdm.write(\"`tqdm.write()` is thread-safe in py3!\")\n\n    if __name__ == '__main__':\n        with ThreadPoolExecutor() as p:\n            p.map(progresser, L)\n\nHooks and callbacks\n~~~~~~~~~~~~~~~~~~~\n\n``tqdm`` can easily support callbacks/hooks and manual updates.\nHere's an example with ``urllib``:\n\n**``urllib.urlretrieve`` documentation**\n\n    | [...]\n    | If present, the hook function will be called once\n    | on establishment of the network connection and once after each block read\n    | thereafter. The hook will be passed three arguments; a count of blocks\n    | transferred so far, a block size in bytes, and the total size of the file.\n    | [...]\n\n.. code:: python\n\n    import urllib, os\n    from tqdm import tqdm\n    urllib = getattr(urllib, 'request', urllib)\n\n    class TqdmUpTo(tqdm):\n        \"\"\"Provides `update_to(n)` which uses `tqdm.update(delta_n)`.\"\"\"\n        def update_to(self, b=1, bsize=1, tsize=None):\n            \"\"\"\n            b  : int, optional\n                Number of blocks transferred so far [default: 1].\n            bsize  : int, optional\n                Size of each block (in tqdm units) [default: 1].\n            tsize  : int, optional\n                Total size (in tqdm units). If [default: None] remains unchanged.\n            \"\"\"\n            if tsize is not None:\n                self.total = tsize\n            return self.update(b * bsize - self.n)  # also sets self.n = b * bsize\n\n    eg_link = \"https://caspersci.uk.to/matryoshka.zip\"\n    with TqdmUpTo(unit='B', unit_scale=True, unit_divisor=1024, miniters=1,\n                  desc=eg_link.split('/')[-1]) as t:  # all optional kwargs\n        urllib.urlretrieve(eg_link, filename=os.devnull,\n                           reporthook=t.update_to, data=None)\n        t.total = t.n\n\nInspired by `twine#242 <https://github.com/pypa/twine/pull/242>`__.\nFunctional alternative in\n`examples/tqdm_wget.py <https://github.com/tqdm/tqdm/blob/master/examples/tqdm_wget.py>`__.\n\nIt is recommend to use ``miniters=1`` whenever there is potentially\nlarge differences in iteration speed (e.g. downloading a file over\na patchy connection).\n\n**Wrapping read/write methods**\n\nTo measure throughput through a file-like object's ``read`` or ``write``\nmethods, use ``CallbackIOWrapper``:\n\n.. code:: python\n\n    from tqdm.auto import tqdm\n    from tqdm.utils import CallbackIOWrapper\n\n    with tqdm(total=file_obj.size,\n              unit='B', unit_scale=True, unit_divisor=1024) as t:\n        fobj = CallbackIOWrapper(t.update, file_obj, \"read\")\n        while True:\n            chunk = fobj.read(chunk_size)\n            if not chunk:\n                break\n        t.reset()\n        # ... continue to use `t` for something else\n\nAlternatively, use the even simpler ``wrapattr`` convenience function,\nwhich would condense both the ``urllib`` and ``CallbackIOWrapper`` examples\ndown to:\n\n.. code:: python\n\n    import urllib, os\n    from tqdm import tqdm\n\n    eg_link = \"https://caspersci.uk.to/matryoshka.zip\"\n    response = getattr(urllib, 'request', urllib).urlopen(eg_link)\n    with tqdm.wrapattr(open(os.devnull, \"wb\"), \"write\",\n                       miniters=1, desc=eg_link.split('/')[-1],\n                       total=getattr(response, 'length', None)) as fout:\n        for chunk in response:\n            fout.write(chunk)\n\nThe ``requests`` equivalent is nearly identical:\n\n.. code:: python\n\n    import requests, os\n    from tqdm import tqdm\n\n    eg_link = \"https://caspersci.uk.to/matryoshka.zip\"\n    response = requests.get(eg_link, stream=True)\n    with tqdm.wrapattr(open(os.devnull, \"wb\"), \"write\",\n                       miniters=1, desc=eg_link.split('/')[-1],\n                       total=int(response.headers.get('content-length', 0))) as fout:\n        for chunk in response.iter_content(chunk_size=4096):\n            fout.write(chunk)\n\n**Custom callback**\n\n``tqdm`` is known for intelligently skipping unnecessary displays. To make a\ncustom callback take advantage of this, simply use the return value of\n``update()``. This is set to ``True`` if a ``display()`` was triggered.\n\n.. code:: python\n\n    from tqdm.auto import tqdm as std_tqdm\n\n    def external_callback(*args, **kwargs):\n        ...\n\n    class TqdmExt(std_tqdm):\n        def update(self, n=1):\n            displayed = super(TqdmExt, self).update(n):\n            if displayed:\n                external_callback(**self.format_dict)\n            return displayed\n\n``asyncio``\n~~~~~~~~~~~\n\nNote that ``break`` isn't currently caught by asynchronous iterators.\nThis means that ``tqdm`` cannot clean up after itself in this case:\n\n.. code:: python\n\n    from tqdm.asyncio import tqdm\n\n    async for i in tqdm(range(9)):\n        if i == 2:\n            break\n\nInstead, either call ``pbar.close()`` manually or use the context manager syntax:\n\n.. code:: python\n\n    from tqdm.asyncio import tqdm\n\n    with tqdm(range(9)) as pbar:\n        async for i in pbar:\n            if i == 2:\n                break\n\nPandas Integration\n~~~~~~~~~~~~~~~~~~\n\nDue to popular demand we've added support for ``pandas`` -- here's an example\nfor ``DataFrame.progress_apply`` and ``DataFrameGroupBy.progress_apply``:\n\n.. code:: python\n\n    import pandas as pd\n    import numpy as np\n    from tqdm import tqdm\n\n    df = pd.DataFrame(np.random.randint(0, 100, (100000, 6)))\n\n    # Register `pandas.progress_apply` and `pandas.Series.map_apply` with `tqdm`\n    # (can use `tqdm.gui.tqdm`, `tqdm.notebook.tqdm`, optional kwargs, etc.)\n    tqdm.pandas(desc=\"my bar!\")\n\n    # Now you can use `progress_apply` instead of `apply`\n    # and `progress_map` instead of `map`\n    df.progress_apply(lambda x: x**2)\n    # can also groupby:\n    # df.groupby(0).progress_apply(lambda x: x**2)\n\nIn case you're interested in how this works (and how to modify it for your\nown callbacks), see the\n`examples <https://github.com/tqdm/tqdm/tree/master/examples>`__\nfolder or import the module and run ``help()``.\n\nKeras Integration\n~~~~~~~~~~~~~~~~~\n\nA ``keras`` callback is also available:\n\n.. code:: python\n\n    from tqdm.keras import TqdmCallback\n\n    ...\n\n    model.fit(..., verbose=0, callbacks=[TqdmCallback()])\n\nDask Integration\n~~~~~~~~~~~~~~~~\n\nA ``dask`` callback is also available:\n\n.. code:: python\n\n    from tqdm.dask import TqdmCallback\n\n    with TqdmCallback(desc=\"compute\"):\n        ...\n        arr.compute()\n\n    # or use callback globally\n    cb = TqdmCallback(desc=\"global\")\n    cb.register()\n    arr.compute()\n\nIPython/Jupyter Integration\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIPython/Jupyter is supported via the ``tqdm.notebook`` submodule:\n\n.. code:: python\n\n    from tqdm.notebook import trange, tqdm\n    from time import sleep\n\n    for i in trange(3, desc='1st loop'):\n        for j in tqdm(range(100), desc='2nd loop'):\n            sleep(0.01)\n\nIn addition to ``tqdm`` features, the submodule provides a native Jupyter\nwidget (compatible with IPython v1-v4 and Jupyter), fully working nested bars\nand colour hints (blue: normal, green: completed, red: error/interrupt,\nlight blue: no ETA); as demonstrated below.\n\n|Screenshot-Jupyter1|\n|Screenshot-Jupyter2|\n|Screenshot-Jupyter3|\n\nThe ``notebook`` version supports percentage or pixels for overall width\n(e.g.: ``ncols='100%'`` or ``ncols='480px'``).\n\nIt is also possible to let ``tqdm`` automatically choose between\nconsole or notebook versions by using the ``autonotebook`` submodule:\n\n.. code:: python\n\n    from tqdm.autonotebook import tqdm\n    tqdm.pandas()\n\nNote that this will issue a ``TqdmExperimentalWarning`` if run in a notebook\nsince it is not meant to be possible to distinguish between ``jupyter notebook``\nand ``jupyter console``. Use ``auto`` instead of ``autonotebook`` to suppress\nthis warning.\n\nNote that notebooks will display the bar in the cell where it was created.\nThis may be a different cell from the one where it is used.\nIf this is not desired, either\n\n- delay the creation of the bar to the cell where it must be displayed, or\n- create the bar with ``display=False``, and in a later cell call\n  ``display(bar.container)``:\n\n.. code:: python\n\n    from tqdm.notebook import tqdm\n    pbar = tqdm(..., display=False)\n\n.. code:: python\n\n    # different cell\n    display(pbar.container)\n\nThe ``keras`` callback has a ``display()`` method which can be used likewise:\n\n.. code:: python\n\n    from tqdm.keras import TqdmCallback\n    cbk = TqdmCallback(display=False)\n\n.. code:: python\n\n    # different cell\n    cbk.display()\n    model.fit(..., verbose=0, callbacks=[cbk])\n\nAnother possibility is to have a single bar (near the top of the notebook)\nwhich is constantly re-used (using ``reset()`` rather than ``close()``).\nFor this reason, the notebook version (unlike the CLI version) does not\nautomatically call ``close()`` upon ``Exception``.\n\n.. code:: python\n\n    from tqdm.notebook import tqdm\n    pbar = tqdm()\n\n.. code:: python\n\n    # different cell\n    iterable = range(100)\n    pbar.reset(total=len(iterable))  # initialise with new `total`\n    for i in iterable:\n        pbar.update()\n    pbar.refresh()  # force print final status but don't `close()`\n\nCustom Integration\n~~~~~~~~~~~~~~~~~~\n\nTo change the default arguments (such as making ``dynamic_ncols=True``),\nsimply use built-in Python magic:\n\n.. code:: python\n\n    from functools import partial\n    from tqdm import tqdm as std_tqdm\n    tqdm = partial(std_tqdm, dynamic_ncols=True)\n\nFor further customisation,\n``tqdm`` may be inherited from to create custom callbacks (as with the\n``TqdmUpTo`` example `above <#hooks-and-callbacks>`__) or for custom frontends\n(e.g. GUIs such as notebook or plotting packages). In the latter case:\n\n1. ``def __init__()`` to call ``super().__init__(..., gui=True)`` to disable\n   terminal ``status_printer`` creation.\n2. Redefine: ``close()``, ``clear()``, ``display()``.\n\nConsider overloading ``display()`` to use e.g.\n``self.frontend(**self.format_dict)`` instead of ``self.sp(repr(self))``.\n\nSome submodule examples of inheritance:\n\n- `tqdm/notebook.py <https://github.com/tqdm/tqdm/blob/master/tqdm/notebook.py>`__\n- `tqdm/gui.py <https://github.com/tqdm/tqdm/blob/master/tqdm/gui.py>`__\n- `tqdm/tk.py <https://github.com/tqdm/tqdm/blob/master/tqdm/tk.py>`__\n- `tqdm/contrib/telegram.py <https://github.com/tqdm/tqdm/blob/master/tqdm/contrib/telegram.py>`__\n- `tqdm/contrib/discord.py <https://github.com/tqdm/tqdm/blob/master/tqdm/contrib/discord.py>`__\n\nDynamic Monitor/Meter\n~~~~~~~~~~~~~~~~~~~~~\n\nYou can use a ``tqdm`` as a meter which is not monotonically increasing.\nThis could be because ``n`` decreases (e.g. a CPU usage monitor) or ``total``\nchanges.\n\nOne example would be recursively searching for files. The ``total`` is the\nnumber of objects found so far, while ``n`` is the number of those objects which\nare files (rather than folders):\n\n.. code:: python\n\n    from tqdm import tqdm\n    import os.path\n\n    def find_files_recursively(path, show_progress=True):\n        files = []\n        # total=1 assumes `path` is a file\n        t = tqdm(total=1, unit=\"file\", disable=not show_progress)\n        if not os.path.exists(path):\n            raise IOError(\"Cannot find:\" + path)\n\n        def append_found_file(f):\n            files.append(f)\n            t.update()\n\n        def list_found_dir(path):\n            \"\"\"returns os.listdir(path) assuming os.path.isdir(path)\"\"\"\n            listing = os.listdir(path)\n            # subtract 1 since a \"file\" we found was actually this directory\n            t.total += len(listing) - 1\n            # fancy way to give info without forcing a refresh\n            t.set_postfix(dir=path[-10:], refresh=False)\n            t.update(0)  # may trigger a refresh\n            return listing\n\n        def recursively_search(path):\n            if os.path.isdir(path):\n                for f in list_found_dir(path):\n                    recursively_search(os.path.join(path, f))\n            else:\n                append_found_file(path)\n\n        recursively_search(path)\n        t.set_postfix(dir=path)\n        t.close()\n        return files\n\nUsing ``update(0)`` is a handy way to let ``tqdm`` decide when to trigger a\ndisplay refresh to avoid console spamming.\n\nWriting messages\n~~~~~~~~~~~~~~~~\n\nThis is a work in progress (see\n`#737 <https://github.com/tqdm/tqdm/issues/737>`__).\n\nSince ``tqdm`` uses a simple printing mechanism to display progress bars,\nyou should not write any message in the terminal using ``print()`` while\na progressbar is open.\n\nTo write messages in the terminal without any collision with ``tqdm`` bar\ndisplay, a ``.write()`` method is provided:\n\n.. code:: python\n\n    from tqdm.auto import tqdm, trange\n    from time import sleep\n\n    bar = trange(10)\n    for i in bar:\n        # Print using tqdm class method .write()\n        sleep(0.1)\n        if not (i % 3):\n            tqdm.write(\"Done task %i\" % i)\n        # Can also use bar.write()\n\nBy default, this will print to standard output ``sys.stdout``. but you can\nspecify any file-like object using the ``file`` argument. For example, this\ncan be used to redirect the messages writing to a log file or class.\n\nRedirecting writing\n~~~~~~~~~~~~~~~~~~~\n\nIf using a library that can print messages to the console, editing the library\nby  replacing ``print()`` with ``tqdm.write()`` may not be desirable.\nIn that case, redirecting ``sys.stdout`` to ``tqdm.write()`` is an option.\n\nTo redirect ``sys.stdout``, create a file-like class that will write\nany input string to ``tqdm.write()``, and supply the arguments\n``file=sys.stdout, dynamic_ncols=True``.\n\nA reusable canonical example is given below:\n\n.. code:: python\n\n    from time import sleep\n    import contextlib\n    import sys\n    from tqdm import tqdm\n    from tqdm.contrib import DummyTqdmFile\n\n\n    @contextlib.contextmanager\n    def std_out_err_redirect_tqdm():\n        orig_out_err = sys.stdout, sys.stderr\n        try:\n            sys.stdout, sys.stderr = map(DummyTqdmFile, orig_out_err)\n            yield orig_out_err[0]\n        # Relay exceptions\n        except Exception as exc:\n            raise exc\n        # Always restore sys.stdout/err if necessary\n        finally:\n            sys.stdout, sys.stderr = orig_out_err\n\n    def some_fun(i):\n        print(\"Fee, fi, fo,\".split()[i])\n\n    # Redirect stdout to tqdm.write() (don't forget the `as save_stdout`)\n    with std_out_err_redirect_tqdm() as orig_stdout:\n        # tqdm needs the original stdout\n        # and dynamic_ncols=True to autodetect console width\n        for i in tqdm(range(3), file=orig_stdout, dynamic_ncols=True):\n            sleep(.5)\n            some_fun(i)\n\n    # After the `with`, printing is restored\n    print(\"Done!\")\n\nRedirecting ``logging``\n~~~~~~~~~~~~~~~~~~~~~~~\n\nSimilar to ``sys.stdout``/``sys.stderr`` as detailed above, console ``logging``\nmay also be redirected to ``tqdm.write()``.\n\nWarning: if also redirecting ``sys.stdout``/``sys.stderr``, make sure to\nredirect ``logging`` first if needed.\n\nHelper methods are available in ``tqdm.contrib.logging``. For example:\n\n.. code:: python\n\n    import logging\n    from tqdm import trange\n    from tqdm.contrib.logging import logging_redirect_tqdm\n\n    LOG = logging.getLogger(__name__)\n\n    if __name__ == '__main__':\n        logging.basicConfig(level=logging.INFO)\n        with logging_redirect_tqdm():\n            for i in trange(9):\n                if i == 4:\n                    LOG.info(\"console logging redirected to `tqdm.write()`\")\n        # logging restored\n\nMonitoring thread, intervals and miniters\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``tqdm`` implements a few tricks to increase efficiency and reduce overhead.\n\n- Avoid unnecessary frequent bar refreshing: ``mininterval`` defines how long\n  to wait between each refresh. ``tqdm`` always gets updated in the background,\n  but it will display only every ``mininterval``.\n- Reduce number of calls to check system clock/time.\n- ``mininterval`` is more intuitive to configure than ``miniters``.\n  A clever adjustment system ``dynamic_miniters`` will automatically adjust\n  ``miniters`` to the amount of iterations that fit into time ``mininterval``.\n  Essentially, ``tqdm`` will check if it's time to print without actually\n  checking time. This behaviour can be still be bypassed by manually setting\n  ``miniters``.\n\nHowever, consider a case with a combination of fast and slow iterations.\nAfter a few fast iterations, ``dynamic_miniters`` will set ``miniters`` to a\nlarge number. When iteration rate subsequently slows, ``miniters`` will\nremain large and thus reduce display update frequency. To address this:\n\n- ``maxinterval`` defines the maximum time between display refreshes.\n  A concurrent monitoring thread checks for overdue updates and forces one\n  where necessary.\n\nThe monitoring thread should not have a noticeable overhead, and guarantees\nupdates at least every 10 seconds by default.\nThis value can be directly changed by setting the ``monitor_interval`` of\nany ``tqdm`` instance (i.e. ``t = tqdm.tqdm(...); t.monitor_interval = 2``).\nThe monitor thread may be disabled application-wide by setting\n``tqdm.tqdm.monitor_interval = 0`` before instantiation of any ``tqdm`` bar.\n\n\nMerch\n-----\n\nYou can buy `tqdm branded merch <https://tqdm.github.io/merch>`__ now!\n\nContributions\n-------------\n\n|GitHub-Commits| |GitHub-Issues| |GitHub-PRs| |OpenHub-Status| |GitHub-Contributions| |CII Best Practices|\n\nAll source code is hosted on `GitHub <https://github.com/tqdm/tqdm>`__.\nContributions are welcome.\n\nSee the\n`CONTRIBUTING <https://raw.githubusercontent.com/tqdm/tqdm/master/CONTRIBUTING.md>`__\nfile for more information.\n\nDevelopers who have made significant contributions, ranked by *SLoC*\n(surviving lines of code,\n`git fame <https://github.com/casperdcl/git-fame>`__ ``-wMC --excl '\\.(png|gif|jpg)$'``),\nare:\n\n==================== ======================================================== ==== ================================\nName                 ID                                                       SLoC Notes\n==================== ======================================================== ==== ================================\nCasper da Costa-Luis `casperdcl <https://github.com/casperdcl>`__             ~81% primary maintainer |Gift-Casper|\nStephen Larroque     `lrq3000 <https://github.com/lrq3000>`__                 ~10% team member\nMartin Zugnoni       `martinzugnoni <https://github.com/martinzugnoni>`__     ~3%\nRichard Sheridan     `richardsheridan <https://github.com/richardsheridan>`__ ~1%\nGuangshuo Chen       `chengs <https://github.com/chengs>`__                   ~1%\nKyle Altendorf       `altendky <https://github.com/altendky>`__               <1%\nMatthew Stevens      `mjstevens777 <https://github.com/mjstevens777>`__       <1%\nHadrien Mary         `hadim <https://github.com/hadim>`__                     <1%  team member\nIvan Ivanov          `obiwanus <https://github.com/obiwanus>`__               <1%\nDaniel Panteleit     `danielpanteleit <https://github.com/danielpanteleit>`__ <1%\nJonas Haag           `jonashaag <https://github.com/jonashaag>`__             <1%\nJames E. King III    `jeking3 <https://github.com/jeking3>`__                 <1%\nNoam Yorav-Raphael   `noamraph <https://github.com/noamraph>`__               <1%  original author\nMikhail Korobov      `kmike <https://github.com/kmike>`__                     <1%  team member\n==================== ======================================================== ==== ================================\n\nPorts to Other Languages\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nA list is available on\n`this wiki page <https://github.com/tqdm/tqdm/wiki/tqdm-ports>`__.\n\n\nLICENCE\n-------\n\nOpen Source (OSI approved): |LICENCE|\n\nCitation information: |DOI|\n\n|README-Hits| (Since 19 May 2016)\n\n.. |Logo| image:: https://img.tqdm.ml/logo.gif\n.. |Screenshot| image:: https://img.tqdm.ml/tqdm.gif\n.. |Video| image:: https://img.tqdm.ml/video.jpg\n   :target: https://tqdm.github.io/video\n.. |Slides| image:: https://img.tqdm.ml/slides.jpg\n   :target: https://tqdm.github.io/PyData2019/slides.html\n.. |Merch| image:: https://img.tqdm.ml/merch.jpg\n   :target: https://tqdm.github.io/merch\n.. |Build-Status| image:: https://img.shields.io/github/workflow/status/tqdm/tqdm/Test/master?logo=GitHub\n   :target: https://github.com/tqdm/tqdm/actions?query=workflow%3ATest\n.. |Coverage-Status| image:: https://img.shields.io/coveralls/github/tqdm/tqdm/master?logo=coveralls\n   :target: https://coveralls.io/github/tqdm/tqdm\n.. |Branch-Coverage-Status| image:: https://codecov.io/gh/tqdm/tqdm/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/tqdm/tqdm\n.. |Codacy-Grade| image:: https://app.codacy.com/project/badge/Grade/3f965571598f44549c7818f29cdcf177\n   :target: https://www.codacy.com/gh/tqdm/tqdm/dashboard\n.. |CII Best Practices| image:: https://bestpractices.coreinfrastructure.org/projects/3264/badge\n   :target: https://bestpractices.coreinfrastructure.org/projects/3264\n.. |GitHub-Status| image:: https://img.shields.io/github/tag/tqdm/tqdm.svg?maxAge=86400&logo=github&logoColor=white\n   :target: https://github.com/tqdm/tqdm/releases\n.. |GitHub-Forks| image:: https://img.shields.io/github/forks/tqdm/tqdm.svg?logo=github&logoColor=white\n   :target: https://github.com/tqdm/tqdm/network\n.. |GitHub-Stars| image:: https://img.shields.io/github/stars/tqdm/tqdm.svg?logo=github&logoColor=white\n   :target: https://github.com/tqdm/tqdm/stargazers\n.. |GitHub-Commits| image:: https://img.shields.io/github/commit-activity/y/tqdm/tqdm.svg?logo=git&logoColor=white\n   :target: https://github.com/tqdm/tqdm/graphs/commit-activity\n.. |GitHub-Issues| image:: https://img.shields.io/github/issues-closed/tqdm/tqdm.svg?logo=github&logoColor=white\n   :target: https://github.com/tqdm/tqdm/issues?q=\n.. |GitHub-PRs| image:: https://img.shields.io/github/issues-pr-closed/tqdm/tqdm.svg?logo=github&logoColor=white\n   :target: https://github.com/tqdm/tqdm/pulls\n.. |GitHub-Contributions| image:: https://img.shields.io/github/contributors/tqdm/tqdm.svg?logo=github&logoColor=white\n   :target: https://github.com/tqdm/tqdm/graphs/contributors\n.. |GitHub-Updated| image:: https://img.shields.io/github/last-commit/tqdm/tqdm/master.svg?logo=github&logoColor=white&label=pushed\n   :target: https://github.com/tqdm/tqdm/pulse\n.. |Gift-Casper| image:: https://img.shields.io/badge/dynamic/json.svg?color=ff69b4&label=gifts%20received&prefix=%C2%A3&query=%24..sum&url=https%3A%2F%2Fcaspersci.uk.to%2Fgifts.json\n   :target: https://www.cdcl.ml/sponsor\n.. |Versions| image:: https://img.shields.io/pypi/v/tqdm.svg\n   :target: https://tqdm.github.io/releases\n.. |PyPI-Downloads| image:: https://img.shields.io/pypi/dm/tqdm.svg?label=pypi%20downloads&logo=PyPI&logoColor=white\n   :target: https://pepy.tech/project/tqdm\n.. |Py-Versions| image:: https://img.shields.io/pypi/pyversions/tqdm.svg?logo=python&logoColor=white\n   :target: https://pypi.org/project/tqdm\n.. |Conda-Forge-Status| image:: https://img.shields.io/conda/v/conda-forge/tqdm.svg?label=conda-forge&logo=conda-forge\n   :target: https://anaconda.org/conda-forge/tqdm\n.. |Snapcraft| image:: https://img.shields.io/badge/snap-install-82BEA0.svg?logo=snapcraft\n   :target: https://snapcraft.io/tqdm\n.. |Docker| image:: https://img.shields.io/badge/docker-pull-blue.svg?logo=docker&logoColor=white\n   :target: https://hub.docker.com/r/tqdm/tqdm\n.. |Libraries-Rank| image:: https://img.shields.io/librariesio/sourcerank/pypi/tqdm.svg?logo=koding&logoColor=white\n   :target: https://libraries.io/pypi/tqdm\n.. |Libraries-Dependents| image:: https://img.shields.io/librariesio/dependent-repos/pypi/tqdm.svg?logo=koding&logoColor=white\n    :target: https://github.com/tqdm/tqdm/network/dependents\n.. |OpenHub-Status| image:: https://www.openhub.net/p/tqdm/widgets/project_thin_badge?format=gif\n   :target: https://www.openhub.net/p/tqdm?ref=Thin+badge\n.. |awesome-python| image:: https://awesome.re/mentioned-badge.svg\n   :target: https://github.com/vinta/awesome-python\n.. |LICENCE| image:: https://img.shields.io/pypi/l/tqdm.svg\n   :target: https://raw.githubusercontent.com/tqdm/tqdm/master/LICENCE\n.. |DOI| image:: https://img.shields.io/badge/DOI-10.5281/zenodo.595120-blue.svg\n   :target: https://doi.org/10.5281/zenodo.595120\n.. |binder-demo| image:: https://mybinder.org/badge_logo.svg\n   :target: https://mybinder.org/v2/gh/tqdm/tqdm/master?filepath=DEMO.ipynb\n.. |Screenshot-Jupyter1| image:: https://img.tqdm.ml/jupyter-1.gif\n.. |Screenshot-Jupyter2| image:: https://img.tqdm.ml/jupyter-2.gif\n.. |Screenshot-Jupyter3| image:: https://img.tqdm.ml/jupyter-3.gif\n.. |README-Hits| image:: https://caspersci.uk.to/cgi-bin/hits.cgi?q=tqdm&style=social&r=https://github.com/tqdm/tqdm&l=https://img.tqdm.ml/favicon.png&f=https://img.tqdm.ml/logo.gif\n   :target: https://caspersci.uk.to/cgi-bin/hits.cgi?q=tqdm&a=plot&r=https://github.com/tqdm/tqdm&l=https://img.tqdm.ml/favicon.png&f=https://img.tqdm.ml/logo.gif&style=social\n\n\n",
          "name": "tqdm",
          "keywords": "progressbar,progressmeter,progress,bar,meter,rate,eta,console,terminal,time",
          "license": "MPLv2.0, MIT Licences",
          "codeRepository": "https://pypi.org/project/tqdm/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python",
          "applicationCategory": [
            "Desktop Environment",
            "Education",
            "Office/Business",
            "Other/Nonlisted Topic",
            "Software Development",
            "System",
            "Terminals",
            "Utilities"
          ],
          "applicationSubCategory": [
            "Computer Aided Instruction (CAI)",
            "Testing",
            "Build Tools",
            "Libraries",
            "Pre-processors",
            "User Interfaces",
            "Installation/Setup",
            "Logging",
            "Monitoring",
            "Shells"
          ],
          "operatingSystem": [
            {
              "type": "OperatingSystem",
              "name": "macOS"
            },
            {
              "type": "OperatingSystem",
              "name": "Windows"
            },
            {
              "type": "OperatingSystem",
              "name": "Linux"
            },
            {
              "type": "OperatingSystem",
              "name": "Unix"
            }
          ]
        },
        {
          "type": "SoftwarePackage",
          "description": "# Traitlets\n\n[![Build Status](https://travis-ci.org/ipython/traitlets.svg?branch=master)](https://travis-ci.org/ipython/traitlets)\n[![Documentation Status](https://readthedocs.org/projects/traitlets/badge/?version=latest)](https://traitlets.readthedocs.io/en/latest/?badge=latest)\n\n|               |                                        |\n|---------------|----------------------------------------|\n| **home**      |   https://github.com/ipython/traitlets |\n| **pypi-repo** |   https://pypi.org/project/traitlets/  |\n| **docs**      |   https://traitlets.readthedocs.io/    |\n| **license**   |   Modified BSD License                 |\n\nTraitlets is a pure Python library enabling:\n\n- the enforcement of strong typing for attributes of Python objects\n (typed attributes are called *\"traits\"*);\n- dynamically calculated default values;\n- automatic validation and coercion of trait attributes when attempting a\n  change;\n- registering for receiving notifications when trait values change;\n- reading configuring values from files or from command line\n  arguments - a distinct layer on top of traitlets, so you may use\n  traitlets without the configuration machinery.\n\nIts implementation relies on the [descriptor](https://docs.python.org/howto/descriptor.html)\npattern, and it is a lightweight pure-python alternative of the\n[*traits* library](http://code.enthought.com/pages/traits.html).\n\nTraitlets powers the configuration system of IPython and Jupyter\nand the declarative API of IPython interactive widgets.\n\n## Installation\n\nFor a local installation, make sure you have\n[pip installed](https://pip.pypa.io/en/stable/installing/) and run:\n\n```bash\npip install traitlets\n```\n\nFor a **development installation**, clone this repository, change into the\n`traitlets` root directory, and run pip:\n\n```bash\ngit clone https://github.com/ipython/traitlets.git\ncd traitlets\npip install -e .\n```\n\n## Running the tests\n\n```bash\npip install \"traitlets[test]\"\npy.test traitlets\n```\n\n## Usage\n\nAny class with trait attributes must inherit from `HasTraits`.\nFor the list of available trait types and their properties, see the\n[Trait Types](https://traitlets.readthedocs.io/en/latest/trait_types.html)\nsection of the documentation.\n\n### Dynamic default values\n\nTo calculate a default value dynamically, decorate a method of your class with\n`@default({traitname})`. This method will be called on the instance, and\nshould return the default value. In this example, the `_username_default`\nmethod is decorated with `@default('username')`:\n\n```Python\nimport getpass\nfrom traitlets import HasTraits, Unicode, default\n\nclass Identity(HasTraits):\n    username = Unicode()\n\n    @default('username')\n    def _username_default(self):\n        return getpass.getuser()\n```\n\n### Callbacks when a trait attribute changes\n\nWhen a trait changes, an application can follow this trait change with\nadditional actions.\n\nTo do something when a trait attribute is changed, decorate a method with\n[`traitlets.observe()`](https://traitlets.readthedocs.io/en/latest/api.html?highlight=observe#traitlets.observe).\nThe method will be called with a single argument, a dictionary which contains\nan owner, new value, old value, name of the changed trait, and the event type.\n\nIn this example, the `_num_changed` method is decorated with ``@observe(`num`)``:\n\n```Python\nfrom traitlets import HasTraits, Integer, observe\n\nclass TraitletsExample(HasTraits):\n    num = Integer(5, help=\"a number\").tag(config=True)\n\n    @observe('num')\n    def _num_changed(self, change):\n        print(\"{name} changed from {old} to {new}\".format(**change))\n```\n\nand is passed the following dictionary when called:\n\n```Python\n{\n  'owner': object,  # The HasTraits instance\n  'new': 6,         # The new value\n  'old': 5,         # The old value\n  'name': \"foo\",    # The name of the changed trait\n  'type': 'change', # The event type of the notification, usually 'change'\n}\n```\n\n### Validation and coercion\n\nEach trait type (`Int`, `Unicode`, `Dict` etc.) may have its own validation or\ncoercion logic. In addition, we can register custom cross-validators\nthat may depend on the state of other attributes. For example:\n\n```Python\nfrom traitlets import HasTraits, TraitError, Int, Bool, validate\n\nclass Parity(HasTraits):\n    value = Int()\n    parity = Int()\n\n    @validate('value')\n    def _valid_value(self, proposal):\n        if proposal['value'] % 2 != self.parity:\n            raise TraitError('value and parity should be consistent')\n        return proposal['value']\n\n    @validate('parity')\n    def _valid_parity(self, proposal):\n        parity = proposal['value']\n        if parity not in [0, 1]:\n            raise TraitError('parity should be 0 or 1')\n        if self.value % 2 != parity:\n            raise TraitError('value and parity should be consistent')\n        return proposal['value']\n\nparity_check = Parity(value=2)\n\n# Changing required parity and value together while holding cross validation\nwith parity_check.hold_trait_notifications():\n    parity_check.value = 1\n    parity_check.parity = 1\n```\n\nHowever, we **recommend** that custom cross-validators don't modify the state\nof the HasTraits instance.\n\n### Release build:\n\n```bash\n$ pip install build\n$ python -m build .\n```\n\n\n",
          "name": "traitlets",
          "author": [
            {
              "type": "Person",
              "name": "IPython Development",
              "familyName": [
                "Development"
              ],
              "givenName": [
                "IPython"
              ]
            }
          ],
          "keywords": "Interactive,Interpreter,Shell,Web",
          "license": "BSD",
          "codeRepository": "https://pypi.org/project/traitlets/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python"
        },
        {
          "type": "SoftwarePackage",
          "description": "Typing Extensions -- Backported and Experimental Type Hints for Python\n\nThe ``typing`` module was added to the standard library in Python 3.5, but\nmany new features have been added to the module since then.\nThis means users of Python 3.5 - 3.6 who are unable to upgrade will not be\nable to take advantage of new types added to the ``typing`` module, such as\n``typing.Protocol`` or ``typing.TypedDict``.\n\nThe ``typing_extensions`` module contains backports of these changes.\nExperimental types that will eventually be added to the ``typing``\nmodule are also included in ``typing_extensions``, such as\n``typing.ParamSpec`` and ``typing.TypeGuard``.\n\nUsers of Python versions before 3.5 should install and use\nthe ``typing`` module from PyPI instead of using this one, unless specifically\nwriting code that must be compatible with multiple Python versions or requires\nexperimental types.\n\n\n",
          "name": "typing-extensions",
          "author": [
            {
              "type": "Person",
              "name": "Guido van",
              "familyName": [
                "van"
              ],
              "givenName": [
                "Guido"
              ]
            }
          ],
          "keywords": "typing function annotations type hints hinting checking checker typehints typehinting typechecking backport",
          "license": "PSF",
          "version": "==3.7.4.3",
          "codeRepository": "https://pypi.org/project/typing-extensions/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python",
          "applicationCategory": [
            "Software Development"
          ]
        },
        {
          "type": "SoftwarePackage",
          "description": "\nurllib3 is a powerful, *user-friendly* HTTP client for Python. Much of the\nPython ecosystem already uses urllib3 and you should too.\nurllib3 brings many critical features that are missing from the Python\nstandard libraries:\n\n- Thread safety.\n- Connection pooling.\n- Client-side SSL/TLS verification.\n- File uploads with multipart encoding.\n- Helpers for retrying requests and dealing with HTTP redirects.\n- Support for gzip, deflate, and brotli encoding.\n- Proxy support for HTTP and SOCKS.\n- 100% test coverage.\n\nurllib3 is powerful and easy to use:\n\n.. code-block:: python\n\n    >>> import urllib3\n    >>> http = urllib3.PoolManager()\n    >>> r = http.request('GET', 'http://httpbin.org/robots.txt')\n    >>> r.status\n    200\n    >>> r.data\n    'User-agent: *\\nDisallow: /deny\\n'\n\n\nInstalling\n----------\n\nurllib3 can be installed with `pip <https://pip.pypa.io>`_::\n\n    $ python -m pip install urllib3\n\nAlternatively, you can grab the latest source code from `GitHub <https://github.com/urllib3/urllib3>`_::\n\n    $ git clone git://github.com/urllib3/urllib3.git\n    $ python setup.py install\n\n\nDocumentation\n-------------\n\nurllib3 has usage and reference documentation at `urllib3.readthedocs.io <https://urllib3.readthedocs.io>`_.\n\n\nContributing\n------------\n\nurllib3 happily accepts contributions. Please see our\n`contributing documentation <https://urllib3.readthedocs.io/en/latest/contributing.html>`_\nfor some tips on getting started.\n\n\nSecurity Disclosures\n--------------------\n\nTo report a security vulnerability, please use the\n`Tidelift security contact <https://tidelift.com/security>`_.\nTidelift will coordinate the fix and disclosure with maintainers.\n\n\nMaintainers\n-----------\n\n- `@sethmlarson <https://github.com/sethmlarson>`__ (Seth M. Larson)\n- `@pquentin <https://github.com/pquentin>`__ (Quentin Pradet)\n- `@theacodes <https://github.com/theacodes>`__ (Thea Flowers)\n- `@haikuginger <https://github.com/haikuginger>`__ (Jess Shapiro)\n- `@lukasa <https://github.com/lukasa>`__ (Cory Benfield)\n- `@sigmavirus24 <https://github.com/sigmavirus24>`__ (Ian Stapleton Cordasco)\n- `@shazow <https://github.com/shazow>`__ (Andrey Petrov)\n\n👋\n\n\nSponsorship\n-----------\n\nIf your company benefits from this library, please consider `sponsoring its\ndevelopment <https://urllib3.readthedocs.io/en/latest/sponsors.html>`_.\n\n\nFor Enterprise\n--------------\n\n.. |tideliftlogo| image:: https://nedbatchelder.com/pix/Tidelift_Logos_RGB_Tidelift_Shorthand_On-White_small.png\n   :width: 75\n   :alt: Tidelift\n\n.. list-table::\n   :widths: 10 100\n\n   * - |tideliftlogo|\n     - Professional support for urllib3 is available as part of the `Tidelift\n       Subscription`_.  Tidelift gives software development teams a single source for\n       purchasing and maintaining their software, with professional grade assurances\n       from the experts who know it best, while seamlessly integrating with existing\n       tools.\n\n.. _Tidelift Subscription: https://tidelift.com/subscription/pkg/pypi-urllib3?utm_source=pypi-urllib3&utm_medium=referral&utm_campaign=readme\n\n\nChanges\n=======\n\n1.26.5 (2021-05-26)\n-------------------\n\n* Fixed deprecation warnings emitted in Python 3.10.\n* Updated vendored ``six`` library to 1.16.0.\n* Improved performance of URL parser when splitting\n  the authority component.\n\n\n1.26.4 (2021-03-15)\n-------------------\n\n* Changed behavior of the default ``SSLContext`` when connecting to HTTPS proxy\n  during HTTPS requests. The default ``SSLContext`` now sets ``check_hostname=True``.\n\n\n1.26.3 (2021-01-26)\n-------------------\n\n* Fixed bytes and string comparison issue with headers (Pull #2141)\n\n* Changed ``ProxySchemeUnknown`` error message to be\n  more actionable if the user supplies a proxy URL without\n  a scheme. (Pull #2107)\n\n\n1.26.2 (2020-11-12)\n-------------------\n\n* Fixed an issue where ``wrap_socket`` and ``CERT_REQUIRED`` wouldn't\n  be imported properly on Python 2.7.8 and earlier (Pull #2052)\n\n\n1.26.1 (2020-11-11)\n-------------------\n\n* Fixed an issue where two ``User-Agent`` headers would be sent if a\n  ``User-Agent`` header key is passed as ``bytes`` (Pull #2047)\n\n\n1.26.0 (2020-11-10)\n-------------------\n\n* **NOTE: urllib3 v2.0 will drop support for Python 2**.\n  `Read more in the v2.0 Roadmap <https://urllib3.readthedocs.io/en/latest/v2-roadmap.html>`_.\n\n* Added support for HTTPS proxies contacting HTTPS servers (Pull #1923, Pull #1806)\n\n* Deprecated negotiating TLSv1 and TLSv1.1 by default. Users that\n  still wish to use TLS earlier than 1.2 without a deprecation warning\n  should opt-in explicitly by setting ``ssl_version=ssl.PROTOCOL_TLSv1_1`` (Pull #2002)\n  **Starting in urllib3 v2.0: Connections that receive a ``DeprecationWarning`` will fail**\n\n* Deprecated ``Retry`` options ``Retry.DEFAULT_METHOD_WHITELIST``, ``Retry.DEFAULT_REDIRECT_HEADERS_BLACKLIST``\n  and ``Retry(method_whitelist=...)`` in favor of ``Retry.DEFAULT_ALLOWED_METHODS``,\n  ``Retry.DEFAULT_REMOVE_HEADERS_ON_REDIRECT``, and ``Retry(allowed_methods=...)``\n  (Pull #2000) **Starting in urllib3 v2.0: Deprecated options will be removed**\n\n* Added default ``User-Agent`` header to every request (Pull #1750)\n\n* Added ``urllib3.util.SKIP_HEADER`` for skipping ``User-Agent``, ``Accept-Encoding``, \n  and ``Host`` headers from being automatically emitted with requests (Pull #2018)\n\n* Collapse ``transfer-encoding: chunked`` request data and framing into\n  the same ``socket.send()`` call (Pull #1906)\n\n* Send ``http/1.1`` ALPN identifier with every TLS handshake by default (Pull #1894)\n\n* Properly terminate SecureTransport connections when CA verification fails (Pull #1977)\n\n* Don't emit an ``SNIMissingWarning`` when passing ``server_hostname=None``\n  to SecureTransport (Pull #1903)\n\n* Disabled requesting TLSv1.2 session tickets as they weren't being used by urllib3 (Pull #1970)\n\n* Suppress ``BrokenPipeError`` when writing request body after the server\n  has closed the socket (Pull #1524)\n\n* Wrap ``ssl.SSLError`` that can be raised from reading a socket (e.g. \"bad MAC\")\n  into an ``urllib3.exceptions.SSLError`` (Pull #1939)\n\n\n1.25.11 (2020-10-19)\n--------------------\n\n* Fix retry backoff time parsed from ``Retry-After`` header when given\n  in the HTTP date format. The HTTP date was parsed as the local timezone\n  rather than accounting for the timezone in the HTTP date (typically\n  UTC) (Pull #1932, Pull #1935, Pull #1938, Pull #1949)\n\n* Fix issue where an error would be raised when the ``SSLKEYLOGFILE``\n  environment variable was set to the empty string. Now ``SSLContext.keylog_file``\n  is not set in this situation (Pull #2016)\n\n\n1.25.10 (2020-07-22)\n--------------------\n\n* Added support for ``SSLKEYLOGFILE`` environment variable for\n  logging TLS session keys with use with programs like\n  Wireshark for decrypting captured web traffic (Pull #1867)\n\n* Fixed loading of SecureTransport libraries on macOS Big Sur\n  due to the new dynamic linker cache (Pull #1905)\n\n* Collapse chunked request bodies data and framing into one\n  call to ``send()`` to reduce the number of TCP packets by 2-4x (Pull #1906)\n\n* Don't insert ``None`` into ``ConnectionPool`` if the pool\n  was empty when requesting a connection (Pull #1866)\n\n* Avoid ``hasattr`` call in ``BrotliDecoder.decompress()`` (Pull #1858)\n\n\n1.25.9 (2020-04-16)\n-------------------\n\n* Added ``InvalidProxyConfigurationWarning`` which is raised when\n  erroneously specifying an HTTPS proxy URL. urllib3 doesn't currently\n  support connecting to HTTPS proxies but will soon be able to\n  and we would like users to migrate properly without much breakage.\n\n  See `this GitHub issue <https://github.com/urllib3/urllib3/issues/1850>`_\n  for more information on how to fix your proxy config. (Pull #1851)\n\n* Drain connection after ``PoolManager`` redirect (Pull #1817)\n\n* Ensure ``load_verify_locations`` raises ``SSLError`` for all backends (Pull #1812)\n\n* Rename ``VerifiedHTTPSConnection`` to ``HTTPSConnection`` (Pull #1805)\n\n* Allow the CA certificate data to be passed as a string (Pull #1804)\n\n* Raise ``ValueError`` if method contains control characters (Pull #1800)\n\n* Add ``__repr__`` to ``Timeout`` (Pull #1795)\n\n\n1.25.8 (2020-01-20)\n-------------------\n\n* Drop support for EOL Python 3.4 (Pull #1774)\n\n* Optimize _encode_invalid_chars (Pull #1787)\n\n\n1.25.7 (2019-11-11)\n-------------------\n\n* Preserve ``chunked`` parameter on retries (Pull #1715, Pull #1734)\n\n* Allow unset ``SERVER_SOFTWARE`` in App Engine (Pull #1704, Issue #1470)\n\n* Fix issue where URL fragment was sent within the request target. (Pull #1732)\n\n* Fix issue where an empty query section in a URL would fail to parse. (Pull #1732)\n\n* Remove TLS 1.3 support in SecureTransport due to Apple removing support (Pull #1703)\n\n\n1.25.6 (2019-09-24)\n-------------------\n\n* Fix issue where tilde (``~``) characters were incorrectly\n  percent-encoded in the path. (Pull #1692)\n\n\n1.25.5 (2019-09-19)\n-------------------\n\n* Add mitigation for BPO-37428 affecting Python <3.7.4 and OpenSSL 1.1.1+ which\n  caused certificate verification to be enabled when using ``cert_reqs=CERT_NONE``.\n  (Issue #1682)\n\n\n1.25.4 (2019-09-19)\n-------------------\n\n* Propagate Retry-After header settings to subsequent retries. (Pull #1607)\n\n* Fix edge case where Retry-After header was still respected even when\n  explicitly opted out of. (Pull #1607)\n\n* Remove dependency on ``rfc3986`` for URL parsing.\n\n* Fix issue where URLs containing invalid characters within ``Url.auth`` would\n  raise an exception instead of percent-encoding those characters.\n\n* Add support for ``HTTPResponse.auto_close = False`` which makes HTTP responses\n  work well with BufferedReaders and other ``io`` module features. (Pull #1652)\n\n* Percent-encode invalid characters in URL for ``HTTPConnectionPool.request()`` (Pull #1673)\n\n\n1.25.3 (2019-05-23)\n-------------------\n\n* Change ``HTTPSConnection`` to load system CA certificates\n  when ``ca_certs``, ``ca_cert_dir``, and ``ssl_context`` are\n  unspecified. (Pull #1608, Issue #1603)\n\n* Upgrade bundled rfc3986 to v1.3.2. (Pull #1609, Issue #1605)\n\n\n1.25.2 (2019-04-28)\n-------------------\n\n* Change ``is_ipaddress`` to not detect IPvFuture addresses. (Pull #1583)\n\n* Change ``parse_url`` to percent-encode invalid characters within the\n  path, query, and target components. (Pull #1586)\n\n\n1.25.1 (2019-04-24)\n-------------------\n\n* Add support for Google's ``Brotli`` package. (Pull #1572, Pull #1579)\n\n* Upgrade bundled rfc3986 to v1.3.1 (Pull #1578)\n\n\n1.25 (2019-04-22)\n-----------------\n\n* Require and validate certificates by default when using HTTPS (Pull #1507)\n\n* Upgraded ``urllib3.utils.parse_url()`` to be RFC 3986 compliant. (Pull #1487)\n\n* Added support for ``key_password`` for ``HTTPSConnectionPool`` to use\n  encrypted ``key_file`` without creating your own ``SSLContext`` object. (Pull #1489)\n\n* Add TLSv1.3 support to CPython, pyOpenSSL, and SecureTransport ``SSLContext``\n  implementations. (Pull #1496)\n\n* Switched the default multipart header encoder from RFC 2231 to HTML 5 working draft. (Issue #303, Pull #1492)\n\n* Fixed issue where OpenSSL would block if an encrypted client private key was\n  given and no password was given. Instead an ``SSLError`` is raised. (Pull #1489)\n\n* Added support for Brotli content encoding. It is enabled automatically if\n  ``brotlipy`` package is installed which can be requested with\n  ``urllib3[brotli]`` extra. (Pull #1532)\n\n* Drop ciphers using DSS key exchange from default TLS cipher suites.\n  Improve default ciphers when using SecureTransport. (Pull #1496)\n\n* Implemented a more efficient ``HTTPResponse.__iter__()`` method. (Issue #1483)\n\n1.24.3 (2019-05-01)\n-------------------\n\n* Apply fix for CVE-2019-9740. (Pull #1591)\n\n1.24.2 (2019-04-17)\n-------------------\n\n* Don't load system certificates by default when any other ``ca_certs``, ``ca_certs_dir`` or\n  ``ssl_context`` parameters are specified.\n\n* Remove Authorization header regardless of case when redirecting to cross-site. (Issue #1510)\n\n* Add support for IPv6 addresses in subjectAltName section of certificates. (Issue #1269)\n\n\n1.24.1 (2018-11-02)\n-------------------\n\n* Remove quadratic behavior within ``GzipDecoder.decompress()`` (Issue #1467)\n\n* Restored functionality of ``ciphers`` parameter for ``create_urllib3_context()``. (Issue #1462)\n\n\n1.24 (2018-10-16)\n-----------------\n\n* Allow key_server_hostname to be specified when initializing a PoolManager to allow custom SNI to be overridden. (Pull #1449)\n\n* Test against Python 3.7 on AppVeyor. (Pull #1453)\n\n* Early-out ipv6 checks when running on App Engine. (Pull #1450)\n\n* Change ambiguous description of backoff_factor (Pull #1436)\n\n* Add ability to handle multiple Content-Encodings (Issue #1441 and Pull #1442)\n\n* Skip DNS names that can't be idna-decoded when using pyOpenSSL (Issue #1405).\n\n* Add a server_hostname parameter to HTTPSConnection which allows for\n  overriding the SNI hostname sent in the handshake. (Pull #1397)\n\n* Drop support for EOL Python 2.6 (Pull #1429 and Pull #1430)\n\n* Fixed bug where responses with header Content-Type: message/* erroneously\n  raised HeaderParsingError, resulting in a warning being logged. (Pull #1439)\n\n* Move urllib3 to src/urllib3 (Pull #1409)\n\n\n1.23 (2018-06-04)\n-----------------\n\n* Allow providing a list of headers to strip from requests when redirecting\n  to a different host. Defaults to the ``Authorization`` header. Different\n  headers can be set via ``Retry.remove_headers_on_redirect``. (Issue #1316)\n\n* Fix ``util.selectors._fileobj_to_fd`` to accept ``long`` (Issue #1247).\n\n* Dropped Python 3.3 support. (Pull #1242)\n\n* Put the connection back in the pool when calling stream() or read_chunked() on\n  a chunked HEAD response. (Issue #1234)\n\n* Fixed pyOpenSSL-specific ssl client authentication issue when clients\n  attempted to auth via certificate + chain (Issue #1060)\n\n* Add the port to the connectionpool connect print (Pull #1251)\n\n* Don't use the ``uuid`` module to create multipart data boundaries. (Pull #1380)\n\n* ``read_chunked()`` on a closed response returns no chunks. (Issue #1088)\n\n* Add Python 2.6 support to ``contrib.securetransport`` (Pull #1359)\n\n* Added support for auth info in url for SOCKS proxy (Pull #1363)\n\n\n1.22 (2017-07-20)\n-----------------\n\n* Fixed missing brackets in ``HTTP CONNECT`` when connecting to IPv6 address via\n  IPv6 proxy. (Issue #1222)\n\n* Made the connection pool retry on ``SSLError``.  The original ``SSLError``\n  is available on ``MaxRetryError.reason``. (Issue #1112)\n\n* Drain and release connection before recursing on retry/redirect.  Fixes\n  deadlocks with a blocking connectionpool. (Issue #1167)\n\n* Fixed compatibility for cookiejar. (Issue #1229)\n\n* pyopenssl: Use vendored version of ``six``. (Issue #1231)\n\n\n1.21.1 (2017-05-02)\n-------------------\n\n* Fixed SecureTransport issue that would cause long delays in response body\n  delivery. (Pull #1154)\n\n* Fixed regression in 1.21 that threw exceptions when users passed the\n  ``socket_options`` flag to the ``PoolManager``.  (Issue #1165)\n\n* Fixed regression in 1.21 that threw exceptions when users passed the\n  ``assert_hostname`` or ``assert_fingerprint`` flag to the ``PoolManager``.\n  (Pull #1157)\n\n\n1.21 (2017-04-25)\n-----------------\n\n* Improved performance of certain selector system calls on Python 3.5 and\n  later. (Pull #1095)\n\n* Resolved issue where the PyOpenSSL backend would not wrap SysCallError\n  exceptions appropriately when sending data. (Pull #1125)\n\n* Selectors now detects a monkey-patched select module after import for modules\n  that patch the select module like eventlet, greenlet. (Pull #1128)\n\n* Reduced memory consumption when streaming zlib-compressed responses\n  (as opposed to raw deflate streams). (Pull #1129)\n\n* Connection pools now use the entire request context when constructing the\n  pool key. (Pull #1016)\n\n* ``PoolManager.connection_from_*`` methods now accept a new keyword argument,\n  ``pool_kwargs``, which are merged with the existing ``connection_pool_kw``.\n  (Pull #1016)\n\n* Add retry counter for ``status_forcelist``. (Issue #1147)\n\n* Added ``contrib`` module for using SecureTransport on macOS:\n  ``urllib3.contrib.securetransport``.  (Pull #1122)\n\n* urllib3 now only normalizes the case of ``http://`` and ``https://`` schemes:\n  for schemes it does not recognise, it assumes they are case-sensitive and\n  leaves them unchanged.\n  (Issue #1080)\n\n\n1.20 (2017-01-19)\n-----------------\n\n* Added support for waiting for I/O using selectors other than select,\n  improving urllib3's behaviour with large numbers of concurrent connections.\n  (Pull #1001)\n\n* Updated the date for the system clock check. (Issue #1005)\n\n* ConnectionPools now correctly consider hostnames to be case-insensitive.\n  (Issue #1032)\n\n* Outdated versions of PyOpenSSL now cause the PyOpenSSL contrib module\n  to fail when it is injected, rather than at first use. (Pull #1063)\n\n* Outdated versions of cryptography now cause the PyOpenSSL contrib module\n  to fail when it is injected, rather than at first use. (Issue #1044)\n\n* Automatically attempt to rewind a file-like body object when a request is\n  retried or redirected. (Pull #1039)\n\n* Fix some bugs that occur when modules incautiously patch the queue module.\n  (Pull #1061)\n\n* Prevent retries from occurring on read timeouts for which the request method\n  was not in the method whitelist. (Issue #1059)\n\n* Changed the PyOpenSSL contrib module to lazily load idna to avoid\n  unnecessarily bloating the memory of programs that don't need it. (Pull\n  #1076)\n\n* Add support for IPv6 literals with zone identifiers. (Pull #1013)\n\n* Added support for socks5h:// and socks4a:// schemes when working with SOCKS\n  proxies, and controlled remote DNS appropriately. (Issue #1035)\n\n\n1.19.1 (2016-11-16)\n-------------------\n\n* Fixed AppEngine import that didn't function on Python 3.5. (Pull #1025)\n\n\n1.19 (2016-11-03)\n-----------------\n\n* urllib3 now respects Retry-After headers on 413, 429, and 503 responses when\n  using the default retry logic. (Pull #955)\n\n* Remove markers from setup.py to assist ancient setuptools versions. (Issue\n  #986)\n\n* Disallow superscripts and other integerish things in URL ports. (Issue #989)\n\n* Allow urllib3's HTTPResponse.stream() method to continue to work with\n  non-httplib underlying FPs. (Pull #990)\n\n* Empty filenames in multipart headers are now emitted as such, rather than\n  being suppressed. (Issue #1015)\n\n* Prefer user-supplied Host headers on chunked uploads. (Issue #1009)\n\n\n1.18.1 (2016-10-27)\n-------------------\n\n* CVE-2016-9015. Users who are using urllib3 version 1.17 or 1.18 along with\n  PyOpenSSL injection and OpenSSL 1.1.0 *must* upgrade to this version. This\n  release fixes a vulnerability whereby urllib3 in the above configuration\n  would silently fail to validate TLS certificates due to erroneously setting\n  invalid flags in OpenSSL's ``SSL_CTX_set_verify`` function. These erroneous\n  flags do not cause a problem in OpenSSL versions before 1.1.0, which\n  interprets the presence of any flag as requesting certificate validation.\n\n  There is no PR for this patch, as it was prepared for simultaneous disclosure\n  and release. The master branch received the same fix in Pull #1010.\n\n\n1.18 (2016-09-26)\n-----------------\n\n* Fixed incorrect message for IncompleteRead exception. (Pull #973)\n\n* Accept ``iPAddress`` subject alternative name fields in TLS certificates.\n  (Issue #258)\n\n* Fixed consistency of ``HTTPResponse.closed`` between Python 2 and 3.\n  (Issue #977)\n\n* Fixed handling of wildcard certificates when using PyOpenSSL. (Issue #979)\n\n\n1.17 (2016-09-06)\n-----------------\n\n* Accept ``SSLContext`` objects for use in SSL/TLS negotiation. (Issue #835)\n\n* ConnectionPool debug log now includes scheme, host, and port. (Issue #897)\n\n* Substantially refactored documentation. (Issue #887)\n\n* Used URLFetch default timeout on AppEngine, rather than hardcoding our own.\n  (Issue #858)\n\n* Normalize the scheme and host in the URL parser (Issue #833)\n\n* ``HTTPResponse`` contains the last ``Retry`` object, which now also\n  contains retries history. (Issue #848)\n\n* Timeout can no longer be set as boolean, and must be greater than zero.\n  (Pull #924)\n\n* Removed pyasn1 and ndg-httpsclient from dependencies used for PyOpenSSL. We\n  now use cryptography and idna, both of which are already dependencies of\n  PyOpenSSL. (Pull #930)\n\n* Fixed infinite loop in ``stream`` when amt=None. (Issue #928)\n\n* Try to use the operating system's certificates when we are using an\n  ``SSLContext``. (Pull #941)\n\n* Updated cipher suite list to allow ChaCha20+Poly1305. AES-GCM is preferred to\n  ChaCha20, but ChaCha20 is then preferred to everything else. (Pull #947)\n\n* Updated cipher suite list to remove 3DES-based cipher suites. (Pull #958)\n\n* Removed the cipher suite fallback to allow HIGH ciphers. (Pull #958)\n\n* Implemented ``length_remaining`` to determine remaining content\n  to be read. (Pull #949)\n\n* Implemented ``enforce_content_length`` to enable exceptions when\n  incomplete data chunks are received. (Pull #949)\n\n* Dropped connection start, dropped connection reset, redirect, forced retry,\n  and new HTTPS connection log levels to DEBUG, from INFO. (Pull #967)\n\n\n1.16 (2016-06-11)\n-----------------\n\n* Disable IPv6 DNS when IPv6 connections are not possible. (Issue #840)\n\n* Provide ``key_fn_by_scheme`` pool keying mechanism that can be\n  overridden. (Issue #830)\n\n* Normalize scheme and host to lowercase for pool keys, and include\n  ``source_address``. (Issue #830)\n\n* Cleaner exception chain in Python 3 for ``_make_request``.\n  (Issue #861)\n\n* Fixed installing ``urllib3[socks]`` extra. (Issue #864)\n\n* Fixed signature of ``ConnectionPool.close`` so it can actually safely be\n  called by subclasses. (Issue #873)\n\n* Retain ``release_conn`` state across retries. (Issues #651, #866)\n\n* Add customizable ``HTTPConnectionPool.ResponseCls``, which defaults to\n  ``HTTPResponse`` but can be replaced with a subclass. (Issue #879)\n\n\n1.15.1 (2016-04-11)\n-------------------\n\n* Fix packaging to include backports module. (Issue #841)\n\n\n1.15 (2016-04-06)\n-----------------\n\n* Added Retry(raise_on_status=False). (Issue #720)\n\n* Always use setuptools, no more distutils fallback. (Issue #785)\n\n* Dropped support for Python 3.2. (Issue #786)\n\n* Chunked transfer encoding when requesting with ``chunked=True``.\n  (Issue #790)\n\n* Fixed regression with IPv6 port parsing. (Issue #801)\n\n* Append SNIMissingWarning messages to allow users to specify it in\n  the PYTHONWARNINGS environment variable. (Issue #816)\n\n* Handle unicode headers in Py2. (Issue #818)\n\n* Log certificate when there is a hostname mismatch. (Issue #820)\n\n* Preserve order of request/response headers. (Issue #821)\n\n\n1.14 (2015-12-29)\n-----------------\n\n* contrib: SOCKS proxy support! (Issue #762)\n\n* Fixed AppEngine handling of transfer-encoding header and bug\n  in Timeout defaults checking. (Issue #763)\n\n\n1.13.1 (2015-12-18)\n-------------------\n\n* Fixed regression in IPv6 + SSL for match_hostname. (Issue #761)\n\n\n1.13 (2015-12-14)\n-----------------\n\n* Fixed ``pip install urllib3[secure]`` on modern pip. (Issue #706)\n\n* pyopenssl: Fixed SSL3_WRITE_PENDING error. (Issue #717)\n\n* pyopenssl: Support for TLSv1.1 and TLSv1.2. (Issue #696)\n\n* Close connections more defensively on exception. (Issue #734)\n\n* Adjusted ``read_chunked`` to handle gzipped, chunk-encoded bodies without\n  repeatedly flushing the decoder, to function better on Jython. (Issue #743)\n\n* Accept ``ca_cert_dir`` for SSL-related PoolManager configuration. (Issue #758)\n\n\n1.12 (2015-09-03)\n-----------------\n\n* Rely on ``six`` for importing ``httplib`` to work around\n  conflicts with other Python 3 shims. (Issue #688)\n\n* Add support for directories of certificate authorities, as supported by\n  OpenSSL. (Issue #701)\n\n* New exception: ``NewConnectionError``, raised when we fail to establish\n  a new connection, usually ``ECONNREFUSED`` socket error.\n\n\n1.11 (2015-07-21)\n-----------------\n\n* When ``ca_certs`` is given, ``cert_reqs`` defaults to\n  ``'CERT_REQUIRED'``. (Issue #650)\n\n* ``pip install urllib3[secure]`` will install Certifi and\n  PyOpenSSL as dependencies. (Issue #678)\n\n* Made ``HTTPHeaderDict`` usable as a ``headers`` input value\n  (Issues #632, #679)\n\n* Added `urllib3.contrib.appengine <https://urllib3.readthedocs.io/en/latest/contrib.html#google-app-engine>`_\n  which has an ``AppEngineManager`` for using ``URLFetch`` in a\n  Google AppEngine environment. (Issue #664)\n\n* Dev: Added test suite for AppEngine. (Issue #631)\n\n* Fix performance regression when using PyOpenSSL. (Issue #626)\n\n* Passing incorrect scheme (e.g. ``foo://``) will raise\n  ``ValueError`` instead of ``AssertionError`` (backwards\n  compatible for now, but please migrate). (Issue #640)\n\n* Fix pools not getting replenished when an error occurs during a\n  request using ``release_conn=False``. (Issue #644)\n\n* Fix pool-default headers not applying for url-encoded requests\n  like GET. (Issue #657)\n\n* log.warning in Python 3 when headers are skipped due to parsing\n  errors. (Issue #642)\n\n* Close and discard connections if an error occurs during read.\n  (Issue #660)\n\n* Fix host parsing for IPv6 proxies. (Issue #668)\n\n* Separate warning type SubjectAltNameWarning, now issued once\n  per host. (Issue #671)\n\n* Fix ``httplib.IncompleteRead`` not getting converted to\n  ``ProtocolError`` when using ``HTTPResponse.stream()``\n  (Issue #674)\n\n1.10.4 (2015-05-03)\n-------------------\n\n* Migrate tests to Tornado 4. (Issue #594)\n\n* Append default warning configuration rather than overwrite.\n  (Issue #603)\n\n* Fix streaming decoding regression. (Issue #595)\n\n* Fix chunked requests losing state across keep-alive connections.\n  (Issue #599)\n\n* Fix hanging when chunked HEAD response has no body. (Issue #605)\n\n\n1.10.3 (2015-04-21)\n-------------------\n\n* Emit ``InsecurePlatformWarning`` when SSLContext object is missing.\n  (Issue #558)\n\n* Fix regression of duplicate header keys being discarded.\n  (Issue #563)\n\n* ``Response.stream()`` returns a generator for chunked responses.\n  (Issue #560)\n\n* Set upper-bound timeout when waiting for a socket in PyOpenSSL.\n  (Issue #585)\n\n* Work on platforms without `ssl` module for plain HTTP requests.\n  (Issue #587)\n\n* Stop relying on the stdlib's default cipher list. (Issue #588)\n\n\n1.10.2 (2015-02-25)\n-------------------\n\n* Fix file descriptor leakage on retries. (Issue #548)\n\n* Removed RC4 from default cipher list. (Issue #551)\n\n* Header performance improvements. (Issue #544)\n\n* Fix PoolManager not obeying redirect retry settings. (Issue #553)\n\n\n1.10.1 (2015-02-10)\n-------------------\n\n* Pools can be used as context managers. (Issue #545)\n\n* Don't re-use connections which experienced an SSLError. (Issue #529)\n\n* Don't fail when gzip decoding an empty stream. (Issue #535)\n\n* Add sha256 support for fingerprint verification. (Issue #540)\n\n* Fixed handling of header values containing commas. (Issue #533)\n\n\n1.10 (2014-12-14)\n-----------------\n\n* Disabled SSLv3. (Issue #473)\n\n* Add ``Url.url`` property to return the composed url string. (Issue #394)\n\n* Fixed PyOpenSSL + gevent ``WantWriteError``. (Issue #412)\n\n* ``MaxRetryError.reason`` will always be an exception, not string.\n  (Issue #481)\n\n* Fixed SSL-related timeouts not being detected as timeouts. (Issue #492)\n\n* Py3: Use ``ssl.create_default_context()`` when available. (Issue #473)\n\n* Emit ``InsecureRequestWarning`` for *every* insecure HTTPS request.\n  (Issue #496)\n\n* Emit ``SecurityWarning`` when certificate has no ``subjectAltName``.\n  (Issue #499)\n\n* Close and discard sockets which experienced SSL-related errors.\n  (Issue #501)\n\n* Handle ``body`` param in ``.request(...)``. (Issue #513)\n\n* Respect timeout with HTTPS proxy. (Issue #505)\n\n* PyOpenSSL: Handle ZeroReturnError exception. (Issue #520)\n\n\n1.9.1 (2014-09-13)\n------------------\n\n* Apply socket arguments before binding. (Issue #427)\n\n* More careful checks if fp-like object is closed. (Issue #435)\n\n* Fixed packaging issues of some development-related files not\n  getting included. (Issue #440)\n\n* Allow performing *only* fingerprint verification. (Issue #444)\n\n* Emit ``SecurityWarning`` if system clock is waaay off. (Issue #445)\n\n* Fixed PyOpenSSL compatibility with PyPy. (Issue #450)\n\n* Fixed ``BrokenPipeError`` and ``ConnectionError`` handling in Py3.\n  (Issue #443)\n\n\n\n1.9 (2014-07-04)\n----------------\n\n* Shuffled around development-related files. If you're maintaining a distro\n  package of urllib3, you may need to tweak things. (Issue #415)\n\n* Unverified HTTPS requests will trigger a warning on the first request. See\n  our new `security documentation\n  <https://urllib3.readthedocs.io/en/latest/security.html>`_ for details.\n  (Issue #426)\n\n* New retry logic and ``urllib3.util.retry.Retry`` configuration object.\n  (Issue #326)\n\n* All raised exceptions should now wrapped in a\n  ``urllib3.exceptions.HTTPException``-extending exception. (Issue #326)\n\n* All errors during a retry-enabled request should be wrapped in\n  ``urllib3.exceptions.MaxRetryError``, including timeout-related exceptions\n  which were previously exempt. Underlying error is accessible from the\n  ``.reason`` property. (Issue #326)\n\n* ``urllib3.exceptions.ConnectionError`` renamed to\n  ``urllib3.exceptions.ProtocolError``. (Issue #326)\n\n* Errors during response read (such as IncompleteRead) are now wrapped in\n  ``urllib3.exceptions.ProtocolError``. (Issue #418)\n\n* Requesting an empty host will raise ``urllib3.exceptions.LocationValueError``.\n  (Issue #417)\n\n* Catch read timeouts over SSL connections as\n  ``urllib3.exceptions.ReadTimeoutError``. (Issue #419)\n\n* Apply socket arguments before connecting. (Issue #427)\n\n\n1.8.3 (2014-06-23)\n------------------\n\n* Fix TLS verification when using a proxy in Python 3.4.1. (Issue #385)\n\n* Add ``disable_cache`` option to ``urllib3.util.make_headers``. (Issue #393)\n\n* Wrap ``socket.timeout`` exception with\n  ``urllib3.exceptions.ReadTimeoutError``. (Issue #399)\n\n* Fixed proxy-related bug where connections were being reused incorrectly.\n  (Issues #366, #369)\n\n* Added ``socket_options`` keyword parameter which allows to define\n  ``setsockopt`` configuration of new sockets. (Issue #397)\n\n* Removed ``HTTPConnection.tcp_nodelay`` in favor of\n  ``HTTPConnection.default_socket_options``. (Issue #397)\n\n* Fixed ``TypeError`` bug in Python 2.6.4. (Issue #411)\n\n\n1.8.2 (2014-04-17)\n------------------\n\n* Fix ``urllib3.util`` not being included in the package.\n\n\n1.8.1 (2014-04-17)\n------------------\n\n* Fix AppEngine bug of HTTPS requests going out as HTTP. (Issue #356)\n\n* Don't install ``dummyserver`` into ``site-packages`` as it's only needed\n  for the test suite. (Issue #362)\n\n* Added support for specifying ``source_address``. (Issue #352)\n\n\n1.8 (2014-03-04)\n----------------\n\n* Improved url parsing in ``urllib3.util.parse_url`` (properly parse '@' in\n  username, and blank ports like 'hostname:').\n\n* New ``urllib3.connection`` module which contains all the HTTPConnection\n  objects.\n\n* Several ``urllib3.util.Timeout``-related fixes. Also changed constructor\n  signature to a more sensible order. [Backwards incompatible]\n  (Issues #252, #262, #263)\n\n* Use ``backports.ssl_match_hostname`` if it's installed. (Issue #274)\n\n* Added ``.tell()`` method to ``urllib3.response.HTTPResponse`` which\n  returns the number of bytes read so far. (Issue #277)\n\n* Support for platforms without threading. (Issue #289)\n\n* Expand default-port comparison in ``HTTPConnectionPool.is_same_host``\n  to allow a pool with no specified port to be considered equal to to an\n  HTTP/HTTPS url with port 80/443 explicitly provided. (Issue #305)\n\n* Improved default SSL/TLS settings to avoid vulnerabilities.\n  (Issue #309)\n\n* Fixed ``urllib3.poolmanager.ProxyManager`` not retrying on connect errors.\n  (Issue #310)\n\n* Disable Nagle's Algorithm on the socket for non-proxies. A subset of requests\n  will send the entire HTTP request ~200 milliseconds faster; however, some of\n  the resulting TCP packets will be smaller. (Issue #254)\n\n* Increased maximum number of SubjectAltNames in ``urllib3.contrib.pyopenssl``\n  from the default 64 to 1024 in a single certificate. (Issue #318)\n\n* Headers are now passed and stored as a custom\n  ``urllib3.collections_.HTTPHeaderDict`` object rather than a plain ``dict``.\n  (Issue #329, #333)\n\n* Headers no longer lose their case on Python 3. (Issue #236)\n\n* ``urllib3.contrib.pyopenssl`` now uses the operating system's default CA\n  certificates on inject. (Issue #332)\n\n* Requests with ``retries=False`` will immediately raise any exceptions without\n  wrapping them in ``MaxRetryError``. (Issue #348)\n\n* Fixed open socket leak with SSL-related failures. (Issue #344, #348)\n\n\n1.7.1 (2013-09-25)\n------------------\n\n* Added granular timeout support with new ``urllib3.util.Timeout`` class.\n  (Issue #231)\n\n* Fixed Python 3.4 support. (Issue #238)\n\n\n1.7 (2013-08-14)\n----------------\n\n* More exceptions are now pickle-able, with tests. (Issue #174)\n\n* Fixed redirecting with relative URLs in Location header. (Issue #178)\n\n* Support for relative urls in ``Location: ...`` header. (Issue #179)\n\n* ``urllib3.response.HTTPResponse`` now inherits from ``io.IOBase`` for bonus\n  file-like functionality. (Issue #187)\n\n* Passing ``assert_hostname=False`` when creating a HTTPSConnectionPool will\n  skip hostname verification for SSL connections. (Issue #194)\n\n* New method ``urllib3.response.HTTPResponse.stream(...)`` which acts as a\n  generator wrapped around ``.read(...)``. (Issue #198)\n\n* IPv6 url parsing enforces brackets around the hostname. (Issue #199)\n\n* Fixed thread race condition in\n  ``urllib3.poolmanager.PoolManager.connection_from_host(...)`` (Issue #204)\n\n* ``ProxyManager`` requests now include non-default port in ``Host: ...``\n  header. (Issue #217)\n\n* Added HTTPS proxy support in ``ProxyManager``. (Issue #170 #139)\n\n* New ``RequestField`` object can be passed to the ``fields=...`` param which\n  can specify headers. (Issue #220)\n\n* Raise ``urllib3.exceptions.ProxyError`` when connecting to proxy fails.\n  (Issue #221)\n\n* Use international headers when posting file names. (Issue #119)\n\n* Improved IPv6 support. (Issue #203)\n\n\n1.6 (2013-04-25)\n----------------\n\n* Contrib: Optional SNI support for Py2 using PyOpenSSL. (Issue #156)\n\n* ``ProxyManager`` automatically adds ``Host: ...`` header if not given.\n\n* Improved SSL-related code. ``cert_req`` now optionally takes a string like\n  \"REQUIRED\" or \"NONE\". Same with ``ssl_version`` takes strings like \"SSLv23\"\n  The string values reflect the suffix of the respective constant variable.\n  (Issue #130)\n\n* Vendored ``socksipy`` now based on Anorov's fork which handles unexpectedly\n  closed proxy connections and larger read buffers. (Issue #135)\n\n* Ensure the connection is closed if no data is received, fixes connection leak\n  on some platforms. (Issue #133)\n\n* Added SNI support for SSL/TLS connections on Py32+. (Issue #89)\n\n* Tests fixed to be compatible with Py26 again. (Issue #125)\n\n* Added ability to choose SSL version by passing an ``ssl.PROTOCOL_*`` constant\n  to the ``ssl_version`` parameter of ``HTTPSConnectionPool``. (Issue #109)\n\n* Allow an explicit content type to be specified when encoding file fields.\n  (Issue #126)\n\n* Exceptions are now pickleable, with tests. (Issue #101)\n\n* Fixed default headers not getting passed in some cases. (Issue #99)\n\n* Treat \"content-encoding\" header value as case-insensitive, per RFC 2616\n  Section 3.5. (Issue #110)\n\n* \"Connection Refused\" SocketErrors will get retried rather than raised.\n  (Issue #92)\n\n* Updated vendored ``six``, no longer overrides the global ``six`` module\n  namespace. (Issue #113)\n\n* ``urllib3.exceptions.MaxRetryError`` contains a ``reason`` property holding\n  the exception that prompted the final retry. If ``reason is None`` then it\n  was due to a redirect. (Issue #92, #114)\n\n* Fixed ``PoolManager.urlopen()`` from not redirecting more than once.\n  (Issue #149)\n\n* Don't assume ``Content-Type: text/plain`` for multi-part encoding parameters\n  that are not files. (Issue #111)\n\n* Pass `strict` param down to ``httplib.HTTPConnection``. (Issue #122)\n\n* Added mechanism to verify SSL certificates by fingerprint (md5, sha1) or\n  against an arbitrary hostname (when connecting by IP or for misconfigured\n  servers). (Issue #140)\n\n* Streaming decompression support. (Issue #159)\n\n\n1.5 (2012-08-02)\n----------------\n\n* Added ``urllib3.add_stderr_logger()`` for quickly enabling STDERR debug\n  logging in urllib3.\n\n* Native full URL parsing (including auth, path, query, fragment) available in\n  ``urllib3.util.parse_url(url)``.\n\n* Built-in redirect will switch method to 'GET' if status code is 303.\n  (Issue #11)\n\n* ``urllib3.PoolManager`` strips the scheme and host before sending the request\n  uri. (Issue #8)\n\n* New ``urllib3.exceptions.DecodeError`` exception for when automatic decoding,\n  based on the Content-Type header, fails.\n\n* Fixed bug with pool depletion and leaking connections (Issue #76). Added\n  explicit connection closing on pool eviction. Added\n  ``urllib3.PoolManager.clear()``.\n\n* 99% -> 100% unit test coverage.\n\n\n1.4 (2012-06-16)\n----------------\n\n* Minor AppEngine-related fixes.\n\n* Switched from ``mimetools.choose_boundary`` to ``uuid.uuid4()``.\n\n* Improved url parsing. (Issue #73)\n\n* IPv6 url support. (Issue #72)\n\n\n1.3 (2012-03-25)\n----------------\n\n* Removed pre-1.0 deprecated API.\n\n* Refactored helpers into a ``urllib3.util`` submodule.\n\n* Fixed multipart encoding to support list-of-tuples for keys with multiple\n  values. (Issue #48)\n\n* Fixed multiple Set-Cookie headers in response not getting merged properly in\n  Python 3. (Issue #53)\n\n* AppEngine support with Py27. (Issue #61)\n\n* Minor ``encode_multipart_formdata`` fixes related to Python 3 strings vs\n  bytes.\n\n\n1.2.2 (2012-02-06)\n------------------\n\n* Fixed packaging bug of not shipping ``test-requirements.txt``. (Issue #47)\n\n\n1.2.1 (2012-02-05)\n------------------\n\n* Fixed another bug related to when ``ssl`` module is not available. (Issue #41)\n\n* Location parsing errors now raise ``urllib3.exceptions.LocationParseError``\n  which inherits from ``ValueError``.\n\n\n1.2 (2012-01-29)\n----------------\n\n* Added Python 3 support (tested on 3.2.2)\n\n* Dropped Python 2.5 support (tested on 2.6.7, 2.7.2)\n\n* Use ``select.poll`` instead of ``select.select`` for platforms that support\n  it.\n\n* Use ``Queue.LifoQueue`` instead of ``Queue.Queue`` for more aggressive\n  connection reusing. Configurable by overriding ``ConnectionPool.QueueCls``.\n\n* Fixed ``ImportError`` during install when ``ssl`` module is not available.\n  (Issue #41)\n\n* Fixed ``PoolManager`` redirects between schemes (such as HTTP -> HTTPS) not\n  completing properly. (Issue #28, uncovered by Issue #10 in v1.1)\n\n* Ported ``dummyserver`` to use ``tornado`` instead of ``webob`` +\n  ``eventlet``. Removed extraneous unsupported dummyserver testing backends.\n  Added socket-level tests.\n\n* More tests. Achievement Unlocked: 99% Coverage.\n\n\n1.1 (2012-01-07)\n----------------\n\n* Refactored ``dummyserver`` to its own root namespace module (used for\n  testing).\n\n* Added hostname verification for ``VerifiedHTTPSConnection`` by vendoring in\n  Py32's ``ssl_match_hostname``. (Issue #25)\n\n* Fixed cross-host HTTP redirects when using ``PoolManager``. (Issue #10)\n\n* Fixed ``decode_content`` being ignored when set through ``urlopen``. (Issue\n  #27)\n\n* Fixed timeout-related bugs. (Issues #17, #23)\n\n\n1.0.2 (2011-11-04)\n------------------\n\n* Fixed typo in ``VerifiedHTTPSConnection`` which would only present as a bug if\n  you're using the object manually. (Thanks pyos)\n\n* Made RecentlyUsedContainer (and consequently PoolManager) more thread-safe by\n  wrapping the access log in a mutex. (Thanks @christer)\n\n* Made RecentlyUsedContainer more dict-like (corrected ``__delitem__`` and\n  ``__getitem__`` behaviour), with tests. Shouldn't affect core urllib3 code.\n\n\n1.0.1 (2011-10-10)\n------------------\n\n* Fixed a bug where the same connection would get returned into the pool twice,\n  causing extraneous \"HttpConnectionPool is full\" log warnings.\n\n\n1.0 (2011-10-08)\n----------------\n\n* Added ``PoolManager`` with LRU expiration of connections (tested and\n  documented).\n* Added ``ProxyManager`` (needs tests, docs, and confirmation that it works\n  with HTTPS proxies).\n* Added optional partial-read support for responses when\n  ``preload_content=False``. You can now make requests and just read the headers\n  without loading the content.\n* Made response decoding optional (default on, same as before).\n* Added optional explicit boundary string for ``encode_multipart_formdata``.\n* Convenience request methods are now inherited from ``RequestMethods``. Old\n  helpers like ``get_url`` and ``post_url`` should be abandoned in favour of\n  the new ``request(method, url, ...)``.\n* Refactored code to be even more decoupled, reusable, and extendable.\n* License header added to ``.py`` files.\n* Embiggened the documentation: Lots of Sphinx-friendly docstrings in the code\n  and docs in ``docs/`` and on https://urllib3.readthedocs.io/.\n* Embettered all the things!\n* Started writing this file.\n\n\n0.4.1 (2011-07-17)\n------------------\n\n* Minor bug fixes, code cleanup.\n\n\n0.4 (2011-03-01)\n----------------\n\n* Better unicode support.\n* Added ``VerifiedHTTPSConnection``.\n* Added ``NTLMConnectionPool`` in contrib.\n* Minor improvements.\n\n\n0.3.1 (2010-07-13)\n------------------\n\n* Added ``assert_host_name`` optional parameter. Now compatible with proxies.\n\n\n0.3 (2009-12-10)\n----------------\n\n* Added HTTPS support.\n* Minor bug fixes.\n* Refactored, broken backwards compatibility with 0.2.\n* API to be treated as stable from this version forward.\n\n\n0.2 (2008-11-17)\n----------------\n\n* Added unit tests.\n* Bug fixes.\n\n\n0.1 (2008-11-16)\n----------------\n\n* First release.\n\n\n",
          "name": "urllib3",
          "author": [
            {
              "type": "Person",
              "name": "Andrey Petrov",
              "email": [
                "andrey.petrov@shazow.net"
              ],
              "familyName": [
                "Petrov"
              ],
              "givenName": [
                "Andrey"
              ]
            }
          ],
          "keywords": "urllib httplib threadsafe filepost http https ssl pooling",
          "license": "MIT",
          "codeRepository": "https://pypi.org/project/urllib3/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python",
          "applicationCategory": [
            "Internet",
            "Software Development"
          ],
          "applicationSubCategory": [
            "WWW/HTTP",
            "Libraries"
          ]
        },
        {
          "type": "SoftwarePackage",
          "description": "|pypi_downloads| |codecov| |license|\n\n============\nIntroduction\n============\n\nThis library is mainly for CLI programs that carefully produce output for\nTerminals, or make pretend to be an emulator.\n\n**Problem Statement**: The printable length of *most* strings are equal to the\nnumber of cells they occupy on the screen ``1 charater : 1 cell``.  However,\nthere are categories of characters that *occupy 2 cells* (full-wide), and\nothers that *occupy 0* cells (zero-width).\n\n**Solution**: POSIX.1-2001 and POSIX.1-2008 conforming systems provide\n`wcwidth(3)`_ and `wcswidth(3)`_ C functions of which this python module's\nfunctions precisely copy.  *These functions return the number of cells a\nunicode string is expected to occupy.*\n\nInstallation\n------------\n\nThe stable version of this package is maintained on pypi, install using pip::\n\n    pip install wcwidth\n\nExample\n-------\n\n**Problem**: given the following phrase (Japanese),\n\n   >>>  text = u'コンニチハ'\n\nPython **incorrectly** uses the *string length* of 5 codepoints rather than the\n*printible length* of 10 cells, so that when using the `rjust` function, the\noutput length is wrong::\n\n    >>> print(len('コンニチハ'))\n    5\n\n    >>> print('コンニチハ'.rjust(20, '_'))\n    _____コンニチハ\n\nBy defining our own \"rjust\" function that uses wcwidth, we can correct this::\n\n   >>> def wc_rjust(text, length, padding=' '):\n   ...    from wcwidth import wcswidth\n   ...    return padding * max(0, (length - wcswidth(text))) + text\n   ...\n\nOur **Solution** uses wcswidth to determine the string length correctly::\n\n   >>> from wcwidth import wcswidth\n   >>> print(wcswidth('コンニチハ'))\n   10\n\n   >>> print(wc_rjust('コンニチハ', 20, '_'))\n   __________コンニチハ\n\n\nChoosing a Version\n------------------\n\nExport an environment variable, ``UNICODE_VERSION``. This should be done by\n*terminal emulators* or those developers experimenting with authoring one of\ntheir own, from shell::\n\n   $ export UNICODE_VERSION=13.0\n\nIf unspecified, the latest version is used. If your Terminal Emulator does not\nexport this variable, you can use the `jquast/ucs-detect`_ utility to\nautomatically detect and export it to your shell.\n\nwcwidth, wcswidth\n-----------------\nUse function ``wcwidth()`` to determine the length of a *single unicode\ncharacter*, and ``wcswidth()`` to determine the length of many, a *string\nof unicode characters*.\n\nBriefly, return values of function ``wcwidth()`` are:\n\n``-1``\n  Indeterminate (not printable).\n\n``0``\n  Does not advance the cursor, such as NULL or Combining.\n\n``2``\n  Characters of category East Asian Wide (W) or East Asian\n  Full-width (F) which are displayed using two terminal cells.\n\n``1``\n  All others.\n\nFunction ``wcswidth()`` simply returns the sum of all values for each character\nalong a string, or ``-1`` when it occurs anywhere along a string.\n\nFull API Documentation at http://wcwidth.readthedocs.org\n\n==========\nDeveloping\n==========\n\nInstall wcwidth in editable mode::\n\n   pip install -e.\n\nExecute unit tests using tox_::\n\n   tox\n\nRegenerate python code tables from latest Unicode Specification data files::\n\n   tox -eupdate\n\nSupplementary tools for browsing and testing terminals for wide unicode\ncharacters are found in the `bin/`_ of this project's source code.  Just ensure\nto first ``pip install -erequirements-develop.txt`` from this projects main\nfolder. For example, an interactive browser for testing::\n\n  ./bin/wcwidth-browser.py\n\nUses\n----\n\nThis library is used in:\n\n- `jquast/blessed`_: a thin, practical wrapper around terminal capabilities in\n  Python.\n\n- `jonathanslenders/python-prompt-toolkit`_: a Library for building powerful\n  interactive command lines in Python.\n\n- `dbcli/pgcli`_: Postgres CLI with autocompletion and syntax highlighting.\n\n- `thomasballinger/curtsies`_: a Curses-like terminal wrapper with a display\n  based on compositing 2d arrays of text.\n\n- `selectel/pyte`_: Simple VTXXX-compatible linux terminal emulator.\n\n- `astanin/python-tabulate`_: Pretty-print tabular data in Python, a library\n  and a command-line utility.\n\n- `LuminosoInsight/python-ftfy`_: Fixes mojibake and other glitches in Unicode\n  text.\n\n- `nbedos/termtosvg`_: Terminal recorder that renders sessions as SVG\n  animations.\n\n- `peterbrittain/asciimatics`_: Package to help people create full-screen text\n  UIs.\n\nOther Languages\n---------------\n\n- `timoxley/wcwidth`_: JavaScript\n- `janlelis/unicode-display_width`_: Ruby\n- `alecrabbit/php-wcwidth`_: PHP\n- `Text::CharWidth`_: Perl\n- `bluebear94/Terminal-WCWidth`: Perl 6\n- `mattn/go-runewidth`_: Go\n- `emugel/wcwidth`_: Haxe\n- `aperezdc/lua-wcwidth`: Lua\n- `joachimschmidt557/zig-wcwidth`: Zig\n- `fumiyas/wcwidth-cjk`: `LD_PRELOAD` override\n- `joshuarubin/wcwidth9`: Unicode version 9 in C\n\nHistory\n-------\n\n0.2.0 *2020-06-01*\n  * **Enhancement**: Unicode version may be selected by exporting the\n    Environment variable ``UNICODE_VERSION``, such as ``13.0``, or ``6.3.0``.\n    See the `jquast/ucs-detect`_ CLI utility for automatic detection.\n  * **Enhancement**:\n    API Documentation is published to readthedocs.org.\n  * **Updated** tables for *all* Unicode Specifications with files\n    published in a programmatically consumable format, versions 4.1.0\n    through 13.0\n    that are published\n    , versions\n\n0.1.9 *2020-03-22*\n  * **Performance** optimization by `Avram Lubkin`_, `PR #35`_.\n  * **Updated** tables to Unicode Specification 13.0.0.\n\n0.1.8 *2020-01-01*\n  * **Updated** tables to Unicode Specification 12.0.0. (`PR #30`_).\n\n0.1.7 *2016-07-01*\n  * **Updated** tables to Unicode Specification 9.0.0. (`PR #18`_).\n\n0.1.6 *2016-01-08 Production/Stable*\n  * ``LICENSE`` file now included with distribution.\n\n0.1.5 *2015-09-13 Alpha*\n  * **Bugfix**:\n    Resolution of \"combining_ character width\" issue, most especially\n    those that previously returned -1 now often (correctly) return 0.\n    resolved by `Philip Craig`_ via `PR #11`_.\n  * **Deprecated**:\n    The module path ``wcwidth.table_comb`` is no longer available,\n    it has been superseded by module path ``wcwidth.table_zero``.\n\n0.1.4 *2014-11-20 Pre-Alpha*\n  * **Feature**: ``wcswidth()`` now determines printable length\n    for (most) combining_ characters.  The developer's tool\n    `bin/wcwidth-browser.py`_ is improved to display combining_\n    characters when provided the ``--combining`` option\n    (`Thomas Ballinger`_ and `Leta Montopoli`_ `PR #5`_).\n  * **Feature**: added static analysis (prospector_) to testing\n    framework.\n\n0.1.3 *2014-10-29 Pre-Alpha*\n  * **Bugfix**: 2nd parameter of wcswidth was not honored.\n    (`Thomas Ballinger`_, `PR #4`_).\n\n0.1.2 *2014-10-28 Pre-Alpha*\n  * **Updated** tables to Unicode Specification 7.0.0.\n    (`Thomas Ballinger`_, `PR #3`_).\n\n0.1.1 *2014-05-14 Pre-Alpha*\n  * Initial release to pypi, Based on Unicode Specification 6.3.0\n\nThis code was originally derived directly from C code of the same name,\nwhose latest version is available at\nhttp://www.cl.cam.ac.uk/~mgk25/ucs/wcwidth.c::\n\n * Markus Kuhn -- 2007-05-26 (Unicode 5.0)\n *\n * Permission to use, copy, modify, and distribute this software\n * for any purpose and without fee is hereby granted. The author\n * disclaims all warranties with regard to this software.\n\n.. _`tox`: https://testrun.org/tox/latest/install.html\n.. _`prospector`: https://github.com/landscapeio/prospector\n.. _`combining`: https://en.wikipedia.org/wiki/Combining_character\n.. _`bin/`: https://github.com/jquast/wcwidth/tree/master/bin\n.. _`bin/wcwidth-browser.py`: https://github.com/jquast/wcwidth/tree/master/bin/wcwidth-browser.py\n.. _`Thomas Ballinger`: https://github.com/thomasballinger\n.. _`Leta Montopoli`: https://github.com/lmontopo\n.. _`Philip Craig`: https://github.com/philipc\n.. _`PR #3`: https://github.com/jquast/wcwidth/pull/3\n.. _`PR #4`: https://github.com/jquast/wcwidth/pull/4\n.. _`PR #5`: https://github.com/jquast/wcwidth/pull/5\n.. _`PR #11`: https://github.com/jquast/wcwidth/pull/11\n.. _`PR #18`: https://github.com/jquast/wcwidth/pull/18\n.. _`PR #30`: https://github.com/jquast/wcwidth/pull/30\n.. _`PR #35`: https://github.com/jquast/wcwidth/pull/35\n.. _`jquast/blessed`: https://github.com/jquast/blessed\n.. _`selectel/pyte`: https://github.com/selectel/pyte\n.. _`thomasballinger/curtsies`: https://github.com/thomasballinger/curtsies\n.. _`dbcli/pgcli`: https://github.com/dbcli/pgcli\n.. _`jonathanslenders/python-prompt-toolkit`: https://github.com/jonathanslenders/python-prompt-toolkit\n.. _`timoxley/wcwidth`: https://github.com/timoxley/wcwidth\n.. _`wcwidth(3)`:  http://man7.org/linux/man-pages/man3/wcwidth.3.html\n.. _`wcswidth(3)`: http://man7.org/linux/man-pages/man3/wcswidth.3.html\n.. _`astanin/python-tabulate`: https://github.com/astanin/python-tabulate\n.. _`janlelis/unicode-display_width`: https://github.com/janlelis/unicode-display_width\n.. _`LuminosoInsight/python-ftfy`: https://github.com/LuminosoInsight/python-ftfy\n.. _`alecrabbit/php-wcwidth`: https://github.com/alecrabbit/php-wcwidth\n.. _`Text::CharWidth`: https://metacpan.org/pod/Text::CharWidth\n.. _`bluebear94/Terminal-WCWidth`: https://github.com/bluebear94/Terminal-WCWidth\n.. _`mattn/go-runewidth`: https://github.com/mattn/go-runewidth\n.. _`emugel/wcwidth`: https://github.com/emugel/wcwidth\n.. _`jquast/ucs-detect`: https://github.com/jquast/ucs-detect\n.. _`Avram Lubkin`: https://github.com/avylove\n.. _`nbedos/termtosvg`: https://github.com/nbedos/termtosvg\n.. _`peterbrittain/asciimatics`: https://github.com/peterbrittain/asciimatics\n.. _`aperezdc/lua-wcwidth`: https://github.com/aperezdc/lua-wcwidth\n.. _`fumiyas/wcwidth-cjk`: https://github.com/fumiyas/wcwidth-cjk\n.. |pypi_downloads| image:: https://img.shields.io/pypi/dm/wcwidth.svg?logo=pypi\n    :alt: Downloads\n    :target: https://pypi.org/project/wcwidth/\n.. |codecov| image:: https://codecov.io/gh/jquast/wcwidth/branch/master/graph/badge.svg\n    :alt: codecov.io Code Coverage\n    :target: https://codecov.io/gh/jquast/wcwidth/\n.. |license| image:: https://img.shields.io/github/license/jquast/wcwidth.svg\n    :target: https://pypi.python.org/pypi/wcwidth/\n    :alt: MIT License\n\n\n",
          "name": "wcwidth",
          "author": [
            {
              "type": "Person",
              "name": "Jeff Quast",
              "email": [
                "contact@jeffquast.com"
              ],
              "familyName": [
                "Quast"
              ],
              "givenName": [
                "Jeff"
              ]
            }
          ],
          "keywords": "cjk,combining,console,eastasian,emojiemulator,terminal,unicode,wcswidth,wcwidth,xterm",
          "license": "MIT",
          "codeRepository": "https://pypi.org/project/wcwidth/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python",
          "applicationCategory": [
            "Software Development",
            "Terminals"
          ],
          "applicationSubCategory": [
            "Internationalization",
            "Libraries",
            "Localization"
          ]
        },
        {
          "type": "SoftwarePackage",
          "description": "python-webencodings\n===================\n\nThis is a Python implementation of the `WHATWG Encoding standard\n<http://encoding.spec.whatwg.org/>`_.\n\n* Latest documentation: http://packages.python.org/webencodings/\n* Source code and issue tracker:\n  https://github.com/gsnedders/python-webencodings\n* PyPI releases: http://pypi.python.org/pypi/webencodings\n* License: BSD\n* Python 2.6+ and 3.3+\n\nIn order to be compatible with legacy web content\nwhen interpreting something like ``Content-Type: text/html; charset=latin1``,\ntools need to use a particular set of aliases for encoding labels\nas well as some overriding rules.\nFor example, ``US-ASCII`` and ``iso-8859-1`` on the web are actually\naliases for ``windows-1252``, and an UTF-8 or UTF-16 BOM takes precedence\nover any other encoding declaration.\nThe Encoding standard defines all such details so that implementations do\nnot have to reverse-engineer each other.\n\nThis module has encoding labels and BOM detection,\nbut the actual implementation for encoders and decoders is Python’s.\n\n\n",
          "name": "webencodings",
          "author": [
            {
              "type": "Person",
              "name": "Geoffrey Sneddon",
              "email": [
                "me@gsnedders.com"
              ],
              "familyName": [
                "Sneddon"
              ],
              "givenName": [
                "Geoffrey"
              ]
            }
          ],
          "license": "BSD",
          "version": "==0.5.1",
          "codeRepository": "https://pypi.org/project/webencodings/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python",
          "applicationCategory": [
            "Internet"
          ],
          "applicationSubCategory": [
            "WWW/HTTP"
          ]
        },
        {
          "type": "SoftwarePackage",
          "description": "Usage\n=====\n\n  python -m wget [options] <URL>\n\n  options:\n    -o --output FILE|DIR   output filename or directory\n\n\nAPI Usage\n=========\n\n  >>> import wget\n  >>> url = 'http://www.futurecrew.com/skaven/song_files/mp3/razorback.mp3'\n  >>> filename = wget.download(url)\n  100% [................................................] 3841532 / 3841532>\n  >> filename\n  'razorback.mp3'\n\nThe skew that you see above is a documented side effect.\nAlternative progress bar:\n\n  >>> wget.download(url, bar=bar_thermometer)\n\n\nChangeLog\n=========\n3.2 (2015-10-22)\n * download(url) can again be unicode on Python 2.7\n   https://bitbucket.org/techtonik/python-wget/issues/8\n\n3.1 (2015-10-18)\n * it saves unknown files under download.wget filename\n   https://bitbucket.org/techtonik/python-wget/issues/6\n * it prints unicode chars to Windows console\n * it downloads unicode urls with Python 3\n\n3.0 (2015-10-17)\n * it can download and save unicode filenames\n   https://bitbucket.org/techtonik/python-wget/issues/7\n\n2.2 (2014-07-19)\n * it again can download without -o option\n\n2.1 (2014-07-10)\n * it shows command line help\n * -o option allows to select output file/directory\n\n   * download(url, out, bar) contains out parameter\n\n2.0 (2013-04-26)\n * it shows percentage\n * it has usage examples\n * it changes if being used as a library\n\n   * download shows progress bar by default\n   * bar_adaptive gets improved algorithm\n   * download(url, bar) contains bar parameter\n     * bar(current, total)\n   * progress_callback is named callback_progress\n\n1.0 (2012-11-13)\n * it runs with Python 3\n\n0.9 (2012-11-13)\n * it renames file if it already exists\n * it can be used as a library\n\n   * download(url) returns filename\n   * bar_adaptive() draws progress bar\n   * bar_thermometer() simplified bar\n\n0.8 (2011-05-03)\n * it detects filename from HTTP headers\n\n0.7 (2011-03-01)\n * compatibility fix for Python 2.5\n * limit width of progress bar to 100 chars\n\n0.6 (2010-04-24)\n * it detects console width on POSIX\n\n0.5 (2010-04-23)\n * it detects console width on Windows\n\n0.4 (2010-04-15)\n * it shows cute progress bar\n\n0.3 (2010-04-05)\n * it creates temp file in current dir\n\n0.2 (2010-02-16)\n * it tries to detect filename from URL\n\n0.1 (2010-02-04)\n * it can download file\n\n\nRelease Checklist\n=================\n\n| [ ] update version in wget.py\n| [x] update description in setup.py\n| [ ] python setup.py check -mrs\n| [ ] python setup.py sdist upload\n| [ ] tag hg version\n\n-- \nanatoly techtonik <techtonik@gmail.com>",
          "name": "wget",
          "author": [
            {
              "type": "Person",
              "name": "anatoly techtonik",
              "email": [
                "techtonik@gmail.com"
              ],
              "familyName": [
                "techtonik"
              ],
              "givenName": [
                "anatoly"
              ]
            }
          ],
          "license": "Public Domain",
          "version": "==3.2",
          "codeRepository": "https://pypi.org/project/wget/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python",
          "applicationCategory": [
            "Software Development",
            "System",
            "Utilities"
          ],
          "applicationSubCategory": [
            "Libraries",
            "Networking"
          ]
        },
        {
          "type": "SoftwarePackage",
          "description": "\n.. image:: https://img.shields.io/pypi/v/widgetsnbextension.svg\n   :target: https://pypi.python.org/pypi/widgetsnbextension/\n   :alt: Version Number\n\n.. image:: https://img.shields.io/pypi/dm/widgetsnbextension.svg\n   :target: https://pypi.python.org/pypi/widgetsnbextension/\n   :alt: Number of PyPI downloads\n\nInteractive HTML Widgets\n========================\n\nInteractive HTML widgets for Jupyter notebooks.\n\nUsage\n=====\n\nInstall the corresponding package for your kernel.  i.e. Python users would also\ninstall `ipywidgets`.  Refer to that package's documentation for usage\ninstructions.\n\n\n",
          "name": "widgetsnbextension",
          "author": [
            {
              "type": "Person",
              "name": "IPython Development",
              "familyName": [
                "Development"
              ],
              "givenName": [
                "IPython"
              ]
            }
          ],
          "keywords": "Interactive,Interpreter,Shell,Web",
          "license": "BSD",
          "version": "==3.5.1",
          "codeRepository": "https://pypi.org/project/widgetsnbextension/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python"
        },
        {
          "type": "SoftwarePackage",
          "description": "XlsxWriter\n==========\n\n**XlsxWriter** is a Python module for writing files in the Excel 2007+ XLSX\nfile format.\n\nXlsxWriter can be used to write text, numbers, formulas and hyperlinks to\nmultiple worksheets and it supports features such as formatting and many more,\nincluding:\n\n* 100% compatible Excel XLSX files.\n* Full formatting.\n* Merged cells.\n* Defined names.\n* Charts.\n* Autofilters.\n* Data validation and drop down lists.\n* Conditional formatting.\n* Worksheet PNG/JPEG/GIF/BMP/WMF/EMF images.\n* Rich multi-format strings.\n* Cell comments.\n* Integration with Pandas.\n* Textboxes.\n* Support for adding Macros.\n* Memory optimization mode for writing large files.\n\nIt supports Python 2.7, 3.4+ and PyPy and uses standard libraries only.\n\nHere is a simple example:\n\n.. code-block:: python\n\n   import xlsxwriter\n\n\n   # Create an new Excel file and add a worksheet.\n   workbook = xlsxwriter.Workbook('demo.xlsx')\n   worksheet = workbook.add_worksheet()\n\n   # Widen the first column to make the text clearer.\n   worksheet.set_column('A:A', 20)\n\n   # Add a bold format to use to highlight cells.\n   bold = workbook.add_format({'bold': True})\n\n   # Write some simple text.\n   worksheet.write('A1', 'Hello')\n\n   # Text with formatting.\n   worksheet.write('A2', 'World', bold)\n\n   # Write some numbers, with row/column notation.\n   worksheet.write(2, 0, 123)\n   worksheet.write(3, 0, 123.456)\n\n   # Insert an image.\n   worksheet.insert_image('B5', 'logo.png')\n\n   workbook.close()\n\n.. image:: https://raw.github.com/jmcnamara/XlsxWriter/master/dev/docs/source/_images/demo.png\n\nSee the full documentation at: https://xlsxwriter.readthedocs.io\n\nRelease notes: https://xlsxwriter.readthedocs.io/changes.html\n\n\n\n",
          "name": "XlsxWriter",
          "author": [
            {
              "type": "Person",
              "name": "John McNamara",
              "email": [
                "jmcnamara@cpan.org"
              ],
              "familyName": [
                "McNamara"
              ],
              "givenName": [
                "John"
              ]
            }
          ],
          "license": "BSD",
          "codeRepository": "https://pypi.org/project/XlsxWriter/",
          "programmingLanguage": [
            {
              "type": "ComputerLanguage",
              "name": "Python"
            }
          ],
          "runtimePlatform": "Python"
        }
      ]
    }
  ]
}